// Created by Microsoft (R) C/C++ Compiler Version 14.39.33519.0 (3c980f58).
//
// C:\Users\minch\Desktop\Курсовой проект\CourseProject\CourseProject\x64\Debug\kAPI5.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files\ASCON\KOMPAS-3D v22 Study\SDK\lib\kAPI5.tlb
// compiler-generated file - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Kompas6API5 {

//
// Forward references and typedefs
//

struct __declspec(uuid("0422828c-f174-495e-ac5d-d31014dbbe87"))
/* LIBID */ __Kompas6API5;
struct __declspec(uuid("e36bc97c-39d6-4402-9c25-c7008a217e02"))
/* dispinterface */ KompasObject;
struct __declspec(uuid("af4e160d-5c89-4f21-b0f2-d53397bdaf78"))
/* dispinterface */ ksDocument2D;
struct /* coclass */ Object2DNotify;
struct __declspec(uuid("2e29c343-c521-4b0f-b37d-587d0347b7ba"))
/* dispinterface */ ksObject2DNotify;
struct /* coclass */ SelectionMngNotify;
struct __declspec(uuid("a421368a-34b6-4ddf-9a52-73b3488ee83f"))
/* dispinterface */ ksSelectionMngNotify;
struct __declspec(uuid("1fe1eb28-cd28-4700-8e46-25ccfe9c0ec8"))
/* dispinterface */ ksObject2DNotifyResult;
struct /* coclass */ Document2DNotify;
struct __declspec(uuid("13f0be95-3361-4ad9-90af-d935ea64a127"))
/* dispinterface */ ksDocument2DNotify;
struct __declspec(uuid("111cefe1-a0a7-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksDocument3D;
struct /* coclass */ Document3DNotify;
struct __declspec(uuid("b6c1bcfd-68da-4a0a-a95c-296084c6a01a"))
/* dispinterface */ ksDocument3DNotify;
struct __declspec(uuid("508a0cca-9d74-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksEntity;
struct __declspec(uuid("eb61a981-f63e-47e1-bee8-2d1612c78e78"))
/* dispinterface */ ksAttribute3DCollection;
struct __declspec(uuid("3eeb2b43-56ff-49c0-afcf-69e990a7d84c"))
/* dispinterface */ ksAttribute3D;
struct __declspec(uuid("ce6a46ff-02b4-4c7e-af50-3f3707c8b122"))
/* dispinterface */ ksFeatureCollection;
struct __declspec(uuid("088bf9a8-37d3-4b15-a7ca-8c52ff1dbc41"))
/* dispinterface */ ksFeature;
struct __declspec(uuid("b0170141-c02c-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksEntityCollection;
struct __declspec(uuid("508a0ccd-9d74-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksPart;
struct /* coclass */ Object3DNotify;
struct __declspec(uuid("bfa024b6-679e-4a95-b6c2-1ea47a7cd0e9"))
/* dispinterface */ ksObject3DNotify;
struct __declspec(uuid("9c3ecc92-e72f-4892-8921-7886f34ca9ad"))
/* dispinterface */ ksObject3DNotifyResult;
struct __declspec(uuid("2dfacc64-c4a4-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlacement;
struct __declspec(uuid("508b5962-df59-4cee-8611-ad10fdf0c811"))
/* dispinterface */ ksComponentPositioner;
struct __declspec(uuid("c7cb743a-c59d-4c27-8cb6-971c2a393f2f"))
/* dispinterface */ ksKompasObjectNotify;
struct __declspec(uuid("324c1a45-67ad-41fb-be57-624f930646f1"))
/* dispinterface */ ksDocumentFileNotify;
struct __declspec(uuid("9f88caaa-a50f-46f4-904a-846c792fa649"))
/* dispinterface */ ksDocument3DNotifyResult;
struct __declspec(uuid("364521a3-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksSpecRoughParam;
struct __declspec(uuid("364521a6-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksEllipseParam;
struct __declspec(uuid("364521a9-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksEllipseArcParam;
struct __declspec(uuid("364521ac-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksEllipseArcParam1;
struct __declspec(uuid("364521af-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksEquidistantParam;
struct __declspec(uuid("364521b2-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksParagraphParam;
struct __declspec(uuid("364521b7-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksTextItemParam;
struct __declspec(uuid("364521ba-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksTextLineParam;
struct __declspec(uuid("364521bd-94b5-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksTextItemFont;
struct __declspec(uuid("e79c2501-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksCornerParam;
struct __declspec(uuid("e79c2504-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksContourParam;
struct __declspec(uuid("e79c2507-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLayerParam;
struct __declspec(uuid("e79c250a-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLineParam;
struct __declspec(uuid("e79c250d-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRegularPolygonParam;
struct __declspec(uuid("e79c2510-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRectangleParam;
struct __declspec(uuid("e79c2513-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksBaseParam;
struct __declspec(uuid("e79c2516-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLtVariant;
struct __declspec(uuid("e79c2519-9584-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksUserParam;
struct __declspec(uuid("3198e121-9585-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksMathPointParam;
struct __declspec(uuid("910ec541-958d-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksCurvePicture;
struct __declspec(uuid("910ec544-958d-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksCurvePattern;
struct __declspec(uuid("8075ede4-6c85-4711-8685-68fbe359d4c4"))
/* dispinterface */ ksTAN;
struct __declspec(uuid("c175bfb8-d7d6-4325-bfda-2a282b9d1119"))
/* dispinterface */ ksCON;
struct __declspec(uuid("ea92e649-239e-4105-bbd3-aef4817bd783"))
/* dispinterface */ ksInertiaParam;
struct __declspec(uuid("283f77eb-7e2c-4f71-8b16-4d286fa4857e"))
/* dispinterface */ ksMassInertiaParam;
struct __declspec(uuid("f2d5ae01-45de-4496-b01b-9958caef5943"))
/* dispinterface */ ksMathematic2D;
struct __declspec(uuid("4d91cd9a-6e02-409d-9360-cf7fef60d31c"))
/* dispinterface */ ksDynamicArray;
struct __declspec(uuid("2a4d4542-95b3-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRDimDrawingParam;
struct __declspec(uuid("2a4d4545-95b3-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRDimSourceParam;
struct __declspec(uuid("7f7d6f81-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRDimParam;
struct __declspec(uuid("7f7d6f84-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLineSegParam;
struct __declspec(uuid("7f7d6f87-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksCircleParam;
struct __declspec(uuid("7f7d6f8a-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksArcByAngleParam;
struct __declspec(uuid("7f7d6f8d-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksArcByPointParam;
struct __declspec(uuid("7f7d6f90-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksPointParam;
struct __declspec(uuid("7f7d6f93-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksHatchParam;
struct __declspec(uuid("7f7d6f96-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksTextParam;
struct __declspec(uuid("7f7d6f99-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksNurbsPointParam;
struct __declspec(uuid("7f7d6f9c-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDoubleValue;
struct __declspec(uuid("7f7d6f9f-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksNurbsParam;
struct __declspec(uuid("7f7d6fa2-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksConicArcParam;
struct __declspec(uuid("7f7d6fa5-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksCentreParam;
struct __declspec(uuid("7f7d6fa8-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksPlacementParam;
struct __declspec(uuid("7f7d6fab-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRasterParam;
struct __declspec(uuid("7f7d6fae-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksPolylineParam;
struct __declspec(uuid("7f7d6fb1-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksInsertFragmentParam;
struct __declspec(uuid("7f7d6fb4-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksViewParam;
struct __declspec(uuid("7f7d6fb7-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLBreakDimSource;
struct __declspec(uuid("7f7d6fba-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksBreakDimDrawing;
struct __declspec(uuid("7f7d6fbd-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLBreakDimParam;
struct __declspec(uuid("7f7d6fc0-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksABreakDimParam;
struct __declspec(uuid("7f7d6fc3-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksInsertFragmentParamEx;
struct __declspec(uuid("7f7d6fc6-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksBezierParam;
struct __declspec(uuid("7f7d6fc9-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksBezierPointParam;
struct __declspec(uuid("7f7d6fcc-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDimTextParam;
struct __declspec(uuid("7f7d6fcf-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLDimSourceParam;
struct __declspec(uuid("7f7d6fd2-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDimDrawingParam;
struct __declspec(uuid("7f7d6fd5-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLDimParam;
struct __declspec(uuid("7f7d6fd8-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksADimSourceParam;
struct __declspec(uuid("7f7d6fdb-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDimensionPartsParam;
struct __declspec(uuid("7f7d6fde-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksADimParam;
struct __declspec(uuid("7f7d6fe1-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRBreakDrawingParam;
struct __declspec(uuid("7f7d6fe4-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksRBreakDimParam;
struct __declspec(uuid("7f7d6fe7-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksQualityItemParam;
struct __declspec(uuid("7f7d6fea-97da-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksQualityContensParam;
struct __declspec(uuid("d06c9101-98ca-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksIterator;
struct __declspec(uuid("d06c9104-98ca-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksFragment;
struct __declspec(uuid("d06c910a-98ca-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksFragmentLibrary;
struct __declspec(uuid("fbcc5b81-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksTechnicalDemandParam;
struct __declspec(uuid("fbcc5b84-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksOrdinatedSourceParam;
struct __declspec(uuid("fbcc5b87-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksOrdinatedDimParam;
struct __declspec(uuid("fbcc5b8a-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksOrdinatedDrawingParam;
struct __declspec(uuid("fbcc5b8d-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksSheetSize;
struct __declspec(uuid("fbcc5b90-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksStandartSheet;
struct __declspec(uuid("fbcc5b93-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksSheetPar;
struct __declspec(uuid("fbcc5b96-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDocumentParam;
struct __declspec(uuid("fbcc5b99-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDimensionsOptions;
struct __declspec(uuid("fbcc5b9c-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksSnapOptions;
struct __declspec(uuid("fbcc5b9f-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksLibraryStyleParam;
struct __declspec(uuid("404e7d5a-a13f-4cff-8214-fea7012110cb"))
/* dispinterface */ ksStampNotify;
struct __declspec(uuid("fbcc5ba5-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksStamp;
struct __declspec(uuid("fbcc5ba8-996c-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksSheetOptions;
struct __declspec(uuid("910ec549-958d-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksCurvePatternEx;
struct __declspec(uuid("910ec54c-958d-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksCurveStyleParam;
struct __declspec(uuid("3f715e24-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksTextStyleParam;
struct __declspec(uuid("3f715e27-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksHatchLineParam;
struct __declspec(uuid("3f715e2a-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksHatchStyleParam;
struct __declspec(uuid("3f715e2d-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksRectParam;
struct __declspec(uuid("3f715e30-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksShelfPar;
struct __declspec(uuid("3f715e33-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksRoughPar;
struct __declspec(uuid("3f715e36-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksRoughParam;
struct __declspec(uuid("3f715e39-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksChar255;
struct __declspec(uuid("3f715e40-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksLeaderParam;
struct __declspec(uuid("3f715e43-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksPosLeaderParam;
struct __declspec(uuid("3f715e46-97d9-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksBrandLeaderParam;
struct __declspec(uuid("9af8e341-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksMarkerLeaderParam;
struct __declspec(uuid("9af8e344-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksType1;
struct __declspec(uuid("9af8e347-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksType2;
struct __declspec(uuid("9af8e34a-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksType3;
struct __declspec(uuid("9af8e34d-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksType5;
struct __declspec(uuid("9af8e350-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksType6;
struct __declspec(uuid("9af8e353-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksPhantom;
struct __declspec(uuid("9af8e356-98a0-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksRequestInfo;
struct __declspec(uuid("cd1c0144-98dc-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksViewPointerParam;
struct __declspec(uuid("4fd7ce81-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksCutLineParam;
struct __declspec(uuid("4fd7ce84-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksToleranceBranch;
struct __declspec(uuid("4fd7ce87-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksToleranceParam;
struct __declspec(uuid("4fd7ce8a-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcColumnParam;
struct __declspec(uuid("4fd7ce8d-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksRecordTypeAttrParam;
struct __declspec(uuid("4fd7ce90-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksNumberTypeAttrParam;
struct __declspec(uuid("4fd7ce93-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcStyleColumnParam;
struct __declspec(uuid("4fd7ce96-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcStyleSectionParam;
struct __declspec(uuid("4fd7ce99-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcSubSectionParam;
struct __declspec(uuid("4fd7ce9c-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcTuningSectionParam;
struct __declspec(uuid("4fd7ce9f-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcTuningStyleParam;
struct __declspec(uuid("4fd7cea2-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcStyleParam;
struct __declspec(uuid("4fd7cea5-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcDescrParam;
struct __declspec(uuid("4fd7cea8-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksDocAttachedSpcParam;
struct __declspec(uuid("4fd7ceab-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcObjParam;
struct __declspec(uuid("4fd7ceae-9968-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksLibStyle;
struct __declspec(uuid("0981cd01-9a49-11d6-8732-00c0262cdd2c"))
/* dispinterface */ ksDataBaseObject;
struct __declspec(uuid("1bd030f4-4058-4a86-9f4f-1aeef8be8d23"))
/* dispinterface */ ksSpcDocumentNotify;
struct __declspec(uuid("51e74521-9a3a-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpcDocument;
struct /* coclass */ SpcDocumentNotify;
struct __declspec(uuid("ac5004d1-c240-41fc-ab84-7eb5c793ae7f"))
/* dispinterface */ ksSpcObjectNotify;
struct __declspec(uuid("0331ab4b-f25b-4eb9-9c8a-bfea414e3822"))
/* dispinterface */ ksSpecificationNotify;
struct __declspec(uuid("51e74524-9a3a-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksSpecification;
struct /* coclass */ SpcObjectNotify;
struct __declspec(uuid("74d745f1-9a3a-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksDocumentTxt;
struct __declspec(uuid("cc26da61-9b22-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksAttributeTypeParam;
struct __declspec(uuid("ce0d05e1-9b2a-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksColumnInfoParam;
struct __declspec(uuid("ce0d05e4-9b2a-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksAttributeParam;
struct __declspec(uuid("508a0cc1-9d74-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksVariable;
struct __declspec(uuid("fa93aa21-9b3d-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksLibraryAttrTypeParam;
struct __declspec(uuid("fa93aa24-9b3d-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksAttributeObject;
struct __declspec(uuid("e9807824-9d55-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksRequestInfo3D;
struct __declspec(uuid("508a0cc4-9d74-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksMateConstraint;
struct __declspec(uuid("508a0cc7-9d74-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksDefaultObject;
struct __declspec(uuid("111cefe4-a0a7-11d6-95ce-00c0262d30e3"))
/* dispinterface */ ksModelLibrary;
struct __declspec(uuid("03ceac81-c0b8-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksVariableCollection;
struct __declspec(uuid("03ceac84-c0b8-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksMateConstraintCollection;
struct __declspec(uuid("03ceac87-c0b8-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPartCollection;
struct __declspec(uuid("e6e78d61-c0fa-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksMeshPartArrayDefinition;
struct __declspec(uuid("ddd05143-c180-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCircularPartArrayDefinition;
struct __declspec(uuid("ddd05146-c180-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCurvePartArrayDefinition;
struct __declspec(uuid("ddd05149-c180-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksDerivativePartArrayDefinition;
struct __declspec(uuid("0307bb81-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksAxis2PlanesDefinition;
struct __declspec(uuid("0307bb84-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksAxisOperationsDefinition;
struct __declspec(uuid("0307bb87-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksAxis2PointsDefinition;
struct __declspec(uuid("0307bb8a-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksAxisEdgeDefinition;
struct __declspec(uuid("0307bb8d-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksMeshCopyDefinition;
struct __declspec(uuid("0307bb90-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCircularCopyDefinition;
struct __declspec(uuid("0307bb93-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCurveCopyDefinition;
struct __declspec(uuid("0307bb96-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksMirrorCopyDefinition;
struct __declspec(uuid("0307bb99-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksMirrorCopyAllDefinition;
struct __declspec(uuid("0307bb9c-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksConicSpiralDefinition;
struct __declspec(uuid("0307bb9f-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCylindricSpiralDefinition;
struct __declspec(uuid("0307bba2-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPolyLineDefinition;
struct __declspec(uuid("1bcc4f0f-1091-41a3-895b-0608d20715b7"))
/* dispinterface */ ksPolyLineVertexParam;
struct __declspec(uuid("0307bba5-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksSplineDefinition;
struct __declspec(uuid("deefefe1-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBaseExtrusionDefinition;
struct __declspec(uuid("deefefe4-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBossExtrusionDefinition;
struct __declspec(uuid("deefefe7-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCutExtrusionDefinition;
struct __declspec(uuid("b20e24c3-5e4a-4cda-a1ed-6bb8ebc81a29"))
/* dispinterface */ ksExtrusionSurfaceDefinition;
struct __declspec(uuid("0307bba8-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksFaceDefinition;
struct __declspec(uuid("0307bbab-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksEdgeDefinition;
struct __declspec(uuid("0307bbae-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksChamferDefinition;
struct __declspec(uuid("0307bbb1-c193-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksFilletDefinition;
struct __declspec(uuid("deefefea-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBaseLoftDefinition;
struct __declspec(uuid("deefefed-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBossLoftDefinition;
struct __declspec(uuid("deefeff0-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCutLoftDefinition;
struct __declspec(uuid("e04339b5-aa08-4717-8e50-90ed0e375624"))
/* dispinterface */ ksLoftSurfaceDefinition;
struct __declspec(uuid("deefeff3-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksInclineDefinition;
struct __declspec(uuid("deefeff6-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksShellDefinition;
struct __declspec(uuid("deefeff9-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBaseEvolutionDefinition;
struct __declspec(uuid("deefeffc-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBossEvolutionDefinition;
struct __declspec(uuid("deefefff-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCutEvolutionDefinition;
struct __declspec(uuid("2bd4c79e-e2c3-42e8-8fcc-b51ffbde9f69"))
/* dispinterface */ ksEvolutionSurfaceDefinition;
struct __declspec(uuid("deeff002-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksRibDefinition;
struct __declspec(uuid("deeff005-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCutByPlaneDefinition;
struct __declspec(uuid("deeff008-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCutBySketchDefinition;
struct __declspec(uuid("deeff00b-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneOffsetDefinition;
struct __declspec(uuid("deeff00e-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneAngleDefinition;
struct __declspec(uuid("deeff011-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlane3PointsDefinition;
struct __declspec(uuid("deeff014-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneNormalToSurfaceDefinition;
struct __declspec(uuid("deeff017-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneTangentToSurfaceDefinition;
struct __declspec(uuid("deeff01a-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneEdgePointDefinition;
struct __declspec(uuid("deeff01d-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneParallelDefinition;
struct __declspec(uuid("deeff020-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlanePerpendicularDefinition;
struct __declspec(uuid("deeff023-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneLineToEdgeDefinition;
struct __declspec(uuid("deeff026-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksPlaneLineToPlaneDefinition;
struct __declspec(uuid("deeff029-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksThinParam;
struct __declspec(uuid("deeff02c-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksExtrusionParam;
struct __declspec(uuid("deeff02f-c3e2-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksRotatedParam;
struct __declspec(uuid("2dfacc61-c4a4-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksColorParam;
struct __declspec(uuid("2dfacc67-c4a4-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBaseRotatedDefinition;
struct __declspec(uuid("2dfacc6a-c4a4-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksBossRotatedDefinition;
struct __declspec(uuid("2dfacc6d-c4a4-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksCutRotatedDefinition;
struct __declspec(uuid("fd27841d-1374-4f7f-ae8a-c2a44f89120d"))
/* dispinterface */ ksRotatedSurfaceDefinition;
struct __declspec(uuid("2dfacc70-c4a4-11d6-8734-00c0262cdd2c"))
/* dispinterface */ ksSketchDefinition;
struct __declspec(uuid("1a91a8ab-af8c-4ee3-86d4-0a9c00123195"))
/* dispinterface */ ksRasterFormatParam;
struct __declspec(uuid("0fd25ff9-ab0a-48f3-bad4-f193116c0887"))
/* dispinterface */ ksAdditionFormatParam;
struct __declspec(uuid("862e250d-9db1-47e8-8ee2-9be2d2453d5a"))
/* dispinterface */ ksConstraintParam;
struct __declspec(uuid("78a2c35e-a7da-414e-b90a-f19998ec7bd1"))
/* dispinterface */ ksImportedSurfaceDefinition;
struct __declspec(uuid("0e95ace0-0e73-406f-ae94-e8a0592e298d"))
/* dispinterface */ ksFaceCollection;
struct __declspec(uuid("a7257e73-eb61-4602-bc8b-2d00ea4aa062"))
/* dispinterface */ ksVertexDefinition;
struct __declspec(uuid("b810650e-7819-485c-90d2-adeb647ae5e2"))
/* dispinterface */ ksTessellation;
struct __declspec(uuid("eb6afbc0-c387-4e07-b24e-ddf2b7926a26"))
/* dispinterface */ ksFacet;
struct __declspec(uuid("abc84fe5-3945-4a0b-820a-719bf4b79224"))
/* dispinterface */ ksMeasurer;
struct __declspec(uuid("cfc49c01-7653-4845-93fd-13428f5d58ec"))
/* dispinterface */ ksBodyCollection;
struct __declspec(uuid("03efc9dd-e05a-4277-bc7c-4fd499a252de"))
/* dispinterface */ ksBody;
struct __declspec(uuid("963cb6e1-b9bf-4234-964a-13bfe6c0282a"))
/* dispinterface */ ksSurface;
struct __declspec(uuid("6096a4fd-970b-468c-815e-37ca1970a203"))
/* dispinterface */ ksEdgeCollection;
struct __declspec(uuid("88c32a80-3735-4e18-a02e-9b2a8f0a90e3"))
/* dispinterface */ ksOrientedEdge;
struct __declspec(uuid("5ce8909d-cf3d-418f-a9b9-0a12b23916c0"))
/* dispinterface */ ksOrientedEdgeCollection;
struct __declspec(uuid("22bc5c86-cf58-45e4-aa46-5e8d5a825798"))
/* dispinterface */ ksLoop;
struct __declspec(uuid("1bd7207e-36aa-47df-913e-ad26de6c16e8"))
/* dispinterface */ ksLoopCollection;
struct __declspec(uuid("7572648a-d4ee-41fe-8d74-ec7d1f91bde2"))
/* dispinterface */ ksCurve3D;
struct __declspec(uuid("dc8f6a7b-ff16-46ff-986d-2f7e1f6b25c4"))
/* dispinterface */ ksLineSeg3dParam;
struct __declspec(uuid("82758442-c9eb-48f7-b304-083c5e64d4e0"))
/* dispinterface */ ksCircle3dParam;
struct __declspec(uuid("5b8082b8-6ad3-4509-826d-d23b7f613213"))
/* dispinterface */ ksEllipse3dParam;
struct __declspec(uuid("6a6f6b95-d100-4d54-a430-70a42d342917"))
/* dispinterface */ ksPlaneParam;
struct __declspec(uuid("ccfa0d95-0834-4f92-988b-6e477ad67589"))
/* dispinterface */ ksConeParam;
struct __declspec(uuid("5d462836-cf69-4995-ab78-8c7a83d09bd7"))
/* dispinterface */ ksCylinderParam;
struct __declspec(uuid("c32977f3-3ca7-4d56-8ae7-4963e6851b75"))
/* dispinterface */ ksSphereParam;
struct __declspec(uuid("fda3b147-baf1-4f75-99aa-39d11323ea97"))
/* dispinterface */ ksTorusParam;
struct __declspec(uuid("f1cd604d-1d26-4f6b-8f94-f112133e6162"))
/* dispinterface */ ksNurbsPoint3dParam;
struct __declspec(uuid("a12b63e8-9e0a-4854-b724-e18275b9ff20"))
/* dispinterface */ ksNurbsSurfaceParam;
struct __declspec(uuid("4dddaedb-2819-42d9-bdbb-4ccbc98d76df"))
/* dispinterface */ ksNurbs3dParam;
struct __declspec(uuid("483e9889-e1ca-4ca5-be4e-ecb3d5cf0126"))
/* dispinterface */ ksNurbsKnotCollection;
struct __declspec(uuid("84af9c81-1795-4631-b58a-101732262e75"))
/* dispinterface */ ksNurbsPoint3dCollCollection;
struct __declspec(uuid("3ad5e519-74e2-4d3b-b6a3-b1e81f1006f1"))
/* dispinterface */ ksNurbsPoint3dCollection;
struct __declspec(uuid("bf65b990-c2dc-4a12-9eb7-3e868608af47"))
/* dispinterface */ ksViewProjection;
struct __declspec(uuid("a174f872-c800-409e-9fb2-ff5b89d8b4b8"))
/* dispinterface */ ksViewProjectionCollection;
struct __declspec(uuid("be41850c-cfc5-40d4-ae49-37aa391bcf4b"))
/* dispinterface */ ksSelectionMng;
struct __declspec(uuid("8f2aa755-d9d1-42a0-97bf-c92548ce7232"))
/* dispinterface */ ksChooseMng;
struct __declspec(uuid("7dcbcc76-5041-4c1e-9b33-12b1352d6d57"))
/* dispinterface */ ksArc3dParam;
struct __declspec(uuid("9f8de1dc-1268-4785-9217-1b0dd59b85fa"))
/* dispinterface */ ksTreeNodeParam;
struct __declspec(uuid("c81eb1da-bcb0-491a-8d22-923bf817d572"))
/* dispinterface */ ksAssociationViewParam;
struct __declspec(uuid("5a42b962-8f78-4557-b17a-1b871f8dbdb5"))
/* dispinterface */ ksViewColorParam;
struct __declspec(uuid("afe694d7-c1e5-468f-99b0-fe4c60c49899"))
/* dispinterface */ ksAxisLineParam;
struct __declspec(uuid("33706d56-d085-4840-833b-435aeb00be2a"))
/* dispinterface */ ksTextDocumentParam;
struct __declspec(uuid("25076616-4949-455e-a45c-1b801884d825"))
/* dispinterface */ ksRemoteElementParam;
struct __declspec(uuid("82f60797-d69c-4eb4-9f1a-24d625d5eafa"))
/* dispinterface */ ksDeletedCopyCollection;
struct __declspec(uuid("aacad820-7790-46eb-b17f-06ae42215ed7"))
/* dispinterface */ ksCopyObjectParam;
struct __declspec(uuid("5ddb6b14-6f3d-431f-b62f-c5fccafc3632"))
/* dispinterface */ ksThreadDefinition;
struct __declspec(uuid("f78e6b71-bef3-4a4d-ae50-fe96426f6fd1"))
/* dispinterface */ ksOverlapObjectOptions;
struct __declspec(uuid("abba6ce0-cb4c-4a32-98b4-b639352c75ba"))
/* dispinterface */ ksObjectsFilter3D;
struct __declspec(uuid("abba6ce0-cb4c-4a32-98b4-b639352c75bb"))
/* dispinterface */ ksParametrizationParam;
struct __declspec(uuid("02556461-d088-4f00-ae61-d366082db9bc"))
/* dispinterface */ ksMacro3DDefinition;
struct __declspec(uuid("97337daf-b7cd-4fb8-8e18-23f0230e5cbe"))
/* dispinterface */ ksAxisConefaceDefinition;
struct __declspec(uuid("99797f89-fba4-4582-812f-226afb50ed7d"))
/* dispinterface */ ksUnionComponentsDefinition;
struct __declspec(uuid("be5f10f5-b198-49d9-9140-b2b91e060533"))
/* dispinterface */ ksMoldCavityDefinition;
struct __declspec(uuid("e4091969-1c4e-4959-8d93-c2421564418b"))
/* dispinterface */ ksCoordinate3dCollection;
struct __declspec(uuid("abc7f8ee-cf07-4aa8-98a1-0de35db35b9e"))
/* dispinterface */ ksIntersectionResult;
struct __declspec(uuid("cc5e3539-5b35-46fc-afe1-19bb0168d52f"))
/* dispinterface */ ksPlaneMiddleDefinition;
struct __declspec(uuid("bc4c15a4-16e9-4cfa-a33e-cc86ba2fb546"))
/* dispinterface */ ksControlPointDefinition;
struct __declspec(uuid("177cbaf3-87e6-4376-b6a9-669c0e661bff"))
/* dispinterface */ ksConjunctivePointDefinition;
struct __declspec(uuid("e06b18bf-d2af-4201-99be-b7fa9eecf7a8"))
/* dispinterface */ ksChooseBodies;
struct __declspec(uuid("44277b89-eeb4-456c-8ef9-2dc48d61ec91"))
/* dispinterface */ ksAggregateDefinition;
struct __declspec(uuid("391938ae-79b6-4e3b-9815-ac1a31d9ea9d"))
/* dispinterface */ ksChangeLeaderParam;
struct /* coclass */ Application;
struct /* coclass */ KompasInvisible5;
struct /* coclass */ Object2DNotifyResult;
struct /* coclass */ FeatureCollection;
struct /* coclass */ placement;
struct /* coclass */ Object3DNotifyResult;
struct /* coclass */ Document3DNotifyResult;
struct /* coclass */ Document2D;
struct /* coclass */ SpecRoughParam;
struct /* coclass */ EllipseParam;
struct /* coclass */ EllipseArcParam;
struct /* coclass */ EllipseArcParam1;
struct /* coclass */ EquidistantParam;
struct /* coclass */ ParagraphParam;
struct /* coclass */ TextItemParam;
struct /* coclass */ TextLineParam;
struct /* coclass */ TextItemFont;
struct /* coclass */ CornerParam;
struct /* coclass */ ContourParam;
struct /* coclass */ LayerParam;
struct /* coclass */ LineParam;
struct /* coclass */ RegularPolygonParam;
struct /* coclass */ RectangleParam;
struct /* coclass */ BaseParam;
struct /* coclass */ LtVariant;
struct /* coclass */ UserParam;
struct /* coclass */ MathPointParam;
struct /* coclass */ CurvePicture;
struct /* coclass */ CurvePattern;
struct /* coclass */ TAN;
struct /* coclass */ CON;
struct /* coclass */ InertiaParam;
struct /* coclass */ MassInertiaParam;
struct /* coclass */ Mathematic2D;
struct /* coclass */ DynamicArray;
struct /* coclass */ RDimDrawingParam;
struct /* coclass */ RDimSourceParam;
struct /* coclass */ RDimParam;
struct /* coclass */ LineSegParam;
struct /* coclass */ CircleParam;
struct /* coclass */ ArcByAngleParam;
struct /* coclass */ ArcByPointParam;
struct /* coclass */ PointParam;
struct /* coclass */ HatchParam;
struct /* coclass */ TextParam;
struct /* coclass */ NurbsPointParam;
struct /* coclass */ DoubleValue;
struct /* coclass */ NurbsParam;
struct /* coclass */ ConicArcParam;
struct /* coclass */ CentreParam;
struct /* coclass */ PlacementParam;
struct /* coclass */ RasterParam;
struct /* coclass */ PolylineParam;
struct /* coclass */ InsertFragmentParam;
struct /* coclass */ ViewParam;
struct /* coclass */ LBreakDimSource;
struct /* coclass */ BreakDimDrawing;
struct /* coclass */ LBreakDimParam;
struct /* coclass */ ABreakDimParam;
struct /* coclass */ InsertFragmentParamEx;
struct /* coclass */ BezierParam;
struct /* coclass */ BezierPointParam;
struct /* coclass */ DimTextParam;
struct /* coclass */ LDimSourceParam;
struct /* coclass */ DimDrawingParam;
struct /* coclass */ LDimParam;
struct /* coclass */ ADimSourceParam;
struct /* coclass */ DimensionPartsParam;
struct /* coclass */ ADimParam;
struct /* coclass */ RBreakDrawingParam;
struct /* coclass */ RBreakDimParam;
struct /* coclass */ QualityItemParam;
struct /* coclass */ QualityContensParam;
struct /* coclass */ Iterator;
struct /* coclass */ Fragment;
struct /* coclass */ FragmentLib;
struct /* coclass */ TechnicalDemandParam;
struct /* coclass */ OrdinatedSourceParam;
struct /* coclass */ OrdinatedDimParam;
struct /* coclass */ OrdinatedDrawingParam;
struct /* coclass */ SheetSize;
struct /* coclass */ StandartSheet;
struct /* coclass */ SheetPar;
struct /* coclass */ DocumentParam;
struct /* coclass */ DimensionsOptions;
struct /* coclass */ SnapOptions;
struct /* coclass */ LibraryStyleParam;
struct /* coclass */ Stamp;
struct /* coclass */ SheetOptions;
struct /* coclass */ CurvePatternEx;
struct /* coclass */ CurveStyleParam;
struct /* coclass */ TextStyleParam;
struct /* coclass */ HatchLineParam;
struct /* coclass */ HatchStyleParam;
struct /* coclass */ RectParam;
struct /* coclass */ ShelfPar;
struct /* coclass */ roughPar;
struct /* coclass */ RoughParam;
struct /* coclass */ Char255;
struct /* coclass */ leaderParam;
struct /* coclass */ posLeaderParam;
struct /* coclass */ brandLeaderParam;
struct /* coclass */ markerLeaderParam;
struct /* coclass */ Type1;
struct /* coclass */ Type2;
struct /* coclass */ Type3;
struct /* coclass */ Type5;
struct /* coclass */ Type6;
struct /* coclass */ phantom;
struct /* coclass */ RequestInfo;
struct /* coclass */ ViewPointerParam;
struct /* coclass */ CutLineParam;
struct /* coclass */ ToleranceBranch;
struct /* coclass */ ToleranceParam;
struct /* coclass */ SpcColumnParam;
struct /* coclass */ RecordTypeAttrParam;
struct /* coclass */ NumberTypeAttrParam;
struct /* coclass */ SpcStyleColumnParam;
struct /* coclass */ SpcStyleSectionParam;
struct /* coclass */ SpcSubSectionParam;
struct /* coclass */ SpcTuningSectionParam;
struct /* coclass */ SpcTuningStyleParam;
struct /* coclass */ SpcStyleParam;
struct /* coclass */ SpcDescrParam;
struct /* coclass */ DocAttachedSpcParam;
struct /* coclass */ SpcObjParam;
struct /* coclass */ LibStyle;
struct /* coclass */ DataBaseObject;
struct /* coclass */ SpcDocument;
struct /* coclass */ Specification;
struct /* coclass */ DocumentTxt;
struct /* coclass */ AttributeTypeParam;
struct /* coclass */ ColumnInfoParam;
struct /* coclass */ AttributeParam;
struct /* coclass */ Variable;
struct /* coclass */ LibraryAttrTypeParam;
struct /* coclass */ AttributeObject;
struct /* coclass */ RequestInfo3D;
struct /* coclass */ MateConstraint;
struct /* coclass */ DefaultObject;
struct /* coclass */ entity;
struct /* coclass */ part;
struct /* coclass */ Document3D;
struct /* coclass */ ModelLibrary;
struct /* coclass */ EntityCollection;
struct /* coclass */ VariableCollection;
struct /* coclass */ MateConstraintCollection;
struct /* coclass */ PartCollection;
struct /* coclass */ MeshPartArrayDefinition;
struct /* coclass */ CircularPartArrayDefinition;
struct /* coclass */ CurvePartArrayDefinition;
struct /* coclass */ DerivativePartArrayDefinition;
struct /* coclass */ Axis2PlanesDefinition;
struct /* coclass */ AxisOperationsDefinition;
struct /* coclass */ Axis2PointsDefinition;
struct /* coclass */ AxisEdgeDefinition;
struct /* coclass */ MeshCopyDefinition;
struct /* coclass */ CircularCopyDefinition;
struct /* coclass */ CurveCopyDefinition;
struct /* coclass */ MirrorCopyDefinition;
struct /* coclass */ MirrorCopyAllDefinition;
struct /* coclass */ ConicSpiralDefinition;
struct /* coclass */ CylindricSpiralDefinition;
struct /* coclass */ PolyLineDefinition;
struct /* coclass */ SplineDefinition;
struct /* coclass */ faceDefinition;
struct /* coclass */ EdgeDefinition;
struct /* coclass */ ChamferDefinition;
struct /* coclass */ FilletDefinition;
struct /* coclass */ BaseExtrusionDefinition;
struct /* coclass */ BossExtrusionDefinition;
struct /* coclass */ CutExtrusionDefinition;
struct /* coclass */ ExtrusionSurfaceDefinition;
struct /* coclass */ BaseLoftDefinition;
struct /* coclass */ BossLoftDefinition;
struct /* coclass */ CutLoftDefinition;
struct /* coclass */ LoftSurfaceDefinition;
struct /* coclass */ InclineDefinition;
struct /* coclass */ ShellDefinition;
struct /* coclass */ BaseEvolutionDefinition;
struct /* coclass */ BossEvolutionDefinition;
struct /* coclass */ CutEvolutionDefinition;
struct /* coclass */ EvolutionSurfaceDefinition;
struct /* coclass */ RibDefinition;
struct /* coclass */ CutByPlaneDefinition;
struct /* coclass */ CutBySketchDefinition;
struct /* coclass */ PlaneOffsetDefinition;
struct /* coclass */ PlaneAngleDefinition;
struct /* coclass */ Plane3PointsDefinition;
struct /* coclass */ PlaneNormalToSurfaceDefinition;
struct /* coclass */ PlaneTangentToSurfaceDefinition;
struct /* coclass */ PlaneEdgePointDefinition;
struct /* coclass */ PlaneParallelDefinition;
struct /* coclass */ PlanePerpendicularDefinition;
struct /* coclass */ PlaneLineToEdgeDefinition;
struct /* coclass */ PlaneLineToPlaneDefinition;
struct /* coclass */ ThinParam;
struct /* coclass */ ExtrusionParam;
struct /* coclass */ RotatedParam;
struct /* coclass */ ColorParam;
struct /* coclass */ BaseRotatedDefinition;
struct /* coclass */ BossRotatedDefinition;
struct /* coclass */ CutRotatedDefinition;
struct /* coclass */ RotatedSurfaceDefinition;
struct /* coclass */ SketchDefinition;
struct /* coclass */ RasterFormatParam;
struct /* coclass */ AdditionFormatParam;
struct /* coclass */ ConstraintParam;
struct /* coclass */ ImportedSurfaceDefinition;
struct /* coclass */ FaceCollection;
struct /* coclass */ VertexDefinition;
struct /* coclass */ Feature;
struct /* coclass */ Tessellation;
struct /* coclass */ facet;
struct /* coclass */ Measurer;
struct /* coclass */ BodyCollection;
struct /* coclass */ body;
struct /* coclass */ Surface;
struct /* coclass */ EdgeCollection;
struct /* coclass */ OrientedEdge;
struct /* coclass */ OrientedEdgeCollection;
struct /* coclass */ Loop;
struct /* coclass */ LoopCollection;
struct /* coclass */ Curve3D;
struct /* coclass */ LineSeg3dParam;
struct /* coclass */ Circle3dParam;
struct /* coclass */ Ellipse3dParam;
struct /* coclass */ PlaneParam;
struct /* coclass */ ConeParam;
struct /* coclass */ CylinderParam;
struct /* coclass */ SphereParam;
struct /* coclass */ TorusParam;
struct /* coclass */ NurbsPoint3dParam;
struct /* coclass */ NurbsSurfaceParam;
struct /* coclass */ Nurbs3dParam;
struct /* coclass */ NurbsKnotCollection;
struct /* coclass */ NurbsPoint3dCollCollection;
struct /* coclass */ NurbsPoint3dCollection;
struct /* coclass */ ViewProjection;
struct /* coclass */ ViewProjectionCollection;
struct /* coclass */ SelectionMng;
struct /* coclass */ ChooseMng;
struct /* coclass */ Arc3dParam;
struct /* coclass */ TreeNodeParam;
struct /* coclass */ AssociationViewParam;
struct /* coclass */ ViewColorParam;
struct /* coclass */ AxisLineParam;
struct /* coclass */ TextDocumentParam;
struct /* coclass */ RemoteElementParam;
struct /* coclass */ DeletedCopyCollection;
struct /* coclass */ CopyObjectParam;
struct /* coclass */ ThreadDefinition;
struct /* coclass */ OverlapObjectOptions;
struct /* coclass */ Attribute3D;
struct /* coclass */ Attribute3DCollection;
struct /* coclass */ ComponentPositioner;
struct /* coclass */ ObjectsFilter3D;
struct /* coclass */ ParametrizationParam;
struct /* coclass */ Macro3DDefinition;
struct /* coclass */ AxisConefaceDefinition;
struct /* coclass */ UnionComponentsDefinition;
struct /* coclass */ MoldCavityDefinition;
struct /* coclass */ Coordinate3dCollection;
struct /* coclass */ IntersectionResult;
struct /* coclass */ PlaneMiddleDefinition;
struct /* coclass */ ControlPointDefinition;
struct /* coclass */ ConjunctivePointDefinition;
struct /* coclass */ ChooseBodies;
struct /* coclass */ AggregateDefinition;
struct /* coclass */ ChangeLeaderParam;
struct __declspec(uuid("08b7a093-d829-44a9-a238-2bff31770112"))
/* dispinterface */ ksChooseParts;
struct /* coclass */ ChooseParts;
struct __declspec(uuid("1e3e9348-db9b-4967-a62a-b412df95146a"))
/* dispinterface */ ksBodyParts;
struct __declspec(uuid("4f6a3404-8f06-4363-af66-4cdcc4e09462"))
/* dispinterface */ ksEmbodiment3D;
struct __declspec(uuid("fec5ff26-3f47-49b2-abae-5563a4d7ad94"))
/* dispinterface */ ksSnapInfo;
struct __declspec(uuid("cf0e948c-5a9d-49a3-bc86-eea3050193e0"))
/* dispinterface */ ksSaveToPreviusParam;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(KompasObject, __uuidof(KompasObject));
_COM_SMARTPTR_TYPEDEF(ksDocument2D, __uuidof(ksDocument2D));
_COM_SMARTPTR_TYPEDEF(ksObject2DNotify, __uuidof(ksObject2DNotify));
_COM_SMARTPTR_TYPEDEF(ksSelectionMngNotify, __uuidof(ksSelectionMngNotify));
_COM_SMARTPTR_TYPEDEF(ksObject2DNotifyResult, __uuidof(ksObject2DNotifyResult));
_COM_SMARTPTR_TYPEDEF(ksDocument2DNotify, __uuidof(ksDocument2DNotify));
_COM_SMARTPTR_TYPEDEF(ksDocument3D, __uuidof(ksDocument3D));
_COM_SMARTPTR_TYPEDEF(ksDocument3DNotify, __uuidof(ksDocument3DNotify));
_COM_SMARTPTR_TYPEDEF(ksEntity, __uuidof(ksEntity));
_COM_SMARTPTR_TYPEDEF(ksAttribute3DCollection, __uuidof(ksAttribute3DCollection));
_COM_SMARTPTR_TYPEDEF(ksAttribute3D, __uuidof(ksAttribute3D));
_COM_SMARTPTR_TYPEDEF(ksFeatureCollection, __uuidof(ksFeatureCollection));
_COM_SMARTPTR_TYPEDEF(ksFeature, __uuidof(ksFeature));
_COM_SMARTPTR_TYPEDEF(ksEntityCollection, __uuidof(ksEntityCollection));
_COM_SMARTPTR_TYPEDEF(ksPart, __uuidof(ksPart));
_COM_SMARTPTR_TYPEDEF(ksObject3DNotify, __uuidof(ksObject3DNotify));
_COM_SMARTPTR_TYPEDEF(ksObject3DNotifyResult, __uuidof(ksObject3DNotifyResult));
_COM_SMARTPTR_TYPEDEF(ksPlacement, __uuidof(ksPlacement));
_COM_SMARTPTR_TYPEDEF(ksComponentPositioner, __uuidof(ksComponentPositioner));
_COM_SMARTPTR_TYPEDEF(ksKompasObjectNotify, __uuidof(ksKompasObjectNotify));
_COM_SMARTPTR_TYPEDEF(ksDocumentFileNotify, __uuidof(ksDocumentFileNotify));
_COM_SMARTPTR_TYPEDEF(ksDocument3DNotifyResult, __uuidof(ksDocument3DNotifyResult));
_COM_SMARTPTR_TYPEDEF(ksSpecRoughParam, __uuidof(ksSpecRoughParam));
_COM_SMARTPTR_TYPEDEF(ksEllipseParam, __uuidof(ksEllipseParam));
_COM_SMARTPTR_TYPEDEF(ksEllipseArcParam, __uuidof(ksEllipseArcParam));
_COM_SMARTPTR_TYPEDEF(ksEllipseArcParam1, __uuidof(ksEllipseArcParam1));
_COM_SMARTPTR_TYPEDEF(ksEquidistantParam, __uuidof(ksEquidistantParam));
_COM_SMARTPTR_TYPEDEF(ksParagraphParam, __uuidof(ksParagraphParam));
_COM_SMARTPTR_TYPEDEF(ksTextItemParam, __uuidof(ksTextItemParam));
_COM_SMARTPTR_TYPEDEF(ksTextLineParam, __uuidof(ksTextLineParam));
_COM_SMARTPTR_TYPEDEF(ksTextItemFont, __uuidof(ksTextItemFont));
_COM_SMARTPTR_TYPEDEF(ksCornerParam, __uuidof(ksCornerParam));
_COM_SMARTPTR_TYPEDEF(ksContourParam, __uuidof(ksContourParam));
_COM_SMARTPTR_TYPEDEF(ksLayerParam, __uuidof(ksLayerParam));
_COM_SMARTPTR_TYPEDEF(ksLineParam, __uuidof(ksLineParam));
_COM_SMARTPTR_TYPEDEF(ksRegularPolygonParam, __uuidof(ksRegularPolygonParam));
_COM_SMARTPTR_TYPEDEF(ksRectangleParam, __uuidof(ksRectangleParam));
_COM_SMARTPTR_TYPEDEF(ksBaseParam, __uuidof(ksBaseParam));
_COM_SMARTPTR_TYPEDEF(ksLtVariant, __uuidof(ksLtVariant));
_COM_SMARTPTR_TYPEDEF(ksUserParam, __uuidof(ksUserParam));
_COM_SMARTPTR_TYPEDEF(ksMathPointParam, __uuidof(ksMathPointParam));
_COM_SMARTPTR_TYPEDEF(ksCurvePicture, __uuidof(ksCurvePicture));
_COM_SMARTPTR_TYPEDEF(ksCurvePattern, __uuidof(ksCurvePattern));
_COM_SMARTPTR_TYPEDEF(ksTAN, __uuidof(ksTAN));
_COM_SMARTPTR_TYPEDEF(ksCON, __uuidof(ksCON));
_COM_SMARTPTR_TYPEDEF(ksInertiaParam, __uuidof(ksInertiaParam));
_COM_SMARTPTR_TYPEDEF(ksMassInertiaParam, __uuidof(ksMassInertiaParam));
_COM_SMARTPTR_TYPEDEF(ksMathematic2D, __uuidof(ksMathematic2D));
_COM_SMARTPTR_TYPEDEF(ksDynamicArray, __uuidof(ksDynamicArray));
_COM_SMARTPTR_TYPEDEF(ksRDimDrawingParam, __uuidof(ksRDimDrawingParam));
_COM_SMARTPTR_TYPEDEF(ksRDimSourceParam, __uuidof(ksRDimSourceParam));
_COM_SMARTPTR_TYPEDEF(ksRDimParam, __uuidof(ksRDimParam));
_COM_SMARTPTR_TYPEDEF(ksLineSegParam, __uuidof(ksLineSegParam));
_COM_SMARTPTR_TYPEDEF(ksCircleParam, __uuidof(ksCircleParam));
_COM_SMARTPTR_TYPEDEF(ksArcByAngleParam, __uuidof(ksArcByAngleParam));
_COM_SMARTPTR_TYPEDEF(ksArcByPointParam, __uuidof(ksArcByPointParam));
_COM_SMARTPTR_TYPEDEF(ksPointParam, __uuidof(ksPointParam));
_COM_SMARTPTR_TYPEDEF(ksHatchParam, __uuidof(ksHatchParam));
_COM_SMARTPTR_TYPEDEF(ksTextParam, __uuidof(ksTextParam));
_COM_SMARTPTR_TYPEDEF(ksNurbsPointParam, __uuidof(ksNurbsPointParam));
_COM_SMARTPTR_TYPEDEF(ksDoubleValue, __uuidof(ksDoubleValue));
_COM_SMARTPTR_TYPEDEF(ksNurbsParam, __uuidof(ksNurbsParam));
_COM_SMARTPTR_TYPEDEF(ksConicArcParam, __uuidof(ksConicArcParam));
_COM_SMARTPTR_TYPEDEF(ksCentreParam, __uuidof(ksCentreParam));
_COM_SMARTPTR_TYPEDEF(ksPlacementParam, __uuidof(ksPlacementParam));
_COM_SMARTPTR_TYPEDEF(ksRasterParam, __uuidof(ksRasterParam));
_COM_SMARTPTR_TYPEDEF(ksPolylineParam, __uuidof(ksPolylineParam));
_COM_SMARTPTR_TYPEDEF(ksInsertFragmentParam, __uuidof(ksInsertFragmentParam));
_COM_SMARTPTR_TYPEDEF(ksViewParam, __uuidof(ksViewParam));
_COM_SMARTPTR_TYPEDEF(ksLBreakDimSource, __uuidof(ksLBreakDimSource));
_COM_SMARTPTR_TYPEDEF(ksBreakDimDrawing, __uuidof(ksBreakDimDrawing));
_COM_SMARTPTR_TYPEDEF(ksLBreakDimParam, __uuidof(ksLBreakDimParam));
_COM_SMARTPTR_TYPEDEF(ksABreakDimParam, __uuidof(ksABreakDimParam));
_COM_SMARTPTR_TYPEDEF(ksInsertFragmentParamEx, __uuidof(ksInsertFragmentParamEx));
_COM_SMARTPTR_TYPEDEF(ksBezierParam, __uuidof(ksBezierParam));
_COM_SMARTPTR_TYPEDEF(ksBezierPointParam, __uuidof(ksBezierPointParam));
_COM_SMARTPTR_TYPEDEF(ksDimTextParam, __uuidof(ksDimTextParam));
_COM_SMARTPTR_TYPEDEF(ksLDimSourceParam, __uuidof(ksLDimSourceParam));
_COM_SMARTPTR_TYPEDEF(ksDimDrawingParam, __uuidof(ksDimDrawingParam));
_COM_SMARTPTR_TYPEDEF(ksLDimParam, __uuidof(ksLDimParam));
_COM_SMARTPTR_TYPEDEF(ksADimSourceParam, __uuidof(ksADimSourceParam));
_COM_SMARTPTR_TYPEDEF(ksDimensionPartsParam, __uuidof(ksDimensionPartsParam));
_COM_SMARTPTR_TYPEDEF(ksADimParam, __uuidof(ksADimParam));
_COM_SMARTPTR_TYPEDEF(ksRBreakDrawingParam, __uuidof(ksRBreakDrawingParam));
_COM_SMARTPTR_TYPEDEF(ksRBreakDimParam, __uuidof(ksRBreakDimParam));
_COM_SMARTPTR_TYPEDEF(ksQualityItemParam, __uuidof(ksQualityItemParam));
_COM_SMARTPTR_TYPEDEF(ksQualityContensParam, __uuidof(ksQualityContensParam));
_COM_SMARTPTR_TYPEDEF(ksIterator, __uuidof(ksIterator));
_COM_SMARTPTR_TYPEDEF(ksFragment, __uuidof(ksFragment));
_COM_SMARTPTR_TYPEDEF(ksFragmentLibrary, __uuidof(ksFragmentLibrary));
_COM_SMARTPTR_TYPEDEF(ksTechnicalDemandParam, __uuidof(ksTechnicalDemandParam));
_COM_SMARTPTR_TYPEDEF(ksOrdinatedSourceParam, __uuidof(ksOrdinatedSourceParam));
_COM_SMARTPTR_TYPEDEF(ksOrdinatedDimParam, __uuidof(ksOrdinatedDimParam));
_COM_SMARTPTR_TYPEDEF(ksOrdinatedDrawingParam, __uuidof(ksOrdinatedDrawingParam));
_COM_SMARTPTR_TYPEDEF(ksSheetSize, __uuidof(ksSheetSize));
_COM_SMARTPTR_TYPEDEF(ksStandartSheet, __uuidof(ksStandartSheet));
_COM_SMARTPTR_TYPEDEF(ksSheetPar, __uuidof(ksSheetPar));
_COM_SMARTPTR_TYPEDEF(ksDocumentParam, __uuidof(ksDocumentParam));
_COM_SMARTPTR_TYPEDEF(ksDimensionsOptions, __uuidof(ksDimensionsOptions));
_COM_SMARTPTR_TYPEDEF(ksSnapOptions, __uuidof(ksSnapOptions));
_COM_SMARTPTR_TYPEDEF(ksLibraryStyleParam, __uuidof(ksLibraryStyleParam));
_COM_SMARTPTR_TYPEDEF(ksStampNotify, __uuidof(ksStampNotify));
_COM_SMARTPTR_TYPEDEF(ksStamp, __uuidof(ksStamp));
_COM_SMARTPTR_TYPEDEF(ksSheetOptions, __uuidof(ksSheetOptions));
_COM_SMARTPTR_TYPEDEF(ksCurvePatternEx, __uuidof(ksCurvePatternEx));
_COM_SMARTPTR_TYPEDEF(ksCurveStyleParam, __uuidof(ksCurveStyleParam));
_COM_SMARTPTR_TYPEDEF(ksTextStyleParam, __uuidof(ksTextStyleParam));
_COM_SMARTPTR_TYPEDEF(ksHatchLineParam, __uuidof(ksHatchLineParam));
_COM_SMARTPTR_TYPEDEF(ksHatchStyleParam, __uuidof(ksHatchStyleParam));
_COM_SMARTPTR_TYPEDEF(ksRectParam, __uuidof(ksRectParam));
_COM_SMARTPTR_TYPEDEF(ksShelfPar, __uuidof(ksShelfPar));
_COM_SMARTPTR_TYPEDEF(ksRoughPar, __uuidof(ksRoughPar));
_COM_SMARTPTR_TYPEDEF(ksRoughParam, __uuidof(ksRoughParam));
_COM_SMARTPTR_TYPEDEF(ksChar255, __uuidof(ksChar255));
_COM_SMARTPTR_TYPEDEF(ksLeaderParam, __uuidof(ksLeaderParam));
_COM_SMARTPTR_TYPEDEF(ksPosLeaderParam, __uuidof(ksPosLeaderParam));
_COM_SMARTPTR_TYPEDEF(ksBrandLeaderParam, __uuidof(ksBrandLeaderParam));
_COM_SMARTPTR_TYPEDEF(ksMarkerLeaderParam, __uuidof(ksMarkerLeaderParam));
_COM_SMARTPTR_TYPEDEF(ksType1, __uuidof(ksType1));
_COM_SMARTPTR_TYPEDEF(ksType2, __uuidof(ksType2));
_COM_SMARTPTR_TYPEDEF(ksType3, __uuidof(ksType3));
_COM_SMARTPTR_TYPEDEF(ksType5, __uuidof(ksType5));
_COM_SMARTPTR_TYPEDEF(ksType6, __uuidof(ksType6));
_COM_SMARTPTR_TYPEDEF(ksPhantom, __uuidof(ksPhantom));
_COM_SMARTPTR_TYPEDEF(ksRequestInfo, __uuidof(ksRequestInfo));
_COM_SMARTPTR_TYPEDEF(ksViewPointerParam, __uuidof(ksViewPointerParam));
_COM_SMARTPTR_TYPEDEF(ksCutLineParam, __uuidof(ksCutLineParam));
_COM_SMARTPTR_TYPEDEF(ksToleranceBranch, __uuidof(ksToleranceBranch));
_COM_SMARTPTR_TYPEDEF(ksToleranceParam, __uuidof(ksToleranceParam));
_COM_SMARTPTR_TYPEDEF(ksSpcColumnParam, __uuidof(ksSpcColumnParam));
_COM_SMARTPTR_TYPEDEF(ksRecordTypeAttrParam, __uuidof(ksRecordTypeAttrParam));
_COM_SMARTPTR_TYPEDEF(ksNumberTypeAttrParam, __uuidof(ksNumberTypeAttrParam));
_COM_SMARTPTR_TYPEDEF(ksSpcStyleColumnParam, __uuidof(ksSpcStyleColumnParam));
_COM_SMARTPTR_TYPEDEF(ksSpcStyleSectionParam, __uuidof(ksSpcStyleSectionParam));
_COM_SMARTPTR_TYPEDEF(ksSpcSubSectionParam, __uuidof(ksSpcSubSectionParam));
_COM_SMARTPTR_TYPEDEF(ksSpcTuningSectionParam, __uuidof(ksSpcTuningSectionParam));
_COM_SMARTPTR_TYPEDEF(ksSpcTuningStyleParam, __uuidof(ksSpcTuningStyleParam));
_COM_SMARTPTR_TYPEDEF(ksSpcStyleParam, __uuidof(ksSpcStyleParam));
_COM_SMARTPTR_TYPEDEF(ksSpcDescrParam, __uuidof(ksSpcDescrParam));
_COM_SMARTPTR_TYPEDEF(ksDocAttachedSpcParam, __uuidof(ksDocAttachedSpcParam));
_COM_SMARTPTR_TYPEDEF(ksSpcObjParam, __uuidof(ksSpcObjParam));
_COM_SMARTPTR_TYPEDEF(ksLibStyle, __uuidof(ksLibStyle));
_COM_SMARTPTR_TYPEDEF(ksDataBaseObject, __uuidof(ksDataBaseObject));
_COM_SMARTPTR_TYPEDEF(ksSpcDocumentNotify, __uuidof(ksSpcDocumentNotify));
_COM_SMARTPTR_TYPEDEF(ksSpcDocument, __uuidof(ksSpcDocument));
_COM_SMARTPTR_TYPEDEF(ksSpcObjectNotify, __uuidof(ksSpcObjectNotify));
_COM_SMARTPTR_TYPEDEF(ksSpecificationNotify, __uuidof(ksSpecificationNotify));
_COM_SMARTPTR_TYPEDEF(ksSpecification, __uuidof(ksSpecification));
_COM_SMARTPTR_TYPEDEF(ksDocumentTxt, __uuidof(ksDocumentTxt));
_COM_SMARTPTR_TYPEDEF(ksAttributeTypeParam, __uuidof(ksAttributeTypeParam));
_COM_SMARTPTR_TYPEDEF(ksColumnInfoParam, __uuidof(ksColumnInfoParam));
_COM_SMARTPTR_TYPEDEF(ksAttributeParam, __uuidof(ksAttributeParam));
_COM_SMARTPTR_TYPEDEF(ksVariable, __uuidof(ksVariable));
_COM_SMARTPTR_TYPEDEF(ksLibraryAttrTypeParam, __uuidof(ksLibraryAttrTypeParam));
_COM_SMARTPTR_TYPEDEF(ksAttributeObject, __uuidof(ksAttributeObject));
_COM_SMARTPTR_TYPEDEF(ksRequestInfo3D, __uuidof(ksRequestInfo3D));
_COM_SMARTPTR_TYPEDEF(ksMateConstraint, __uuidof(ksMateConstraint));
_COM_SMARTPTR_TYPEDEF(ksDefaultObject, __uuidof(ksDefaultObject));
_COM_SMARTPTR_TYPEDEF(ksModelLibrary, __uuidof(ksModelLibrary));
_COM_SMARTPTR_TYPEDEF(ksVariableCollection, __uuidof(ksVariableCollection));
_COM_SMARTPTR_TYPEDEF(ksMateConstraintCollection, __uuidof(ksMateConstraintCollection));
_COM_SMARTPTR_TYPEDEF(ksPartCollection, __uuidof(ksPartCollection));
_COM_SMARTPTR_TYPEDEF(ksMeshPartArrayDefinition, __uuidof(ksMeshPartArrayDefinition));
_COM_SMARTPTR_TYPEDEF(ksCircularPartArrayDefinition, __uuidof(ksCircularPartArrayDefinition));
_COM_SMARTPTR_TYPEDEF(ksCurvePartArrayDefinition, __uuidof(ksCurvePartArrayDefinition));
_COM_SMARTPTR_TYPEDEF(ksDerivativePartArrayDefinition, __uuidof(ksDerivativePartArrayDefinition));
_COM_SMARTPTR_TYPEDEF(ksAxis2PlanesDefinition, __uuidof(ksAxis2PlanesDefinition));
_COM_SMARTPTR_TYPEDEF(ksAxisOperationsDefinition, __uuidof(ksAxisOperationsDefinition));
_COM_SMARTPTR_TYPEDEF(ksAxis2PointsDefinition, __uuidof(ksAxis2PointsDefinition));
_COM_SMARTPTR_TYPEDEF(ksAxisEdgeDefinition, __uuidof(ksAxisEdgeDefinition));
_COM_SMARTPTR_TYPEDEF(ksMeshCopyDefinition, __uuidof(ksMeshCopyDefinition));
_COM_SMARTPTR_TYPEDEF(ksCircularCopyDefinition, __uuidof(ksCircularCopyDefinition));
_COM_SMARTPTR_TYPEDEF(ksCurveCopyDefinition, __uuidof(ksCurveCopyDefinition));
_COM_SMARTPTR_TYPEDEF(ksMirrorCopyDefinition, __uuidof(ksMirrorCopyDefinition));
_COM_SMARTPTR_TYPEDEF(ksMirrorCopyAllDefinition, __uuidof(ksMirrorCopyAllDefinition));
_COM_SMARTPTR_TYPEDEF(ksConicSpiralDefinition, __uuidof(ksConicSpiralDefinition));
_COM_SMARTPTR_TYPEDEF(ksCylindricSpiralDefinition, __uuidof(ksCylindricSpiralDefinition));
_COM_SMARTPTR_TYPEDEF(ksPolyLineDefinition, __uuidof(ksPolyLineDefinition));
_COM_SMARTPTR_TYPEDEF(ksPolyLineVertexParam, __uuidof(ksPolyLineVertexParam));
_COM_SMARTPTR_TYPEDEF(ksSplineDefinition, __uuidof(ksSplineDefinition));
_COM_SMARTPTR_TYPEDEF(ksBaseExtrusionDefinition, __uuidof(ksBaseExtrusionDefinition));
_COM_SMARTPTR_TYPEDEF(ksBossExtrusionDefinition, __uuidof(ksBossExtrusionDefinition));
_COM_SMARTPTR_TYPEDEF(ksCutExtrusionDefinition, __uuidof(ksCutExtrusionDefinition));
_COM_SMARTPTR_TYPEDEF(ksExtrusionSurfaceDefinition, __uuidof(ksExtrusionSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksFaceDefinition, __uuidof(ksFaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksEdgeDefinition, __uuidof(ksEdgeDefinition));
_COM_SMARTPTR_TYPEDEF(ksChamferDefinition, __uuidof(ksChamferDefinition));
_COM_SMARTPTR_TYPEDEF(ksFilletDefinition, __uuidof(ksFilletDefinition));
_COM_SMARTPTR_TYPEDEF(ksBaseLoftDefinition, __uuidof(ksBaseLoftDefinition));
_COM_SMARTPTR_TYPEDEF(ksBossLoftDefinition, __uuidof(ksBossLoftDefinition));
_COM_SMARTPTR_TYPEDEF(ksCutLoftDefinition, __uuidof(ksCutLoftDefinition));
_COM_SMARTPTR_TYPEDEF(ksLoftSurfaceDefinition, __uuidof(ksLoftSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksInclineDefinition, __uuidof(ksInclineDefinition));
_COM_SMARTPTR_TYPEDEF(ksShellDefinition, __uuidof(ksShellDefinition));
_COM_SMARTPTR_TYPEDEF(ksBaseEvolutionDefinition, __uuidof(ksBaseEvolutionDefinition));
_COM_SMARTPTR_TYPEDEF(ksBossEvolutionDefinition, __uuidof(ksBossEvolutionDefinition));
_COM_SMARTPTR_TYPEDEF(ksCutEvolutionDefinition, __uuidof(ksCutEvolutionDefinition));
_COM_SMARTPTR_TYPEDEF(ksEvolutionSurfaceDefinition, __uuidof(ksEvolutionSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksRibDefinition, __uuidof(ksRibDefinition));
_COM_SMARTPTR_TYPEDEF(ksCutByPlaneDefinition, __uuidof(ksCutByPlaneDefinition));
_COM_SMARTPTR_TYPEDEF(ksCutBySketchDefinition, __uuidof(ksCutBySketchDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneOffsetDefinition, __uuidof(ksPlaneOffsetDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneAngleDefinition, __uuidof(ksPlaneAngleDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlane3PointsDefinition, __uuidof(ksPlane3PointsDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneNormalToSurfaceDefinition, __uuidof(ksPlaneNormalToSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneTangentToSurfaceDefinition, __uuidof(ksPlaneTangentToSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneEdgePointDefinition, __uuidof(ksPlaneEdgePointDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneParallelDefinition, __uuidof(ksPlaneParallelDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlanePerpendicularDefinition, __uuidof(ksPlanePerpendicularDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneLineToEdgeDefinition, __uuidof(ksPlaneLineToEdgeDefinition));
_COM_SMARTPTR_TYPEDEF(ksPlaneLineToPlaneDefinition, __uuidof(ksPlaneLineToPlaneDefinition));
_COM_SMARTPTR_TYPEDEF(ksThinParam, __uuidof(ksThinParam));
_COM_SMARTPTR_TYPEDEF(ksExtrusionParam, __uuidof(ksExtrusionParam));
_COM_SMARTPTR_TYPEDEF(ksRotatedParam, __uuidof(ksRotatedParam));
_COM_SMARTPTR_TYPEDEF(ksColorParam, __uuidof(ksColorParam));
_COM_SMARTPTR_TYPEDEF(ksBaseRotatedDefinition, __uuidof(ksBaseRotatedDefinition));
_COM_SMARTPTR_TYPEDEF(ksBossRotatedDefinition, __uuidof(ksBossRotatedDefinition));
_COM_SMARTPTR_TYPEDEF(ksCutRotatedDefinition, __uuidof(ksCutRotatedDefinition));
_COM_SMARTPTR_TYPEDEF(ksRotatedSurfaceDefinition, __uuidof(ksRotatedSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksSketchDefinition, __uuidof(ksSketchDefinition));
_COM_SMARTPTR_TYPEDEF(ksRasterFormatParam, __uuidof(ksRasterFormatParam));
_COM_SMARTPTR_TYPEDEF(ksAdditionFormatParam, __uuidof(ksAdditionFormatParam));
_COM_SMARTPTR_TYPEDEF(ksConstraintParam, __uuidof(ksConstraintParam));
_COM_SMARTPTR_TYPEDEF(ksImportedSurfaceDefinition, __uuidof(ksImportedSurfaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksFaceCollection, __uuidof(ksFaceCollection));
_COM_SMARTPTR_TYPEDEF(ksVertexDefinition, __uuidof(ksVertexDefinition));
_COM_SMARTPTR_TYPEDEF(ksTessellation, __uuidof(ksTessellation));
_COM_SMARTPTR_TYPEDEF(ksFacet, __uuidof(ksFacet));
_COM_SMARTPTR_TYPEDEF(ksMeasurer, __uuidof(ksMeasurer));
_COM_SMARTPTR_TYPEDEF(ksBodyCollection, __uuidof(ksBodyCollection));
_COM_SMARTPTR_TYPEDEF(ksBody, __uuidof(ksBody));
_COM_SMARTPTR_TYPEDEF(ksSurface, __uuidof(ksSurface));
_COM_SMARTPTR_TYPEDEF(ksEdgeCollection, __uuidof(ksEdgeCollection));
_COM_SMARTPTR_TYPEDEF(ksOrientedEdge, __uuidof(ksOrientedEdge));
_COM_SMARTPTR_TYPEDEF(ksOrientedEdgeCollection, __uuidof(ksOrientedEdgeCollection));
_COM_SMARTPTR_TYPEDEF(ksLoop, __uuidof(ksLoop));
_COM_SMARTPTR_TYPEDEF(ksLoopCollection, __uuidof(ksLoopCollection));
_COM_SMARTPTR_TYPEDEF(ksCurve3D, __uuidof(ksCurve3D));
_COM_SMARTPTR_TYPEDEF(ksLineSeg3dParam, __uuidof(ksLineSeg3dParam));
_COM_SMARTPTR_TYPEDEF(ksCircle3dParam, __uuidof(ksCircle3dParam));
_COM_SMARTPTR_TYPEDEF(ksEllipse3dParam, __uuidof(ksEllipse3dParam));
_COM_SMARTPTR_TYPEDEF(ksPlaneParam, __uuidof(ksPlaneParam));
_COM_SMARTPTR_TYPEDEF(ksConeParam, __uuidof(ksConeParam));
_COM_SMARTPTR_TYPEDEF(ksCylinderParam, __uuidof(ksCylinderParam));
_COM_SMARTPTR_TYPEDEF(ksSphereParam, __uuidof(ksSphereParam));
_COM_SMARTPTR_TYPEDEF(ksTorusParam, __uuidof(ksTorusParam));
_COM_SMARTPTR_TYPEDEF(ksNurbsPoint3dParam, __uuidof(ksNurbsPoint3dParam));
_COM_SMARTPTR_TYPEDEF(ksNurbsSurfaceParam, __uuidof(ksNurbsSurfaceParam));
_COM_SMARTPTR_TYPEDEF(ksNurbs3dParam, __uuidof(ksNurbs3dParam));
_COM_SMARTPTR_TYPEDEF(ksNurbsKnotCollection, __uuidof(ksNurbsKnotCollection));
_COM_SMARTPTR_TYPEDEF(ksNurbsPoint3dCollCollection, __uuidof(ksNurbsPoint3dCollCollection));
_COM_SMARTPTR_TYPEDEF(ksNurbsPoint3dCollection, __uuidof(ksNurbsPoint3dCollection));
_COM_SMARTPTR_TYPEDEF(ksViewProjection, __uuidof(ksViewProjection));
_COM_SMARTPTR_TYPEDEF(ksViewProjectionCollection, __uuidof(ksViewProjectionCollection));
_COM_SMARTPTR_TYPEDEF(ksSelectionMng, __uuidof(ksSelectionMng));
_COM_SMARTPTR_TYPEDEF(ksChooseMng, __uuidof(ksChooseMng));
_COM_SMARTPTR_TYPEDEF(ksArc3dParam, __uuidof(ksArc3dParam));
_COM_SMARTPTR_TYPEDEF(ksTreeNodeParam, __uuidof(ksTreeNodeParam));
_COM_SMARTPTR_TYPEDEF(ksAssociationViewParam, __uuidof(ksAssociationViewParam));
_COM_SMARTPTR_TYPEDEF(ksViewColorParam, __uuidof(ksViewColorParam));
_COM_SMARTPTR_TYPEDEF(ksAxisLineParam, __uuidof(ksAxisLineParam));
_COM_SMARTPTR_TYPEDEF(ksTextDocumentParam, __uuidof(ksTextDocumentParam));
_COM_SMARTPTR_TYPEDEF(ksRemoteElementParam, __uuidof(ksRemoteElementParam));
_COM_SMARTPTR_TYPEDEF(ksDeletedCopyCollection, __uuidof(ksDeletedCopyCollection));
_COM_SMARTPTR_TYPEDEF(ksCopyObjectParam, __uuidof(ksCopyObjectParam));
_COM_SMARTPTR_TYPEDEF(ksThreadDefinition, __uuidof(ksThreadDefinition));
_COM_SMARTPTR_TYPEDEF(ksOverlapObjectOptions, __uuidof(ksOverlapObjectOptions));
_COM_SMARTPTR_TYPEDEF(ksObjectsFilter3D, __uuidof(ksObjectsFilter3D));
_COM_SMARTPTR_TYPEDEF(ksParametrizationParam, __uuidof(ksParametrizationParam));
_COM_SMARTPTR_TYPEDEF(ksMacro3DDefinition, __uuidof(ksMacro3DDefinition));
_COM_SMARTPTR_TYPEDEF(ksAxisConefaceDefinition, __uuidof(ksAxisConefaceDefinition));
_COM_SMARTPTR_TYPEDEF(ksUnionComponentsDefinition, __uuidof(ksUnionComponentsDefinition));
_COM_SMARTPTR_TYPEDEF(ksMoldCavityDefinition, __uuidof(ksMoldCavityDefinition));
_COM_SMARTPTR_TYPEDEF(ksCoordinate3dCollection, __uuidof(ksCoordinate3dCollection));
_COM_SMARTPTR_TYPEDEF(ksIntersectionResult, __uuidof(ksIntersectionResult));
_COM_SMARTPTR_TYPEDEF(ksPlaneMiddleDefinition, __uuidof(ksPlaneMiddleDefinition));
_COM_SMARTPTR_TYPEDEF(ksControlPointDefinition, __uuidof(ksControlPointDefinition));
_COM_SMARTPTR_TYPEDEF(ksConjunctivePointDefinition, __uuidof(ksConjunctivePointDefinition));
_COM_SMARTPTR_TYPEDEF(ksChooseBodies, __uuidof(ksChooseBodies));
_COM_SMARTPTR_TYPEDEF(ksAggregateDefinition, __uuidof(ksAggregateDefinition));
_COM_SMARTPTR_TYPEDEF(ksChangeLeaderParam, __uuidof(ksChangeLeaderParam));
_COM_SMARTPTR_TYPEDEF(ksChooseParts, __uuidof(ksChooseParts));
_COM_SMARTPTR_TYPEDEF(ksBodyParts, __uuidof(ksBodyParts));
_COM_SMARTPTR_TYPEDEF(ksEmbodiment3D, __uuidof(ksEmbodiment3D));
_COM_SMARTPTR_TYPEDEF(ksSnapInfo, __uuidof(ksSnapInfo));
_COM_SMARTPTR_TYPEDEF(ksSaveToPreviusParam, __uuidof(ksSaveToPreviusParam));

//
// Type library items
//

struct __declspec(uuid("e36bc97c-39d6-4402-9c25-c7008a217e02"))
KompasObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetlookStyle,put=PutlookStyle))
    long lookStyle;
    __declspec(property(get=GetcurrentDirectory,put=PutcurrentDirectory))
    _bstr_t currentDirectory;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr Document3D ( );
    IDispatchPtr ActiveDocument3D ( );
    IDispatchPtr Document2D ( );
    IDispatchPtr ActiveDocument2D ( );
    IDispatchPtr DataBaseObject ( );
    IDispatchPtr GetIterator ( );
    IDispatchPtr GetMathematic2D ( );
    IDispatchPtr GetParamStruct (
        short structType );
    IDispatchPtr SpcDocument ( );
    IDispatchPtr SpcActiveDocument ( );
    VARIANT_BOOL ksMessage (
        _bstr_t s );
    VARIANT_BOOL ksError (
        _bstr_t s );
    VARIANT_BOOL ksEnableTaskAccess (
        long enabl );
    long ksReturnResult ( );
    long ksResultNULL ( );
    long ksIsEnableTaskAccess ( );
    VARIANT_BOOL ksMessageBoxResult ( );
    long ksDrawSlide (
        long HWindow,
        long sldID );
    _bstr_t ksStrResult ( );
    long ksGetHWindow ( );
    long ksGetWorkWindowColor ( );
    VARIANT_BOOL ksPumpWaitingMessages ( );
    long ksSetCriticalProcess ( );
    _bstr_t ksChoiceFile (
        _bstr_t ext,
        _bstr_t filter,
        VARIANT_BOOL preview );
    long ksDrawBitmap (
        long HWindow,
        long sldID );
    long ksYesNo (
        _bstr_t s );
    long ksDrawSlideFromFile (
        long HWindow,
        _bstr_t fileName );
    long ksWriteSlide (
        _bstr_t fileName,
        long iD,
        double x,
        double y );
    VARIANT_BOOL ksSlideBackground (
        long color );
    long ksReadDouble (
        _bstr_t mess,
        double defValue,
        double min,
        double max,
        double * value );
    long ksReadInt (
        _bstr_t mess,
        long defValue,
        long min,
        long max,
        long * value );
    _bstr_t ksReadString (
        _bstr_t mess,
        _bstr_t value );
    _bstr_t ksFullFileName (
        _bstr_t oldName );
    _bstr_t ksUniqueFileName ( );
    VARIANT_BOOL ksRemoveUniqueFile (
        _bstr_t fileName );
    VARIANT_BOOL ksSystemControlStop ( );
    long ksSystemControlStart (
        _bstr_t menuCommand );
    IDispatchPtr GetDynamicArray (
        long type );
    _bstr_t ksChoiceFileAppointedDir (
        _bstr_t ext,
        _bstr_t filter,
        VARIANT_BOOL preview,
        long typeDir );
    long ksChoiceFiles (
        _bstr_t ext,
        _bstr_t filter,
        IDispatch * p,
        VARIANT_BOOL preview );
    _bstr_t ksSaveFile (
        _bstr_t ext,
        _bstr_t oldName,
        _bstr_t filter,
        VARIANT_BOOL preview );
    IDispatchPtr GetAttributeObject ( );
    long ksRefreshActiveWindow ( );
    _bstr_t ksSystemPath (
        long pathType );
    _bstr_t ksGetRelativePathFromSystemPath (
        _bstr_t sourcePath,
        long pathType );
    _bstr_t ksGetFullPathFromSystemPath (
        _bstr_t relativePath,
        long pathType );
    _bstr_t ksGetRelativePathFromFullPath (
        _bstr_t mainFilePath,
        _bstr_t sourcePath );
    _bstr_t ksGetFullPathFromRelativePath (
        _bstr_t mainFilePath,
        _bstr_t relativePath );
    long ksGetSystemVersion (
        long * iMajor,
        long * iMinor,
        long * iRelease,
        long * iBuild );
    _bstr_t ksGetSystemProfileString (
        _bstr_t lpSection,
        _bstr_t lpKey );
    VARIANT_BOOL ksOpenHelpFile (
        _bstr_t file,
        long command,
        long iD );
    long ksSetSysOptions (
        long optionsType,
        IDispatch * param );
    long ksGetSysOptions (
        long optionsType,
        IDispatch * param );
    long ksPrintPreviewWindow (
        IDispatch * docsArr,
        long inquiry );
    IDispatchPtr ksGetLibraryStylesArray (
        _bstr_t libraryName,
        short libraryType );
    double ksViewGetDensity (
        long HWindow );
    long ksCalculate (
        _bstr_t s,
        double * rez );
    long ksCalculateReset ( );
    long ksExecuteLibraryCommand (
        _bstr_t fileName,
        long command );
    long ksGetQualityNames (
        IDispatch * names,
        double dimValue,
        double high,
        double low,
        short system,
        short withLimitation );
    long ksGetQualityDefects (
        _bstr_t name,
        double dimValue,
        double * high,
        double * low,
        short inMM );
    long ksGetQualityContensParam (
        _bstr_t name,
        IDispatch * param,
        short inMM );
    IDispatchPtr ksGet3dDocumentFromRef (
        long doc );
    IDispatchPtr GetModelLibrary ( );
    IDispatchPtr GetFragmentLibrary ( );
    long ksIsLibraryEnabled (
        _bstr_t libName );
    long ksIsModuleSpecificationActive ( );
    long ksModuleSpecification (
        VARIANT_BOOL attach );
    _bstr_t ksMaterialDlg (
        long HWindow,
        long * res,
        double * plt,
        double * kod_size_1,
        double * kod_size_2,
        double * kod_size_3,
        double * kod_size_4,
        _bstr_t kod_tip );
    _bstr_t ksExecDialPredefinedText (
        long HWindow,
        long * res );
    long ksDrawSlideEx (
        long HWindow,
        long sldID,
        long hInst );
    _bstr_t ksViewGetDensityAndMaterial (
        double * density,
        long HWindow );
    _bstr_t ksConvertLangStr (
        _bstr_t src );
    VARIANT_BOOL ksConvertLangWindow (
        long hWnd );
    long ksConvertLangMenu (
        long hMenu );
    _bstr_t ksEditTextLine (
        long HWindow,
        long * res,
        _bstr_t str );
    long ksGetDocOptions (
        long optionsType,
        IDispatch * param );
    long ksAttachKompasLibrary (
        _bstr_t libName );
    long ksDetachKompasLibrary (
        long libId );
    long ksExecuteKompasLibraryCommand (
        long libId,
        long command );
    HRESULT Quit ( );
    long ksPrintKompasDocument (
        _bstr_t fileName,
        _bstr_t toFile,
        double scale );
    long ksDrawKompasDocument (
        long HWindow,
        _bstr_t docFileName );
    VARIANT_BOOL ksSetFlagDisableLockApp (
        VARIANT_BOOL setDisableLockApp );
    VARIANT_BOOL ActivateControllerAPI ( );
    IDispatchPtr DocumentTxt ( );
    IDispatchPtr ActiveDocumentTxt ( );
    VARIANT_BOOL ksGetLibraryTreeStruct (
        _bstr_t libName,
        IDispatch * p );
    long ksSetDocOptions (
        long optionsType,
        IDispatch * param );
    long ksGetDocumentType (
        long doc );
    long ksDrawKompasDocumentByReference (
        long HWindow,
        long pDoc );
    IDispatchPtr ksExecDialPredefinedTextEx (
        long HWindow );
    long ksGetDocumentTypeByName (
        _bstr_t fileName );
    IDispatchPtr ksGetDocumentByReference (
        long docRef );
    _bstr_t ksConvertLangStrEx (
        long hInstance,
        long strID );
    VARIANT_BOOL ksConvertLangWindowEx (
        long hWnd,
        long hInstance,
        _bstr_t dlgID );
    VARIANT_BOOL LoadDSK ( );
    IDispatchPtr GetObjectsFilter3D ( );
    long ksExecuteKompasLibraryCommandEx (
        long libId,
        long command,
        IDispatch * external );
    IDispatchPtr ksGetExternaldispinterface ( );
    IDispatchPtr ksGetApplication7 ( );
    long ksDrawBitmapEx (
        long HWindow,
        long bmpID,
        long hInst );
    long ksGetSystemControlStartResult ( );
    long ksIsModule3DActive ( );
    long ksModule3D (
        VARIANT_BOOL attach );
    IUnknownPtr TransferInterface (
        IUnknown * obj,
        long apiNewType,
        long objNewType );
    VARIANT_BOOL ksExecuteKompasCommand (
        long commandID,
        VARIANT_BOOL post );
    VARIANT_BOOL ksIsKompasCommandEnable (
        long commandID );
    long ksIsKompasCommandCheck (
        long commandID );
    IUnknownPtr TransferReference (
        long obj,
        long docRef );
    long ksDrawKompasText (
        long HWindow,
        _bstr_t text );
    long ksPrintKompasDocumentEx (
        _bstr_t fileName,
        _bstr_t toFile,
        double scale,
        VARIANT_BOOL FKompasPrinter );
    int ksExecDialSpecialSymbol (
        long HWindow );
    _bstr_t ksExecDialSymbol (
        long HWindow,
        long * symb,
        _bstr_t font );
    VARIANT_BOOL ksSetDebugMessagesMode (
        VARIANT_BOOL debugMode );
    VARIANT_BOOL ksClearFileCache ( );
    VARIANT_BOOL ksLockFileCache (
        VARIANT_BOOL lock );
    VARIANT_BOOL ksIsHomeVersion ( );
    VARIANT_BOOL ksIsModule2DActive ( );
    long ksExecDialPointStyleSelect (
        long HWindow,
        long style );
    long ksExecDialLineStyleSelect (
        long HWindow,
        _bstr_t caption,
        long style );
    VARIANT_BOOL ksExecQualityDialog (
        long HWindow,
        _bstr_t curQual,
        double * dimValue,
        long inMM,
        IDispatch * param );
    VARIANT_BOOL ksLockPumpMessages (
        VARIANT_BOOL lock );
    VARIANT_BOOL ksIsStudyVersion ( );
    VARIANT_BOOL ksIsSpdsVersion ( );
    long ksKompasVariant ( );
    long ksDrawBitmapEx2 (
        long HWindow,
        long bmpID,
        const _variant_t & hInst );
    long ksDrawSlideEx2 (
        long HWindow,
        long sldID,
        const _variant_t & hInst );
    _bstr_t ksConvertLangStrEx2 (
        const _variant_t & hInstance,
        long strID );
    VARIANT_BOOL ksConvertLangWindowEx2 (
        long hWnd,
        const _variant_t & hInstance,
        _bstr_t dlgID );
    _bstr_t ksSelectD3Model (
        VARIANT_BOOL onlyDetail,
        VARIANT_BOOL showAddNum );
    _bstr_t ksGetSelectedEmbodimentMarking ( );
    _bstr_t ksGetSelectedEmbodimentAdditionalNumber ( );
    VARIANT_BOOL ksEnableKompasInvisible (
        _bstr_t key,
        _bstr_t signature );
    _bstr_t ksGetDocumentTypeByNameEx (
        _bstr_t fileName,
        long * docType,
        long * errorId );

    // Properties:
    VARIANT_BOOL GetVisible ( );
    void PutVisible ( VARIANT_BOOL _val );
    long GetlookStyle ( );
    void PutlookStyle ( long _val );
    _bstr_t GetcurrentDirectory ( );
    void PutcurrentDirectory ( _bstr_t _val );
};

struct __declspec(uuid("af4e160d-5c89-4f21-b0f2-d53397bdaf78"))
ksDocument2D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getreference,put=Putreference))
    long reference;
    __declspec(property(get=GetorthoMode,put=PutorthoMode))
    VARIANT_BOOL orthoMode;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ksLineSeg (
        double x1,
        double y1,
        double x2,
        double y2,
        long style );
    long ksRectangle (
        IDispatch * par,
        short centre );
    long ksCircle (
        double xc,
        double yc,
        double rad,
        long style );
    long ksArcByAngle (
        double xc,
        double yc,
        double rad,
        double f1,
        double f2,
        short direction,
        long style );
    long ksArcByPoint (
        double xc,
        double yc,
        double rad,
        double x1,
        double y1,
        double x2,
        double y2,
        short direction,
        long style );
    long ksArcBy3Points (
        double x1,
        double y1,
        double x2,
        double y2,
        double x3,
        double y3,
        long style );
    long ksGetObjParam (
        long ref,
        IDispatch * param,
        long parType );
    long ksSetObjParam (
        long referObj,
        IDispatch * param,
        long parType );
    long ksContour (
        long style );
    long ksMacro (
        short type );
    long ksParagraph (
        IDispatch * par );
    long ksTextLine (
        IDispatch * textItem );
    long ksUpdateMacro (
        long macro,
        long gr );
    long ksLine (
        double x,
        double y,
        double angle );
    long ksPoint (
        double x,
        double y,
        long style );
    long ksText (
        double x,
        double y,
        double ang,
        double hStr,
        double ksuStr,
        long bitVector,
        _bstr_t s );
    long ksHatchByParam (
        IDispatch * param );
    long ksEndObj ( );
    long ksLayer (
        long n );
    long ksGetLayerNumber (
        long p );
    long ksGetLayerReference (
        long number );
    long ksChangeObjectLayer (
        long obj,
        long number );
    long ksNewGroup (
        short type );
    long ksEndGroup ( );
    long ksMakeEncloseContours (
        long gr,
        double x,
        double y );
    long ksIsCursorOrPlacementDocument ( );
    long ksIsActiveProcessRunnig ( );
    long ksPhantomShowHide (
        _bstr_t show );
    long ksGetCursorPosition (
        double * x,
        double * y,
        long type );
    long ksKeepReference (
        long r );
    long ksGetMacroParamSize (
        long ref );
    long ksEditMacroMode ( );
    long ksDeleteObj (
        long ref );
    long ksMoveObj (
        long ref,
        double x,
        double y );
    long ksRotateObj (
        long ref,
        double x,
        double y,
        double angle );
    long ksTransformObj (
        long ref );
    long ksLightObj (
        long ref,
        short light );
    long ksFindObj (
        double x,
        double y,
        double limit );
    long ksSymmetryObj (
        long ref,
        double x1,
        double y1,
        double x2,
        double y2,
        _bstr_t copy );
    long ksCopyObj (
        long ref,
        double xOld,
        double yOld,
        double xNew,
        double yNew,
        double scale,
        double angle );
    long ksCreateViewObject (
        long type );
    long ksEditViewObject (
        long ref );
    long ksAnnLineSeg (
        double x1,
        double y1,
        double x2,
        double y2,
        short term1,
        short term2,
        long style );
    long ksPointArraw (
        double x,
        double y,
        double ang,
        short term );
    long ksAnnArcByPoint (
        double xc,
        double yc,
        double rad,
        double x1,
        double y1,
        double x2,
        double y2,
        short direction,
        short term1,
        short term2,
        long style );
    long ksEllipse (
        IDispatch * par );
    long ksEllipseArc (
        IDispatch * par );
    long ksParEllipseArc (
        IDispatch * par );
    long ksEquidistant (
        IDispatch * par );
    long ksIsPointInsideContour (
        long p,
        double x,
        double y,
        double precision );
    long ksConvertTextToCurve (
        long text );
    long ksStoreTmpGroup (
        long g );
    long ksOpenMacro (
        long macro );
    long ksAddObjectToMacro (
        long macro,
        long obj );
    long ksHatch (
        long style,
        double angle,
        double step,
        double width,
        double x0,
        double y0 );
    long ksColouring (
        long color );
    long ksDuplicateBoundaries (
        long p );
    long ksNurbsPoint (
        IDispatch * par );
    long ksNurbsKnot (
        double knot );
    long ksNurbs (
        short degree,
        VARIANT_BOOL close,
        long style );
    long ksRegularPolygon (
        IDispatch * par,
        short centre );
    long ksClearGroup (
        long g,
        VARIANT_BOOL deleteTmp );
    long ksExcludeObjGroup (
        long g,
        long p );
    long ksAddObjGroup (
        long g,
        long p );
    long ksSaveGroup (
        long g,
        _bstr_t name );
    long ksSelectGroup (
        long g,
        short selectMode,
        double xmin,
        double ymin,
        double xmax,
        double ymax );
    long ksExistGroupObj (
        long g );
    long ksWriteGroupToClip (
        long g,
        VARIANT_BOOL copy );
    long ksGetGroup (
        _bstr_t name );
    long ksReadGroupFromClip ( );
    long ksConicArc (
        IDispatch * par );
    long ksCentreMarker (
        IDispatch * par );
    long ksBezier (
        short closed,
        long style );
    long ksBezierPoint (
        IDispatch * par );
    long ksGetStyleParam (
        short type,
        short styleId,
        IDispatch * param );
    long ksInsertRaster (
        IDispatch * par );
    long ksLinDimension (
        IDispatch * linPar );
    long ksAngDimension (
        IDispatch * angPar );
    long ksDiamDimension (
        IDispatch * par );
    long ksRadDimension (
        IDispatch * par );
    long ksRadBreakDimension (
        IDispatch * par );
    long ksOrdinatedDimension (
        IDispatch * ordPar );
    long ksAddStyle (
        short type,
        IDispatch * param,
        short copy );
    long ksIsStyleInDocument (
        short type,
        IDispatch * param,
        short copy );
    long ksDeleteStyleFromDocument (
        short type,
        IDispatch * param,
        short copy );
    long ksExistObj (
        long ref );
    long ksGetObjGabaritRect (
        long p,
        IDispatch * par );
    long ksSheetToView (
        double x,
        double y,
        double * outX,
        double * outY );
    long ksViewToSheet (
        double x,
        double y,
        double * outX,
        double * outY );
    long ksPolyline (
        long style );
    long ksPolylineByParam (
        IDispatch * par );
    long ksGetReferenceDocumentPart (
        short t );
    long ksGetViewReference (
        long number );
    long ksGetViewNumber (
        long p );
    long ksOpenView (
        long number );
    long ksNewViewNumber ( );
    long ksCreateSheetView (
        IDispatch * par,
        long * number );
    long ksDecomposeObj (
        long p,
        short level,
        double arrow,
        short type );
    long ksGetViewObjCount (
        long p );
    long ksLinBreakDimension (
        IDispatch * linPar );
    long ksAngBreakDimension (
        IDispatch * angPar );
    long ksIsCurveClosed (
        long p );
    long ksBase (
        IDispatch * par );
    long ksRough (
        IDispatch * roughPar );
    _bstr_t ksGetGroupName (
        long gr,
        long * group,
        long size );
    long ksMtr (
        double x,
        double y,
        double angle,
        double scaleX,
        double scaleY );
    long ksDeleteMtr ( );
    long ksPointIntoMtr (
        double x,
        double y,
        double * xn,
        double * yn );
    long ksPointFromMtr (
        double x,
        double y,
        double * xn,
        double * yn );
    long ksLengthIntoMtr (
        double * len );
    long ksLengthFromMtr (
        double * len );
    long ksLeader (
        IDispatch * leaderPar );
    long ksPositionLeader (
        IDispatch * posLeaderParam );
    long ksBrandLeader (
        IDispatch * brandLeaderParam );
    long ksMarkerLeader (
        IDispatch * markerLeaderParam );
    long ksCursor (
        IDispatch * info,
        double * x,
        double * y,
        IDispatch * phantom );
    long ksPlacement (
        IDispatch * info,
        double * x,
        double * y,
        double * angle,
        IDispatch * phantom );
    long ksCommandWindow (
        IDispatch * info );
    long ksChangeObjectInLibRequest (
        IDispatch * info,
        IDispatch * phantom );
    long ksReleaseReference (
        long p );
    IDispatchPtr GetFragment ( );
    long ksInitFilePreviewFunc (
        _bstr_t funcName,
        long hInst,
        IDispatch * dispatchOCX );
    long ksTable ( );
    long ksRebuildTableVirtualGrid ( );
    long ksGetTableItemsCount (
        long type );
    long ksGetTableColumnText (
        long * numb,
        IDispatch * par );
    long ksSetTableColumnText (
        long numb,
        IDispatch * par );
    long ksClearTableColumnText (
        long numb );
    long ksCombineTwoTableItems (
        long index1,
        long index2 );
    long ksDivideTableItem (
        long index,
        VARIANT_BOOL vertical,
        long style );
    long ksSetTableBorderStyle (
        long index,
        short typeBorder,
        long style );
    long ksGetTableBorderStyle (
        long index,
        short typeBorder );
    long ksOpenTable (
        long table );
    long ksColumnNumber (
        long numb );
    long ksSetMacroParam (
        long ref,
        IDispatch * userPars,
        VARIANT_BOOL dblClickOff,
        VARIANT_BOOL hotpoints,
        VARIANT_BOOL externEdit );
    long ksGetMacroParam (
        long ref,
        IDispatch * userPars );
    long ksOpenTechnicalDemand (
        IDispatch * pGab,
        long style );
    long ksCloseTechnicalDemand ( );
    long ksSpecRough (
        IDispatch * par );
    long ksViewPointer (
        IDispatch * par );
    long ksCutLine (
        IDispatch * par );
    long ksApproximationCurve (
        long p,
        double eps,
        VARIANT_BOOL curentLayer,
        double maxRad,
        VARIANT_BOOL smooth );
    long ksTolerance (
        IDispatch * par );
    long ksOpenTolerance (
        long tolerance );
    long ksGetToleranceColumnText (
        long * numb,
        IDispatch * par );
    long ksSetToleranceColumnText (
        long numb,
        IDispatch * par );
    long ksGetPointOnToleranceTable (
        long tolerance,
        short entry,
        IDispatch * point );
    VARIANT_BOOL ksOpenDocument (
        _bstr_t nameDoc,
        VARIANT_BOOL regim );
    VARIANT_BOOL ksSaveDocument (
        _bstr_t fileName );
    VARIANT_BOOL ksCloseDocument ( );
    VARIANT_BOOL ksCreateDocument (
        IDispatch * par );
    VARIANT_BOOL ksMovePoint (
        double * x,
        double * y,
        double ang,
        double len );
    long ksReadTableFromFile (
        _bstr_t tblFileName );
    long ksDrawKompasDocument (
        long HWindow,
        _bstr_t docFileName );
    long ksViewGetObjectArea ( );
    long ksGetMacroPlacement (
        long macro,
        double * x,
        double * y,
        double * angl );
    long ksSetMacroPlacement (
        long macro,
        double x,
        double y,
        double angl,
        long relativ );
    long ksDrawKompasGroup (
        long HWindow,
        long gr );
    IDispatchPtr ksGetDocVariableArray (
        long p );
    long ksSetDocVariableArray (
        long obj,
        IDispatch * arr,
        VARIANT_BOOL setNote );
    long ksGetDocOptions (
        long optionsType,
        IDispatch * param );
    long ksSetObjConstraint (
        long obj,
        IDispatch * par );
    IDispatchPtr ksGetObjConstraints (
        long obj );
    long ksDestroyObjConstraint (
        long obj,
        IDispatch * par );
    _bstr_t ksGetZona (
        double x,
        double y,
        long * result_ );
    long ksClearRegion (
        long grClear,
        long grRegion,
        VARIANT_BOOL inside );
    long ksNurbsForConicCurve (
        IDispatch * xArr,
        IDispatch * yArr,
        short style );
    IDispatchPtr GetStamp ( );
    double ksGetTextLength (
        _bstr_t text,
        long style );
    double ksGetTextLengthFromReference (
        long pText );
    long ksZoom (
        double x1,
        double y1,
        double x2,
        double y2 );
    long ksZoomScale (
        double x,
        double y,
        double scale );
    long ksZoomPrevNextOrAll (
        short type );
    long ksGetZoomScale (
        double * x,
        double * y,
        double * scale );
    long ksSpecificationOnSheet (
        short onSheet );
    IDispatchPtr GetSpecification ( );
    long ksReDrawDocPart (
        IDispatch * rect,
        long view );
    double ksGetCursorLimit ( );
    long ksGetTextAlign (
        long pText );
    long ksSetTextAlign (
        long pText,
        long align );
    long ksSetTextLineAlign (
        short align );
    long ksDestroyObjects (
        long gr );
    VARIANT_BOOL ksEnableUndo (
        VARIANT_BOOL enabl );
    long ksAddPowerForm (
        double x,
        double y );
    long ksCreatePowerArc ( );
    long ksTrimNurbs (
        long pObj,
        double tMin,
        double tMax );
    _bstr_t ksGetDimensionVariableName (
        long dimObj );
    long ksTrimmCurve (
        long curve,
        double x1,
        double y1,
        double x2,
        double y2,
        double x3,
        double y3,
        short deleteOldCurve );
    VARIANT_BOOL SaveAsToRasterFormat (
        _bstr_t fileName,
        IDispatch * rasterPar );
    IDispatchPtr RasterFormatParam ( );
    double ksGetLeaderShelfLength (
        long leader,
        double * x,
        double * y );
    long ksSetDocOptions (
        long optionsType,
        IDispatch * param );
    long ksAxisLine (
        IDispatch * param );
    VARIANT_BOOL SaveAsToUncompressedRasterFormat (
        _bstr_t fileName,
        IDispatch * rasterPar );
    long ksCreateSheetArbitraryView (
        IDispatch * par,
        long * number );
    VARIANT_BOOL ksCreateSheetStandartViews (
        IDispatch * par,
        long bitVector,
        double dx,
        double dy );
    long ksCreateSheetProjectionView (
        IDispatch * par,
        long * number,
        long view );
    long ksCreateSheetArrowView (
        IDispatch * par,
        long * number,
        long obj );
    long ksCreateSheetSectionView (
        IDispatch * par,
        long * number,
        long obj );
    long ksCreateSheetRemoteView (
        IDispatch * par,
        long * number,
        long obj );
    VARIANT_BOOL ksRebuildDocument ( );
    long ksRemoteElement (
        IDispatch * par );
    long ksCopyObjEx (
        IDispatch * param );
    IUnknownPtr GetObject2DNotify (
        long objType );
    IUnknownPtr GetSelectionMngNotify ( );
    ksObject2DNotifyResultPtr GetObject2DNotifyResult ( );
    IUnknownPtr GetDocument2DNotify ( );
    long ksSetMaterialParam (
        IDispatch * material,
        double density );
    long ksChangeObjectsOrder (
        long group,
        long obj,
        int type );
    long ksIsSlaveSpcOpened ( );
    long ksGetMacroWaitDblClickEdit (
        long ref );
    long ksSetMacroWaitDblClickEdit (
        long ref,
        long waitDblClick );
    long ksParametrizeObjects (
        long obj,
        IDispatch * par );
    long ksCursorEx (
        IDispatch * info,
        double * x,
        double * y,
        IDispatch * phantom,
        IDispatch * processParam );
    long ksPlacementEx (
        IDispatch * info,
        double * x,
        double * y,
        double * angle,
        IDispatch * phantom,
        IDispatch * processParam );
    double ksCalcRasterScale (
        _bstr_t fileName,
        double w,
        double h );
    long ksTextEx (
        IDispatch * txtParam,
        long align );
    long ksColouringEx (
        long color,
        long group );
    VARIANT_BOOL ksSaveDocumentEx (
        _bstr_t fileName,
        long SaveMode );
    _variant_t ksAssociationViewMatrix3D (
        long ViewRef );
    VARIANT_BOOL ksPoint3DToAssociationView (
        long view,
        double x3D,
        double y3D,
        double z3D,
        double * x2D,
        double * y2D );
    long ksGetReferenceDocumentPartEx (
        short t,
        long SheetNumb );
    IDispatchPtr GetStampEx (
        long SheetNumb );
    long ksGetDocumentPagesCount ( );
    VARIANT_BOOL ksSaveToDXF (
        _bstr_t DXFFileName );
    long ksInitFilePreviewFuncW (
        _bstr_t funcName,
        long hInst,
        IDispatch * dispatchOCX );
    long ksChangeLeader (
        IDispatch * leaderParam );
    VARIANT_BOOL ksGetShelfPoint (
        long p,
        long index,
        double * x,
        double * y,
        long paramType );
    long ksMakeEncloseContoursEx (
        long gr,
        double x,
        double y,
        VARIANT_BOOL forHatch );
    long ksAnnPolylineEx (
        IDispatch * par,
        short term1,
        short term2 );
    long ksAnnEllipseArc (
        IDispatch * par,
        short term1,
        short term2 );
    long ksAnnParEllipseArc (
        IDispatch * par,
        short term1,
        short term2 );
    long ksAnnCircle (
        double xc,
        double yc,
        double rad,
        long style );
    long ksAnnEllipse (
        IDispatch * par );
    long ksAnnPolyline (
        long style,
        short term1,
        short term2 );
    long ksAnnTextEx (
        IDispatch * txtParam,
        long align );
    long ksAnnPoint (
        double x,
        double y,
        long style );
    VARIANT_BOOL ksGetAnnObjTerminators (
        long annObj,
        short * term1,
        short * term2 );
    long ksGetObjectStyle (
        long obj );
    VARIANT_BOOL ksSetObjectStyle (
        long obj,
        long style );
    long ksGetMacroPlacementEx (
        long macro,
        double * x,
        double * y,
        double * angl,
        long sheetParam,
        long * mirrorSymmetry );
    long ksSetMacroPlacementEx (
        long macro,
        double x,
        double y,
        double angl,
        long relativ,
        long mirrorSymmetry );
    VARIANT_BOOL ksUndoContainer (
        VARIANT_BOOL Add );
    VARIANT_BOOL ksGetEditMacroVisibleRegime (
        long p );
    long ksCopyGroupToDocument (
        long gr,
        long from );
    IDispatchPtr ksGetSnapInfo ( );
    long ksReDrawDocPartEx (
        IDispatch * rect,
        long view,
        long paramType );
    long ksShowHideTmpObj (
        long ref,
        long show );
    long ksSetLightObjType (
        long ref,
        long light );
    _bstr_t ksGetObjectNameByType (
        long type );
    _bstr_t ksGetObjectsNameByType (
        long type );
    long ksSetMixDlgMaterialParam (
        _bstr_t material,
        double density );

    // Properties:
    long Getreference ( );
    void Putreference ( long _val );
    VARIANT_BOOL GetorthoMode ( );
    void PutorthoMode ( VARIANT_BOOL _val );
};

struct __declspec(uuid("c7eba9a1-9e76-436e-b362-a80c5763944c"))
Object2DNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksObject2DNotify

struct __declspec(uuid("2e29c343-c521-4b0f-b37d-587d0347b7ba"))
ksObject2DNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL ChangeActive (
        long objRef );
    VARIANT_BOOL BeginDelete (
        long objRef );
    VARIANT_BOOL Delete (
        long objRef );
    VARIANT_BOOL BeginMove (
        long objRef );
    VARIANT_BOOL Move (
        long objRef );
    VARIANT_BOOL BeginRotate (
        long objRef );
    VARIANT_BOOL Rotate (
        long objRef );
    VARIANT_BOOL BeginScale (
        long objRef );
    VARIANT_BOOL scale (
        long objRef );
    VARIANT_BOOL BeginTransform (
        long objRef );
    VARIANT_BOOL Transform (
        long objRef );
    VARIANT_BOOL BeginCopy (
        long objRef );
    VARIANT_BOOL copy (
        long objRef );
    VARIANT_BOOL BeginSymmetry (
        long objRef );
    VARIANT_BOOL Symmetry (
        long objRef );
    VARIANT_BOOL BeginProcess (
        long pType,
        long objRef );
    VARIANT_BOOL EndProcess (
        long pType );
    VARIANT_BOOL CreateObject (
        long objRef );
    VARIANT_BOOL UpdateObject (
        long objRef );
    VARIANT_BOOL BeginDestroyObject (
        long objRef );
    VARIANT_BOOL DestroyObject (
        long objRef );
    VARIANT_BOOL BeginPropertyChanged (
        long objRef );
    VARIANT_BOOL PropertyChanged (
        long objRef );
};

struct __declspec(uuid("dc2e4057-7f8e-4652-860d-6b9e1f6f43aa"))
SelectionMngNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksSelectionMngNotify

struct __declspec(uuid("a421368a-34b6-4ddf-9a52-73b3488ee83f"))
ksSelectionMngNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Select (
        const _variant_t & obj );
    VARIANT_BOOL Unselect (
        const _variant_t & obj );
    VARIANT_BOOL UnselectAll ( );
};

struct __declspec(uuid("1fe1eb28-cd28-4700-8e46-25ccfe9c0ec8"))
ksObject2DNotifyResult : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetNotifyType ( );
    VARIANT_BOOL IsCopy ( );
    VARIANT_BOOL GetSheetPoint (
        VARIANT_BOOL from,
        double * x,
        double * y );
    long GetCopyObject ( );
    double GetAngle ( );
    VARIANT_BOOL GetScale (
        double * sx,
        double * sy );
    long GetProcessType ( );
    VARIANT_BOOL IsUndoMode ( );
    VARIANT_BOOL IsRedoMode ( );
};

struct __declspec(uuid("1b9b9b4e-dcd7-496e-a583-547ec1e91e47"))
Document2DNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksDocument2DNotify

struct __declspec(uuid("13f0be95-3361-4ad9-90af-d935ea64a127"))
ksDocument2DNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginRebuild ( );
    VARIANT_BOOL Rebuild ( );
    VARIANT_BOOL BeginChoiceMaterial ( );
    VARIANT_BOOL ChoiceMaterial (
        _bstr_t material,
        double density );
    VARIANT_BOOL BeginInsertFragment ( );
    VARIANT_BOOL LocalFragmentEdit (
        IDispatch * newDoc,
        VARIANT_BOOL newFrw );
    VARIANT_BOOL BeginChoiceProperty (
        long objRef,
        double propID );
    VARIANT_BOOL ChoiceProperty (
        long objRef,
        double propID );
    VARIANT_BOOL BeginDeleteProperty (
        long objRef,
        double propID );
    VARIANT_BOOL DeleteProperty (
        long objRef,
        double propID );
};

struct __declspec(uuid("111cefe1-a0a7-11d6-95ce-00c0262d30e3"))
ksDocument3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetinvisibleMode))
    VARIANT_BOOL invisibleMode;
    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=Getauthor,put=Putauthor))
    _bstr_t author;
    __declspec(property(get=Getreference,put=Putreference))
    long reference;
    __declspec(property(get=Getperspective,put=Putperspective))
    VARIANT_BOOL perspective;
    __declspec(property(get=GetdrawMode,put=PutdrawMode))
    int drawMode;
    __declspec(property(get=GethideAllPlanes,put=PuthideAllPlanes))
    VARIANT_BOOL hideAllPlanes;
    __declspec(property(get=GethideAllAxis,put=PuthideAllAxis))
    VARIANT_BOOL hideAllAxis;
    __declspec(property(get=GethideAllSketches,put=PuthideAllSketches))
    VARIANT_BOOL hideAllSketches;
    __declspec(property(get=GethideAllPlaces,put=PuthideAllPlaces))
    VARIANT_BOOL hideAllPlaces;
    __declspec(property(get=GethideAllSurfaces,put=PuthideAllSurfaces))
    VARIANT_BOOL hideAllSurfaces;
    __declspec(property(get=GethideAllThreads,put=PuthideAllThreads))
    VARIANT_BOOL hideAllThreads;
    __declspec(property(get=GetshadedWireframe,put=PutshadedWireframe))
    VARIANT_BOOL shadedWireframe;
    __declspec(property(get=GetdismantleMode,put=PutdismantleMode))
    VARIANT_BOOL dismantleMode;
    __declspec(property(get=GettreeNeedRebuild,put=PuttreeNeedRebuild))
    VARIANT_BOOL treeNeedRebuild;
    __declspec(property(get=GetenableRollBackFeaturesInCollections,put=PutenableRollBackFeaturesInCollections))
    VARIANT_BOOL enableRollBackFeaturesInCollections;
    __declspec(property(get=GethideAllCurves,put=PuthideAllCurves))
    VARIANT_BOOL hideAllCurves;
    __declspec(property(get=GethideAllControlPoints,put=PuthideAllControlPoints))
    VARIANT_BOOL hideAllControlPoints;
    __declspec(property(get=GethideAllDimensions,put=PuthideAllDimensions))
    VARIANT_BOOL hideAllDimensions;
    __declspec(property(get=GethideAllDesignations,put=PuthideAllDesignations))
    VARIANT_BOOL hideAllDesignations;
    __declspec(property(get=GethideAllAuxiliaryGeom,put=PuthideAllAuxiliaryGeom))
    VARIANT_BOOL hideAllAuxiliaryGeom;
    __declspec(property(get=GethideInComponentsMode,put=PuthideInComponentsMode))
    VARIANT_BOOL hideInComponentsMode;
    __declspec(property(get=GetwindowNeedRebuild,put=PutwindowNeedRebuild))
    VARIANT_BOOL windowNeedRebuild;
    __declspec(property(get=GethideLayoutGeometry,put=PuthideLayoutGeometry))
    VARIANT_BOOL hideLayoutGeometry;
    __declspec(property(get=GetmatesMultiCreatedMode,put=PutmatesMultiCreatedMode))
    VARIANT_BOOL matesMultiCreatedMode;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetinvisibleMode ( );
    VARIANT_BOOL Create (
        VARIANT_BOOL invisible,
        VARIANT_BOOL typeDoc );
    VARIANT_BOOL IsDetail ( );
    IDispatchPtr GetPart (
        long type );
    IDispatchPtr MateConstraintCollection ( );
    VARIANT_BOOL UpdateDocumentParam ( );
    VARIANT_BOOL IsEditMode ( );
    VARIANT_BOOL ChangeObjectInLibRequest ( );
    VARIANT_BOOL StopLibRequest ( );
    IDispatchPtr GetSpecification ( );
    IDispatchPtr GetRequestInfo (
        IDispatch * part );
    VARIANT_BOOL UserGetPlacementAndEntity (
        long entityCount );
    VARIANT_BOOL SetActive ( );
    VARIANT_BOOL IsActive ( );
    VARIANT_BOOL Open (
        _bstr_t fileName,
        VARIANT_BOOL invisible );
    VARIANT_BOOL Save ( );
    VARIANT_BOOL SaveAs (
        _bstr_t fileName );
    VARIANT_BOOL close ( );
    VARIANT_BOOL UserGetCursor (
        _bstr_t prompt,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL SetPartFromFile (
        _bstr_t fileName,
        IDispatch * part,
        VARIANT_BOOL externalFile );
    IDispatchPtr EntityCollection (
        short objType,
        VARIANT_BOOL checkEntity );
    IDispatchPtr UserSelectEntity (
        IDispatch * filterObject,
        _bstr_t methodName,
        _bstr_t prompt,
        long hInst,
        IDispatch * val );
    VARIANT_BOOL RemoveMateConstraint (
        long constraintType,
        IDispatch * obj1,
        IDispatch * obj2 );
    VARIANT_BOOL AddMateConstraint (
        long constraintType,
        IDispatch * obj1,
        IDispatch * obj2,
        short direction,
        short fixed,
        double val );
    long ksDeleteObj (
        long ref );
    IDispatchPtr PartCollection (
        VARIANT_BOOL refresh );
    VARIANT_BOOL CreatePartFromFile (
        _bstr_t fileName,
        IDispatch * part,
        IDispatch * plane );
    IDispatchPtr CreatePartInAssembly (
        _bstr_t fileName,
        IDispatch * plane );
    VARIANT_BOOL RebuildDocument ( );
    VARIANT_BOOL ZoomPrevNextOrAll (
        short type );
    IDispatchPtr GetMateConstraint ( );
    VARIANT_BOOL SaveAsToRasterFormat (
        _bstr_t fileName,
        IDispatch * rasterPar );
    IDispatchPtr RasterFormatParam ( );
    VARIANT_BOOL SaveAsToAdditionFormat (
        _bstr_t fileName,
        IDispatch * additionPar );
    IDispatchPtr AdditionFormatParam ( );
    IDispatchPtr GetViewProjectionCollection ( );
    VARIANT_BOOL DeleteObject (
        IDispatch * obj );
    IDispatchPtr GetSelectionMng ( );
    IDispatchPtr GetChooseMng ( );
    long GetObjectType (
        IDispatch * obj );
    long ksGetObjParam (
        long ref,
        IDispatch * param,
        long parType );
    long ksSetObjParam (
        long referObj,
        IDispatch * param,
        long parType );
    VARIANT_BOOL SaveAsToUncompressedRasterFormat (
        _bstr_t fileName,
        IDispatch * rasterPar );
    IDispatchPtr AddImportedSurfaces (
        _bstr_t fileName,
        VARIANT_BOOL together );
    IUnknownPtr GetDocument3DNotify ( );
    ksAttribute3DCollectionPtr AttributeCollection (
        long key1,
        long key2,
        long key3,
        long key4,
        double numb,
        IDispatch * pObj );
    ksFeatureCollectionPtr FeatureCollection (
        long key1,
        long key2,
        long key3,
        long key4,
        double numb,
        int objType );
    VARIANT_BOOL SetPartFromFileEx (
        _bstr_t fileName,
        IDispatch * part,
        VARIANT_BOOL externalFile,
        VARIANT_BOOL redraw );
    ksComponentPositionerPtr ComponentPositioner ( );
    ksPlacementPtr DefaultPlacement ( );
    long ksIsSlaveSpcOpened ( );
    IDispatchPtr GetEditMacroObject ( );
    VARIANT_BOOL SaveAsEx (
        _bstr_t fileName,
        long SaveMode );
    IDispatchPtr GetInterface (
        long o3dType );
    IDispatchPtr CopyPart (
        IDispatch * sourcePart,
        IDispatch * newPlacement );
    IDispatchPtr UserSelectEntityEx (
        IDispatch * filterObject,
        _bstr_t methodName,
        _bstr_t prompt,
        long hInst,
        IDispatch * val,
        IUnknown * processParam );
    VARIANT_BOOL PlaceFeatureAfter (
        IDispatch * obj,
        IDispatch * afterObj );
    VARIANT_BOOL SetRollBackFeature (
        IDispatch * obj );
    IDispatchPtr GetRollBackFeature ( );
    VARIANT_BOOL ExcludeFeaturesAfter (
        IDispatch * obj,
        VARIANT_BOOL exclude );
    IDispatchPtr GetDocument3DNotifyResult ( );
    IDispatchPtr UserSelectEntityEx2 (
        IDispatch * filterObject,
        _bstr_t methodName,
        _bstr_t prompt,
        const _variant_t & hInst,
        IDispatch * val,
        IUnknown * processParam );
    VARIANT_BOOL RunTakeCreateObjectProc (
        long processType,
        IDispatch * takeObject,
        VARIANT_BOOL needCreateTakeObj,
        VARIANT_BOOL lostTakeObj );
    VARIANT_BOOL LoadFromAdditionFormat (
        _bstr_t fileName,
        IDispatch * additionPar );
    IDispatchPtr GetLastFeature ( );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    _bstr_t Getauthor ( );
    void Putauthor ( _bstr_t _val );
    long Getreference ( );
    void Putreference ( long _val );
    VARIANT_BOOL Getperspective ( );
    void Putperspective ( VARIANT_BOOL _val );
    int GetdrawMode ( );
    void PutdrawMode ( int _val );
    VARIANT_BOOL GethideAllPlanes ( );
    void PuthideAllPlanes ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllAxis ( );
    void PuthideAllAxis ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllSketches ( );
    void PuthideAllSketches ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllPlaces ( );
    void PuthideAllPlaces ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllSurfaces ( );
    void PuthideAllSurfaces ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllThreads ( );
    void PuthideAllThreads ( VARIANT_BOOL _val );
    VARIANT_BOOL GetshadedWireframe ( );
    void PutshadedWireframe ( VARIANT_BOOL _val );
    VARIANT_BOOL GetdismantleMode ( );
    void PutdismantleMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GettreeNeedRebuild ( );
    void PuttreeNeedRebuild ( VARIANT_BOOL _val );
    VARIANT_BOOL GetenableRollBackFeaturesInCollections ( );
    void PutenableRollBackFeaturesInCollections ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllCurves ( );
    void PuthideAllCurves ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllControlPoints ( );
    void PuthideAllControlPoints ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllDimensions ( );
    void PuthideAllDimensions ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllDesignations ( );
    void PuthideAllDesignations ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideAllAuxiliaryGeom ( );
    void PuthideAllAuxiliaryGeom ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideInComponentsMode ( );
    void PuthideInComponentsMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetwindowNeedRebuild ( );
    void PutwindowNeedRebuild ( VARIANT_BOOL _val );
    VARIANT_BOOL GethideLayoutGeometry ( );
    void PuthideLayoutGeometry ( VARIANT_BOOL _val );
    VARIANT_BOOL GetmatesMultiCreatedMode ( );
    void PutmatesMultiCreatedMode ( VARIANT_BOOL _val );
};

struct __declspec(uuid("22b81342-42d6-4907-a91e-f75a959f2270"))
Document3DNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksDocument3DNotify

struct __declspec(uuid("b6c1bcfd-68da-4a0a-a95c-296084c6a01a"))
ksDocument3DNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginRebuild ( );
    VARIANT_BOOL Rebuild ( );
    VARIANT_BOOL BeginChoiceMaterial ( );
    VARIANT_BOOL ChoiceMaterial (
        _bstr_t material,
        double density );
    VARIANT_BOOL BeginChoiceMarking ( );
    VARIANT_BOOL ChoiceMarking (
        _bstr_t marking );
    VARIANT_BOOL BeginSetPartFromFile ( );
    VARIANT_BOOL BeginCreatePartFromFile (
        VARIANT_BOOL typeDoc,
        struct ksEntity * plane );
    VARIANT_BOOL CreateEmbodiment (
        _bstr_t marking );
    VARIANT_BOOL DeleteEmbodiment (
        _bstr_t marking );
    VARIANT_BOOL ChangeCurrentEmbodiment (
        _bstr_t marking );
    VARIANT_BOOL BeginChoiceProperty (
        IDispatch * obj,
        double propID );
    VARIANT_BOOL ChoiceProperty (
        IDispatch * obj,
        double propID );
    VARIANT_BOOL BeginRollbackFeatures ( );
    VARIANT_BOOL RollbackFeatures ( );
    VARIANT_BOOL BedinLoadCombinationChange (
        long index );
    VARIANT_BOOL LoadCombinationChange (
        long index );
    VARIANT_BOOL BeginDeleteMaterial ( );
    VARIANT_BOOL DeleteMaterial ( );
    VARIANT_BOOL BeginDeleteProperty (
        IDispatch * obj,
        double propID );
    VARIANT_BOOL DeleteProperty (
        IDispatch * obj,
        double propID );
};

struct __declspec(uuid("508a0cca-9d74-11d6-95ce-00c0262d30e3"))
ksEntity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    short type;
    __declspec(property(get=GetMultiBodyParts))
    VARIANT_BOOL MultiBodyParts;
    __declspec(property(get=Gethidden,put=Puthidden))
    VARIANT_BOOL hidden;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=Getexcluded,put=Putexcluded))
    VARIANT_BOOL excluded;
    __declspec(property(get=GetuseColor,put=PutuseColor))
    long useColor;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    short Gettype ( );
    IDispatchPtr GetDefinition ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL IsCreated ( );
    VARIANT_BOOL IsIt (
        long objType );
    VARIANT_BOOL Create ( );
    VARIANT_BOOL Update ( );
    IDispatchPtr ColorParam ( );
    VARIANT_BOOL GetAdvancedColor (
        long * color,
        double * ambient,
        double * diffuse,
        double * specularity,
        double * shininess,
        double * transparency,
        double * emission );
    VARIANT_BOOL SetAdvancedColor (
        long color,
        double ambient,
        double diffuse,
        double specularity,
        double shininess,
        double transparency,
        double emission );
    IDispatchPtr GetFeature ( );
    IDispatchPtr BodyCollection ( );
    VARIANT_BOOL GetMultiBodyParts ( );
    IDispatchPtr GetBodyParts ( );

    // Properties:
    VARIANT_BOOL Gethidden ( );
    void Puthidden ( VARIANT_BOOL _val );
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    VARIANT_BOOL Getexcluded ( );
    void Putexcluded ( VARIANT_BOOL _val );
    long GetuseColor ( );
    void PutuseColor ( long _val );
};

struct __declspec(uuid("eb61a981-f63e-47e1-bee8-2d1612c78e78"))
ksAttribute3DCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    ksAttribute3DPtr First ( );
    ksAttribute3DPtr Last ( );
    ksAttribute3DPtr Next ( );
    ksAttribute3DPtr Prev ( );
    ksAttribute3DPtr GetByIndex (
        long index );
    long FindIt (
        struct ksAttribute3D * obj );
    VARIANT_BOOL Select (
        long key1,
        long key2,
        long key3,
        long key4,
        double numb,
        long objType );
};

struct __declspec(uuid("3eeb2b43-56ff-49c0-afcf-69e990a7d84c"))
ksAttribute3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getreference))
    long reference;
    __declspec(property(get=GetnameType))
    _bstr_t nameType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long Getreference ( );
    ksFeatureCollectionPtr FeatureCollection (
        long objType );
    _bstr_t GetnameType ( );
};

struct __declspec(uuid("ce6a46ff-02b4-4c7e-af50-3f3707c8b122"))
ksFeatureCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    ksFeaturePtr First ( );
    ksFeaturePtr Last ( );
    ksFeaturePtr Next ( );
    ksFeaturePtr Prev ( );
    ksFeaturePtr GetByIndex (
        long index );
    ksFeaturePtr GetByName (
        _bstr_t name,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    long FindIt (
        struct ksFeature * entity );
    VARIANT_BOOL Add (
        struct ksFeature * obj );
    VARIANT_BOOL AddAt (
        struct ksFeature * obj,
        long index );
    VARIANT_BOOL AddBefore (
        struct ksFeature * obj,
        struct ksFeature * base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        struct ksFeature * obj );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL SetByIndex (
        struct ksFeature * obj,
        long index );
    ksAttribute3DCollectionPtr AttributeCollection (
        long key1,
        long key2,
        long key3,
        long key4,
        double numb );
};

struct __declspec(uuid("088bf9a8-37d3-4b15-a7ca-8c52ff1dbc41"))
ksFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=GetupdateStamp))
    unsigned long updateStamp;
    __declspec(property(get=Gettype))
    short type;
    __declspec(property(get=GetVariableCollection))
    IDispatchPtr VariableCollection;
    __declspec(property(get=GetobjectError))
    long objectError;
    __declspec(property(get=Getexcluded,put=Putexcluded))
    VARIANT_BOOL excluded;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t Getname ( );
    unsigned long GetupdateStamp ( );
    VARIANT_BOOL IsModified (
        VARIANT_BOOL recursive );
    IDispatchPtr SubFeatureCollection (
        VARIANT_BOOL through,
        VARIANT_BOOL libObject );
    IDispatchPtr GetOwnerFeature ( );
    VARIANT_BOOL IsValid ( );
    short Gettype ( );
    IDispatchPtr GetObject ( );
    ksAttribute3DCollectionPtr AttributeCollection (
        long key1,
        long key2,
        long key3,
        long key4,
        double numb );
    ksEntityCollectionPtr EntityCollection (
        short objType );
    IDispatchPtr GetVariableCollection ( );
    IDispatchPtr BodyCollection ( );
    ksAttribute3DCollectionPtr GetAttributeCollectionInSource (
        long key1,
        long key2,
        long key3,
        long key4,
        double numb,
        struct ksPart * sourcePart );
    VARIANT_BOOL IsRollBacked ( );
    IDispatchPtr VariableCollectionEx (
        VARIANT_BOOL sourse );
    long GetobjectError ( );

    // Properties:
    VARIANT_BOOL Getexcluded ( );
    void Putexcluded ( VARIANT_BOOL _val );
};

struct __declspec(uuid("b0170141-c02c-11d6-8734-00c0262cdd2c"))
ksEntityCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    VARIANT_BOOL SelectByPoint (
        double x,
        double y,
        double z );
    IDispatchPtr GetByName (
        _bstr_t name,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    VARIANT_BOOL Add (
        IDispatch * entity );
    VARIANT_BOOL AddAt (
        IDispatch * entity,
        long index );
    VARIANT_BOOL AddBefore (
        IDispatch * entity,
        IDispatch * base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        IDispatch * entity );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL SetByIndex (
        IDispatch * entity,
        long index );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("508a0ccd-9d74-11d6-95ce-00c0262d30e3"))
ksPart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getmaterial))
    _bstr_t material;
    __declspec(property(get=GetMultiBodyParts))
    VARIANT_BOOL MultiBodyParts;
    __declspec(property(get=Getdensity))
    double density;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=Getmarking,put=Putmarking))
    _bstr_t marking;
    __declspec(property(get=GetfixedComponent,put=PutfixedComponent))
    VARIANT_BOOL fixedComponent;
    __declspec(property(get=GetstandardComponent,put=PutstandardComponent))
    VARIANT_BOOL standardComponent;
    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getexcluded,put=Putexcluded))
    VARIANT_BOOL excluded;
    __declspec(property(get=GetuseColor,put=PutuseColor))
    long useColor;
    __declspec(property(get=GetneedRebuild,put=PutneedRebuild))
    VARIANT_BOOL needRebuild;
    __declspec(property(get=Gethidden,put=Puthidden))
    VARIANT_BOOL hidden;
    __declspec(property(get=GetDoubleClickEditOff,put=PutDoubleClickEditOff))
    VARIANT_BOOL DoubleClickEditOff;
    __declspec(property(get=GetPropertyObjectEditable,put=PutPropertyObjectEditable))
    VARIANT_BOOL PropertyObjectEditable;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t Getmaterial ( );
    VARIANT_BOOL SetPlacement (
        IDispatch * placement );
    IDispatchPtr GetPlacement ( );
    IDispatchPtr ColorParam ( );
    IDispatchPtr VariableCollection ( );
    VARIANT_BOOL Update ( );
    long GetUserParamSize ( );
    VARIANT_BOOL UpdatePlacement ( );
    VARIANT_BOOL RebuildModel ( );
    IDispatchPtr GetDefaultEntity (
        short objType );
    IDispatchPtr NewEntity (
        short objType );
    IDispatchPtr EntityCollection (
        short objType );
    VARIANT_BOOL GetAdvancedColor (
        long * color,
        double * ambient,
        double * diffuse,
        double * specularity,
        double * shininess,
        double * transparency,
        double * emission );
    VARIANT_BOOL SetAdvancedColor (
        long color,
        double ambient,
        double diffuse,
        double specularity,
        double shininess,
        double transparency,
        double emission );
    VARIANT_BOOL SetUserParam (
        IDispatch * userPars );
    VARIANT_BOOL IsDetail ( );
    IDispatchPtr BeginEdit ( );
    VARIANT_BOOL EndEdit (
        VARIANT_BOOL Rebuild );
    IDispatchPtr GetPart (
        short type );
    double GetMass ( );
    VARIANT_BOOL PutStorage (
        _bstr_t fileName,
        long type,
        VARIANT_BOOL mirror );
    VARIANT_BOOL SetMateConstraintObjects (
        IDispatch * collection );
    IDispatchPtr GetMateConstraintObjects ( );
    VARIANT_BOOL GetUserParam (
        IDispatch * userPars );
    double Getdensity ( );
    VARIANT_BOOL SetMaterial (
        _bstr_t material,
        double density );
    IDispatchPtr BodyCollection ( );
    IDispatchPtr GetFeature ( );
    IDispatchPtr CalcMassInertiaProperties (
        unsigned long bitVector );
    IDispatchPtr GetMeasurer ( );
    IDispatchPtr GetMainBody ( );
    IUnknownPtr GetObject3DNotify (
        long objType,
        IDispatch * obj );
    ksObject3DNotifyResultPtr GetObject3DNotifyResult ( );
    VARIANT_BOOL UpdatePlacementEx (
        VARIANT_BOOL redraw );
    VARIANT_BOOL RebuildModelEx (
        VARIANT_BOOL redraw );
    VARIANT_BOOL CurveIntersection (
        IDispatch * curve,
        IDispatch * parts,
        IDispatch * fases,
        IDispatch * points );
    VARIANT_BOOL TransformPoint (
        double * x,
        double * y,
        double * z,
        IDispatch * part1 );
    VARIANT_BOOL SetObject (
        long index,
        IDispatch * obj );
    IDispatchPtr GetObject (
        long index );
    long GetCountObj ( );
    VARIANT_BOOL ClearAllObj ( );
    IDispatchPtr CreateOrEditObject (
        short objType,
        IDispatch * editObj );
    VARIANT_BOOL TransformPoints (
        VARIANT * points,
        IDispatch * part1 );
    _variant_t GetSummMatrix (
        IDispatch * part1 );
    VARIANT_BOOL GetMultiBodyParts ( );
    VARIANT_BOOL SetSourceVariables (
        VARIANT_BOOL Rebuild );
    IDispatchPtr GetObjectByName (
        _bstr_t name,
        short objType,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    VARIANT_BOOL GetGabarit (
        VARIANT_BOOL full,
        VARIANT_BOOL customizable,
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );

    // Properties:
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    _bstr_t Getmarking ( );
    void Putmarking ( _bstr_t _val );
    VARIANT_BOOL GetfixedComponent ( );
    void PutfixedComponent ( VARIANT_BOOL _val );
    VARIANT_BOOL GetstandardComponent ( );
    void PutstandardComponent ( VARIANT_BOOL _val );
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    VARIANT_BOOL Getexcluded ( );
    void Putexcluded ( VARIANT_BOOL _val );
    long GetuseColor ( );
    void PutuseColor ( long _val );
    VARIANT_BOOL GetneedRebuild ( );
    void PutneedRebuild ( VARIANT_BOOL _val );
    VARIANT_BOOL Gethidden ( );
    void Puthidden ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDoubleClickEditOff ( );
    void PutDoubleClickEditOff ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPropertyObjectEditable ( );
    void PutPropertyObjectEditable ( VARIANT_BOOL _val );
};

struct __declspec(uuid("ca35f3c6-7e2d-4700-be12-baa26dc1945b"))
Object3DNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksObject3DNotify

struct __declspec(uuid("bfa024b6-679e-4a95-b6c2-1ea47a7cd0e9"))
ksObject3DNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginDelete (
        IDispatch * obj );
    VARIANT_BOOL Delete (
        IDispatch * obj );
    VARIANT_BOOL excluded (
        IDispatch * obj,
        VARIANT_BOOL excluded );
    VARIANT_BOOL hidden (
        IDispatch * obj,
        VARIANT_BOOL _hidden );
    VARIANT_BOOL BeginPropertyChanged (
        IDispatch * obj );
    VARIANT_BOOL PropertyChanged (
        IDispatch * obj );
    VARIANT_BOOL BeginPlacementChanged (
        IDispatch * obj );
    VARIANT_BOOL PlacementChanged (
        IDispatch * obj );
    VARIANT_BOOL BeginProcess (
        long pType,
        IDispatch * obj );
    VARIANT_BOOL EndProcess (
        long pType );
    VARIANT_BOOL CreateObject (
        IDispatch * obj );
    VARIANT_BOOL UpdateObject (
        IDispatch * obj );
    VARIANT_BOOL BeginLoadStateChange (
        IDispatch * obj,
        long loadState );
    VARIANT_BOOL LoadStateChange (
        IDispatch * obj,
        long loadState );
};

struct __declspec(uuid("9c3ecc92-e72f-4892-8921-7886f34ca9ad"))
ksObject3DNotifyResult : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetNotifyType ( );
    ksFeatureCollectionPtr GetFeatureCollection ( );
    ksPlacementPtr GetPlacement ( );
    long GetProcessType ( );
    VARIANT_BOOL IsUndoMode ( );
    VARIANT_BOOL IsRedoMode ( );
};

struct __declspec(uuid("2dfacc64-c4a4-11d6-8734-00c0262cdd2c"))
ksPlacement : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetOrigin (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL SetOrigin (
        double x,
        double y,
        double z );
    VARIANT_BOOL GetAxis (
        double * x,
        double * y,
        double * z,
        long type );
    VARIANT_BOOL SetAxis (
        double x,
        double y,
        double z,
        long type );
    VARIANT_BOOL SetPlacement (
        IDispatch * placement );
    VARIANT_BOOL SetAxes (
        double Xx,
        double Xy,
        double Xz,
        double Yx,
        double Yy,
        double Yz );
    VARIANT_BOOL PointProjection (
        double XIn,
        double YIn,
        double ZIn,
        double * XOut,
        double * YOut );
    VARIANT_BOOL PointOn (
        double XIn,
        double YIn,
        double * XOut,
        double * YOut,
        double * ZOut );
    VARIANT_BOOL GetVector (
        long type,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL SetVector (
        long type,
        double x,
        double y,
        double z );
    VARIANT_BOOL InitByMatrix3D (
        const _variant_t & mtr );
    VARIANT_BOOL GetMatrix3D (
        VARIANT * Result );
};

struct __declspec(uuid("508b5962-df59-4cee-8611-ad10fdf0c811"))
ksComponentPositioner : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPlaneByPlacement (
        struct ksPlacement * plane );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    VARIANT_BOOL SetPlaneByPoints (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2,
        double x3,
        double y3,
        double z3 );
    VARIANT_BOOL SetDragPoint (
        double x,
        double y,
        double z );
    VARIANT_BOOL SetAxis (
        IDispatch * axis );
    VARIANT_BOOL SetAxisByPoints (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    long Prepare (
        struct ksPart * part,
        long positionerType );
    VARIANT_BOOL MoveComponent (
        double x,
        double y,
        double z );
    VARIANT_BOOL RotateComponent (
        double angl );
    VARIANT_BOOL Finish ( );
};

struct __declspec(uuid("c7cb743a-c59d-4c27-8cb6-971c2a393f2f"))
ksKompasObjectNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL CreateDocument (
        IDispatch * newDoc,
        long docType );
    VARIANT_BOOL BeginOpenDocument (
        _bstr_t fileName );
    VARIANT_BOOL OpenDocument (
        IDispatch * newDoc,
        long docType );
    VARIANT_BOOL ChangeActiveDocument (
        IDispatch * newDoc,
        long docType );
    VARIANT_BOOL ApplicationDestroy ( );
    VARIANT_BOOL BeginCreate (
        long docType );
    VARIANT_BOOL BeginOpenFile ( );
    VARIANT_BOOL BeginCloseAllDocument ( );
    VARIANT_BOOL KeyDown (
        long * key,
        long flags,
        VARIANT_BOOL systemKey );
    VARIANT_BOOL KeyUp (
        long * key,
        long flags,
        VARIANT_BOOL systemKey );
    VARIANT_BOOL KeyPress (
        long * key,
        VARIANT_BOOL systemKey );
    VARIANT_BOOL BeginReguestFiles (
        long requestID,
        VARIANT * files );
    VARIANT_BOOL BeginChoiceMaterial (
        long MaterialPropertyId );
    VARIANT_BOOL ChoiceMaterial (
        long MaterialPropertyId,
        _bstr_t material,
        double density );
    VARIANT_BOOL IsNeedConvertToSavePrevious (
        IDispatch * pDoc,
        long docType,
        long saveVersion,
        IDispatch * saveToPreviusParam,
        VARIANT_BOOL * needConvert );
    VARIANT_BOOL BeginConvertToSavePrevious (
        IDispatch * pDoc,
        long docType,
        long saveVersion,
        IDispatch * saveToPreviusParam );
    VARIANT_BOOL EndConvertToSavePrevious (
        IDispatch * pDoc,
        long docType,
        long saveVersion,
        IDispatch * saveToPreviusParam );
    VARIANT_BOOL ChangeTheme (
        long newTheme );
    VARIANT_BOOL BeginDragOpenFiles (
        VARIANT * filesList,
        VARIANT_BOOL insert,
        VARIANT_BOOL * filesListChanged );
};

struct __declspec(uuid("324c1a45-67ad-41fb-be57-624f930646f1"))
ksDocumentFileNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginCloseDocument ( );
    VARIANT_BOOL CloseDocument ( );
    VARIANT_BOOL BeginSaveDocument (
        _bstr_t fileName );
    VARIANT_BOOL SaveDocument ( );
    VARIANT_BOOL Activate ( );
    VARIANT_BOOL Deactivate ( );
    VARIANT_BOOL BeginSaveAsDocument ( );
    VARIANT_BOOL DocumentFrameOpen (
        IDispatch * v );
    VARIANT_BOOL ProcessActivate (
        long iD );
    VARIANT_BOOL ProcessDeactivate (
        long iD );
    VARIANT_BOOL BeginProcess (
        long iD );
    VARIANT_BOOL EndProcess (
        long iD,
        VARIANT_BOOL Success );
    VARIANT_BOOL BeginAutoSaveDocument (
        _bstr_t fileName );
    VARIANT_BOOL AutoSaveDocument ( );
};

struct __declspec(uuid("9f88caaa-a50f-46f4-904a-846c792fa649"))
ksDocument3DNotifyResult : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetNotifyType ( );
    long GetNotifyObjectType ( );
    IDispatchPtr GetNotifyObject ( );
    long GetRequestFilesType ( );
};

struct __declspec(uuid("364521a3-94b5-11d6-8732-00c0262cdd2c"))
ksSpecRoughParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getsign,put=Putsign))
    short sign;
    __declspec(property(get=Gett,put=Putt))
    VARIANT_BOOL t;
    __declspec(property(get=Gets,put=Puts))
    _bstr_t s;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    short Getsign ( );
    void Putsign ( short _val );
    VARIANT_BOOL Gett ( );
    void Putt ( VARIANT_BOOL _val );
    _bstr_t Gets ( );
    void Puts ( _bstr_t _val );
};

struct __declspec(uuid("364521a6-94b5-11d6-8732-00c0262cdd2c"))
ksEllipseParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double GetA ( );
    void PutA ( double _val );
    double GetB ( );
    void PutB ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("364521a9-94b5-11d6-8732-00c0262cdd2c"))
ksEllipseArcParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=GetangleFirst,put=PutangleFirst))
    double angleFirst;
    __declspec(property(get=GetangleSecond,put=PutangleSecond))
    double angleSecond;
    __declspec(property(get=Getdirection,put=Putdirection))
    double direction;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double GetA ( );
    void PutA ( double _val );
    double GetB ( );
    void PutB ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    double GetangleFirst ( );
    void PutangleFirst ( double _val );
    double GetangleSecond ( );
    void PutangleSecond ( double _val );
    double Getdirection ( );
    void Putdirection ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("364521ac-94b5-11d6-8732-00c0262cdd2c"))
ksEllipseArcParam1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=GetparFirst,put=PutparFirst))
    double parFirst;
    __declspec(property(get=GetparSecond,put=PutparSecond))
    double parSecond;
    __declspec(property(get=Getdirection,put=Putdirection))
    double direction;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double GetA ( );
    void PutA ( double _val );
    double GetB ( );
    void PutB ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    double GetparFirst ( );
    void PutparFirst ( double _val );
    double GetparSecond ( );
    void PutparSecond ( double _val );
    double Getdirection ( );
    void Putdirection ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("364521af-94b5-11d6-8732-00c0262cdd2c"))
ksEquidistantParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetgeoObj,put=PutgeoObj))
    long geoObj;
    __declspec(property(get=Getside,put=Putside))
    short side;
    __declspec(property(get=GetcutMode,put=PutcutMode))
    VARIANT_BOOL cutMode;
    __declspec(property(get=GetdegState,put=PutdegState))
    VARIANT_BOOL degState;
    __declspec(property(get=GetradRight,put=PutradRight))
    double radRight;
    __declspec(property(get=GetradLeft,put=PutradLeft))
    double radLeft;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long GetgeoObj ( );
    void PutgeoObj ( long _val );
    short Getside ( );
    void Putside ( short _val );
    VARIANT_BOOL GetcutMode ( );
    void PutcutMode ( VARIANT_BOOL _val );
    VARIANT_BOOL GetdegState ( );
    void PutdegState ( VARIANT_BOOL _val );
    double GetradRight ( );
    void PutradRight ( double _val );
    double GetradLeft ( );
    void PutradLeft ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("364521b2-94b5-11d6-8732-00c0262cdd2c"))
ksParagraphParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getwidth,put=Putwidth))
    double width;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=GetvFormat,put=PutvFormat))
    long vFormat;
    __declspec(property(get=GethFormat,put=PuthFormat))
    long hFormat;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getang ( );
    void Putang ( double _val );
    double Getwidth ( );
    void Putwidth ( double _val );
    double Getheight ( );
    void Putheight ( double _val );
    long GetvFormat ( );
    void PutvFormat ( long _val );
    long GethFormat ( );
    void PuthFormat ( long _val );
};

struct __declspec(uuid("364521b7-94b5-11d6-8732-00c0262cdd2c"))
ksTextItemParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype,put=Puttype))
    long type;
    __declspec(property(get=Gets,put=Puts))
    _bstr_t s;
    __declspec(property(get=GetiSNumb,put=PutiSNumb))
    long iSNumb;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetItemFont ( );
    VARIANT_BOOL SetItemFont (
        IDispatch * val );

    // Properties:
    long Gettype ( );
    void Puttype ( long _val );
    _bstr_t Gets ( );
    void Puts ( _bstr_t _val );
    long GetiSNumb ( );
    void PutiSNumb ( long _val );
};

struct __declspec(uuid("364521ba-94b5-11d6-8732-00c0262cdd2c"))
ksTextLineParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTextItemArr ( );
    VARIANT_BOOL SetTextItemArr (
        IDispatch * val );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("364521bd-94b5-11d6-8732-00c0262cdd2c"))
ksTextItemFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfontName,put=PutfontName))
    _bstr_t fontName;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=Getksu,put=Putksu))
    double ksu;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=GetbitVector,put=PutbitVector))
    long bitVector;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    VARIANT_BOOL GetBitVectorValue (
        long val );
    VARIANT_BOOL SetBitVectorValue (
        long val,
        VARIANT_BOOL state );

    // Properties:
    _bstr_t GetfontName ( );
    void PutfontName ( _bstr_t _val );
    double Getheight ( );
    void Putheight ( double _val );
    double Getksu ( );
    void Putksu ( double _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    long GetbitVector ( );
    void PutbitVector ( long _val );
};

struct __declspec(uuid("e79c2501-9584-11d6-8732-00c0262cdd2c"))
ksCornerParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getindex,put=Putindex))
    long index;
    __declspec(property(get=Getfillet,put=Putfillet))
    VARIANT_BOOL fillet;
    __declspec(property(get=Getl1,put=Putl1))
    double l1;
    __declspec(property(get=Getl2,put=Putl2))
    double l2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getindex ( );
    void Putindex ( long _val );
    VARIANT_BOOL Getfillet ( );
    void Putfillet ( VARIANT_BOOL _val );
    double Getl1 ( );
    void Putl1 ( double _val );
    double Getl2 ( );
    void Putl2 ( double _val );
};

struct __declspec(uuid("e79c2504-9584-11d6-8732-00c0262cdd2c"))
ksContourParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("e79c2507-9584-11d6-8732-00c0262cdd2c"))
ksLayerParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstate,put=Putstate))
    short state;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short Getstate ( );
    void Putstate ( short _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
};

struct __declspec(uuid("e79c250a-9584-11d6-8732-00c0262cdd2c"))
ksLineParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
};

struct __declspec(uuid("e79c250d-9584-11d6-8732-00c0262cdd2c"))
ksRegularPolygonParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount,put=Putcount))
    long count;
    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getradius,put=Putradius))
    double radius;
    __declspec(property(get=Getdescribe,put=Putdescribe))
    VARIANT_BOOL describe;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPCorner ( );
    VARIANT_BOOL SetPCorner (
        IDispatch * val );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getcount ( );
    void Putcount ( long _val );
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double Getang ( );
    void Putang ( double _val );
    double Getradius ( );
    void Putradius ( double _val );
    VARIANT_BOOL Getdescribe ( );
    void Putdescribe ( VARIANT_BOOL _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("e79c2510-9584-11d6-8732-00c0262cdd2c"))
ksRectangleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=Getwidth,put=Putwidth))
    double width;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPCorner ( );
    VARIANT_BOOL SetPCorner (
        IDispatch * val );
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getang ( );
    void Putang ( double _val );
    double Getheight ( );
    void Putheight ( double _val );
    double Getwidth ( );
    void Putwidth ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("e79c2513-9584-11d6-8732-00c0262cdd2c"))
ksBaseParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Gettype,put=Puttype))
    VARIANT_BOOL type;
    __declspec(property(get=Getstr,put=Putstr))
    _bstr_t str;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPTextItem ( );
    VARIANT_BOOL SetPTextItem (
        IDispatch * val );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    VARIANT_BOOL Gettype ( );
    void Puttype ( VARIANT_BOOL _val );
    _bstr_t Getstr ( );
    void Putstr ( _bstr_t _val );
};

struct __declspec(uuid("e79c2516-9584-11d6-8732-00c0262cdd2c"))
ksLtVariant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetvalType))
    short valType;
    __declspec(property(get=GetstrVal,put=PutstrVal))
    _bstr_t strVal;
    __declspec(property(get=GetshortVal,put=PutshortVal))
    short shortVal;
    __declspec(property(get=GetintVal,put=PutintVal))
    long intVal;
    __declspec(property(get=GetlongVal,put=PutlongVal))
    long longVal;
    __declspec(property(get=GetfloatVal,put=PutfloatVal))
    float floatVal;
    __declspec(property(get=GetdoubleVal,put=PutdoubleVal))
    double doubleVal;
    __declspec(property(get=GetcharVal,put=PutcharVal))
    short charVal;
    __declspec(property(get=GetuCharVal,put=PutuCharVal))
    short uCharVal;
    __declspec(property(get=GetuIntVal,put=PutuIntVal))
    long uIntVal;
    __declspec(property(get=GetwstrVal,put=PutwstrVal))
    _bstr_t wstrVal;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    short GetvalType ( );
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t GetstrVal ( );
    void PutstrVal ( _bstr_t _val );
    short GetshortVal ( );
    void PutshortVal ( short _val );
    long GetintVal ( );
    void PutintVal ( long _val );
    long GetlongVal ( );
    void PutlongVal ( long _val );
    float GetfloatVal ( );
    void PutfloatVal ( float _val );
    double GetdoubleVal ( );
    void PutdoubleVal ( double _val );
    short GetcharVal ( );
    void PutcharVal ( short _val );
    short GetuCharVal ( );
    void PutuCharVal ( short _val );
    long GetuIntVal ( );
    void PutuIntVal ( long _val );
    _bstr_t GetwstrVal ( );
    void PutwstrVal ( _bstr_t _val );
};

struct __declspec(uuid("e79c2519-9584-11d6-8732-00c0262cdd2c"))
ksUserParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=GetlibName,put=PutlibName))
    _bstr_t libName;
    __declspec(property(get=Getnumber,put=Putnumber))
    long number;
    __declspec(property(get=GetUserParams,put=PutUserParams))
    _variant_t UserParams;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetUserArray ( );
    VARIANT_BOOL SetUserArray (
        IDispatch * val );
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t GetlibName ( );
    void PutlibName ( _bstr_t _val );
    long Getnumber ( );
    void Putnumber ( long _val );
    _variant_t GetUserParams ( );
    void PutUserParams ( const _variant_t & _val );
};

struct __declspec(uuid("3198e121-9585-11d6-95ce-00c0262d30e3"))
ksMathPointParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
};

struct __declspec(uuid("910ec541-958d-11d6-95ce-00c0262d30e3"))
ksCurvePicture : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPolygon ( );
    VARIANT_BOOL SetPolygon (
        IDispatch * polygon );
    IDispatchPtr GetFill ( );
    VARIANT_BOOL SetFill (
        IDispatch * fill );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("910ec544-958d-11d6-95ce-00c0262d30e3"))
ksCurvePattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetvisibleSeg,put=PutvisibleSeg))
    double visibleSeg;
    __declspec(property(get=GetinvisibleSeg,put=PutinvisibleSeg))
    double invisibleSeg;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetvisibleSeg ( );
    void PutvisibleSeg ( double _val );
    double GetinvisibleSeg ( );
    void PutinvisibleSeg ( double _val );
};

struct __declspec(uuid("8075ede4-6c85-4711-8685-68fbe359d4c4"))
ksTAN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx1))
    double x1[];
    __declspec(property(get=Gety1))
    double y1[];
    __declspec(property(get=Getx2))
    double x2[];
    __declspec(property(get=Gety2))
    double y2[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getx1 (
        long index );
    double Gety1 (
        long index );
    double Getx2 (
        long index );
    double Gety2 (
        long index );
};

struct __declspec(uuid("c175bfb8-d7d6-4325-bfda-2a282b9d1119"))
ksCON : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    double GetXc (
        long index );
    double GetYc (
        long index );
    double GetX1 (
        long index );
    double GetY1 (
        long index );
    double GetX2 (
        long index );
    double GetY2 (
        long index );
};

struct __declspec(uuid("ea92e649-239e-4105-bbd3-aef4817bd783"))
ksInertiaParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc))
    double xc;
    __declspec(property(get=Getyc))
    double yc;
    __declspec(property(get=GetF))
    double F;
    __declspec(property(get=Getly))
    double ly;
    __declspec(property(get=Getlx))
    double lx;
    __declspec(property(get=Getlxy))
    double lxy;
    __declspec(property(get=Getmx))
    double mx;
    __declspec(property(get=Getmy))
    double my;
    __declspec(property(get=Getmxy))
    double mxy;
    __declspec(property(get=Getjx))
    double jx;
    __declspec(property(get=Getjy))
    double jy;
    __declspec(property(get=GetA))
    double A;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxc ( );
    double Getyc ( );
    double GetF ( );
    double Getly ( );
    double Getlx ( );
    double Getlxy ( );
    double Getmx ( );
    double Getmy ( );
    double Getmxy ( );
    double Getjx ( );
    double Getjy ( );
    double GetA ( );
};

struct __declspec(uuid("283f77eb-7e2c-4f71-8b16-4d286fa4857e"))
ksMassInertiaParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc))
    double xc;
    __declspec(property(get=Getyc))
    double yc;
    __declspec(property(get=Getzc))
    double zc;
    __declspec(property(get=Getlx))
    double lx;
    __declspec(property(get=Getly))
    double ly;
    __declspec(property(get=Getlz))
    double lz;
    __declspec(property(get=Getjx))
    double jx;
    __declspec(property(get=Getjy))
    double jy;
    __declspec(property(get=Getjz))
    double jz;
    __declspec(property(get=Getjxy))
    double jxy;
    __declspec(property(get=Getjxz))
    double jxz;
    __declspec(property(get=Getjyz))
    double jyz;
    __declspec(property(get=Getjx0z))
    double jx0z;
    __declspec(property(get=Getjy0z))
    double jy0z;
    __declspec(property(get=Getjx0y))
    double jx0y;
    __declspec(property(get=Getlxy))
    double lxy;
    __declspec(property(get=Getlxz))
    double lxz;
    __declspec(property(get=Getlyz))
    double lyz;
    __declspec(property(get=Getr))
    double r;
    __declspec(property(get=Getm))
    double m;
    __declspec(property(get=Getv))
    double v;
    __declspec(property(get=GetF))
    double F;
    __declspec(property(get=Getjx0))
    double jx0;
    __declspec(property(get=Getjy0))
    double jy0;
    __declspec(property(get=Getjz0))
    double jz0;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getxc ( );
    double Getyc ( );
    double Getzc ( );
    double Getlx ( );
    double Getly ( );
    double Getlz ( );
    double Getjx ( );
    double Getjy ( );
    double Getjz ( );
    double Getjxy ( );
    double Getjxz ( );
    double Getjyz ( );
    double Getjx0z ( );
    double Getjy0z ( );
    double Getjx0y ( );
    double Getlxy ( );
    double Getlxz ( );
    double Getlyz ( );
    double Getr ( );
    double Getm ( );
    double Getv ( );
    VARIANT_BOOL SetBitVectorValue (
        long val,
        VARIANT_BOOL setState );
    double GetF ( );
    double Getjx0 ( );
    double Getjy0 ( );
    double Getjz0 ( );
    VARIANT_BOOL GetAxisX (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetAxisY (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetAxisZ (
        double * x,
        double * y,
        double * z );
};

struct __declspec(uuid("f2d5ae01-45de-4496-b01b-9958caef5943"))
ksMathematic2D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double ksCosD (
        double x );
    double ksSinD (
        double x );
    double ksTanD (
        double x );
    double ksAtanD (
        double x );
    double ksAngle (
        double x1,
        double y1,
        double x2,
        double y2 );
    long ksEqualPoints (
        double x1,
        double y1,
        double x2,
        double y2 );
    VARIANT_BOOL ksIntersectLinSLinS (
        double x11,
        double y11,
        double x12,
        double y12,
        double x21,
        double y21,
        double x22,
        double y22,
        IDispatch * param );
    VARIANT_BOOL ksIntersectLinSLine (
        double x1,
        double y1,
        double x2,
        double y2,
        double x,
        double y,
        double ang,
        IDispatch * param );
    VARIANT_BOOL ksIntersectArcLin (
        double xc,
        double yc,
        double rad,
        double f1,
        double f2,
        long n,
        double x,
        double y,
        double ang,
        IDispatch * param );
    VARIANT_BOOL ksIntersectLinLin (
        double x1,
        double y1,
        double angle1,
        double x2,
        double y2,
        double angle2,
        IDispatch * param );
    VARIANT_BOOL ksIntersectCirCir (
        double xc1,
        double yc1,
        double radius1,
        double xc2,
        double yc2,
        double radius2,
        IDispatch * param );
    VARIANT_BOOL ksIntersectArcArc (
        double xac,
        double yac,
        double rada,
        double fa1,
        double fa2,
        short directa,
        double xbc,
        double ybc,
        double radb,
        double fb1,
        double fb2,
        long directb,
        IDispatch * param );
    VARIANT_BOOL ksIntersectLinSArc (
        double x1,
        double y1,
        double x2,
        double y2,
        double xc,
        double yc,
        double rad,
        double f1,
        double f2,
        short direct,
        IDispatch * param );
    VARIANT_BOOL ksIntersectLinSCir (
        double x1,
        double y1,
        double x2,
        double y2,
        double xc,
        double yc,
        double rad,
        IDispatch * param );
    VARIANT_BOOL ksIntersectCirLin (
        double xc,
        double yc,
        double rad,
        double xl,
        double yl,
        double angle,
        IDispatch * param );
    VARIANT_BOOL ksIntersectCirArc (
        double xcc,
        double ycc,
        double radc,
        double xac,
        double yac,
        double rada,
        double fa1,
        double fa2,
        short directa,
        IDispatch * param );
    long ksIntersectCurvCurv (
        long p1,
        long p2,
        IDispatch * param );
    VARIANT_BOOL ksTanLinePointCircle (
        double x,
        double y,
        double xc,
        double yc,
        double rad,
        IDispatch * param );
    VARIANT_BOOL ksTanLineAngCircle (
        double xc,
        double yc,
        double rad,
        double ang,
        IDispatch * param );
    VARIANT_BOOL ksTanCircleCircle (
        double xc1,
        double yc1,
        double radius1,
        double xc2,
        double yc2,
        double radius2,
        IDispatch * param );
    long ksTanLinePointCurve (
        double x,
        double y,
        long pCur,
        IDispatch * array );
    VARIANT_BOOL ksCouplingLineLine (
        double x1,
        double y1,
        double angle1,
        double x2,
        double y2,
        double angle2,
        double rad,
        IDispatch * param );
    VARIANT_BOOL ksCouplingLineCircle (
        double xc,
        double yc,
        double radc,
        double x1,
        double y1,
        double angle1,
        double rad,
        IDispatch * param );
    VARIANT_BOOL ksCouplingCircleCircle (
        double xc1,
        double yc1,
        double radc1,
        double xc2,
        double yc2,
        double radc2,
        double rad,
        IDispatch * param );
    VARIANT_BOOL ksSymmetry (
        double x,
        double y,
        double x1,
        double y1,
        double x2,
        double y2,
        double * xc,
        double * yc );
    VARIANT_BOOL ksRotate (
        double x,
        double y,
        double xc,
        double yc,
        double ang,
        double * xr,
        double * yr );
    double ksDistancePntPnt (
        double x1,
        double y1,
        double x2,
        double y2 );
    double ksDistancePntLineSeg (
        double x,
        double y,
        double x1,
        double y1,
        double x2,
        double y2 );
    double ksDistancePntArc (
        double x,
        double y,
        double xac,
        double yac,
        double rada,
        double fa1,
        double fa2,
        short directa );
    double ksDistancePntCircle (
        double x,
        double y,
        double xc,
        double yc,
        double rad );
    double ksDistancePntLine (
        double x,
        double y,
        double x1,
        double y1,
        double angle );
    double ksDistancePntLineForPoint (
        double x,
        double y,
        double x1,
        double y1,
        double x2,
        double y2 );
    VARIANT_BOOL ksPerpendicular (
        double x,
        double y,
        double x1,
        double y1,
        double x2,
        double y2,
        double * xp,
        double * yp );
    IDispatchPtr ksPointsOnCurve (
        long curve,
        long count );
    double ksGetCurvePerpendicular (
        long curve,
        double x,
        double y );
    long ksGetCurvePointProjection (
        long curve,
        double x,
        double y,
        double * kx,
        double * ky );
    long ksMovePointOnCurve (
        long curve,
        double * x,
        double * y,
        double len,
        long dir );
    long ksCalcInertiaProperties (
        long p,
        IDispatch * prop,
        short dimension );
    long ksCalcMassInertiaProperties (
        long p,
        IDispatch * prop,
        double density,
        double param );
    double ksGetCurvePerimeter (
        long curve,
        short dimension );
    IDispatchPtr ksPointsOnCurveByStep (
        long curve,
        double step );
    double ksDistancePntPntOnCurve (
        long curve,
        double x1,
        double y1,
        double x2,
        double y2 );
    long ksGetCurvePointProjectionEx (
        long curve,
        double x,
        double y,
        double * kx,
        double * ky,
        double * t );
    long ksGetCurvePoint (
        long curve,
        double t,
        double * x,
        double * y );
    long ksGetCurveMinMaxParametr (
        long curve,
        double * tMin,
        double * tMax );
    double ksDistanceT1T2OnCurve (
        long curve,
        double t1,
        double t2 );
    long ksTanCurvCurv (
        long p1,
        long p2,
        IDispatch * pointArr1,
        IDispatch * pointArr2 );
    long ksIntersectCurvCurvEx (
        long p1,
        long p2,
        IDispatch * param,
        VARIANT_BOOL touchInclude );
    VARIANT_BOOL ksTanLineAngCurve (
        long p,
        double ang,
        IDispatch * param );
    VARIANT_BOOL ksLinePointTangentCurve (
        long p,
        double xc,
        double yc,
        IDispatch * param );
    long ksMovePointOnCurveEx (
        long curve,
        double * x,
        double * y,
        double * t,
        double len,
        long dir,
        long ext );
    double ksGetCurvePerpendicularByT (
        long curve,
        double t );
    long ksDistanceCurveCurve (
        long p1,
        long p2,
        double * distanse,
        double * t1,
        double * t2 );
};

struct __declspec(uuid("4d91cd9a-6e02-409d-9360-cf7fef60d31c"))
ksDynamicArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getreference,put=Putreference))
    long reference;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ksDeleteArray ( );
    long ksClearArray ( );
    long ksGetArrayCount ( );
    long ksGetArrayType ( );
    long ksExcludeArrayItem (
        long index );
    long ksAddArrayItem (
        long index,
        IDispatch * item );
    long ksGetArrayItem (
        long index,
        IDispatch * item );
    long ksSetArrayItem (
        long index,
        IDispatch * item );

    // Properties:
    long Getreference ( );
    void Putreference ( long _val );
};

struct __declspec(uuid("2a4d4542-95b3-11d6-8732-00c0262cdd2c"))
ksRDimDrawingParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getpt1,put=Putpt1))
    short pt1;
    __declspec(property(get=Getpt2,put=Putpt2))
    short pt2;
    __declspec(property(get=GettextPos,put=PuttextPos))
    long textPos;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=GetshelfDir,put=PutshelfDir))
    long shelfDir;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short Getpt1 ( );
    void Putpt1 ( short _val );
    short Getpt2 ( );
    void Putpt2 ( short _val );
    long GettextPos ( );
    void PuttextPos ( long _val );
    double Getang ( );
    void Putang ( double _val );
    long GetshelfDir ( );
    void PutshelfDir ( long _val );
};

struct __declspec(uuid("2a4d4545-95b3-11d6-8732-00c0262cdd2c"))
ksRDimSourceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=Getrad,put=Putrad))
    double rad;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double Getrad ( );
    void Putrad ( double _val );
};

struct __declspec(uuid("7f7d6f81-97da-11d6-8732-00c0262cdd2c"))
ksRDimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6f84-97da-11d6-8732-00c0262cdd2c"))
ksLineSegParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6f87-97da-11d6-8732-00c0262cdd2c"))
ksCircleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=Getrad,put=Putrad))
    double rad;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double Getrad ( );
    void Putrad ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6f8a-97da-11d6-8732-00c0262cdd2c"))
ksArcByAngleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=Getrad,put=Putrad))
    double rad;
    __declspec(property(get=Getang1,put=Putang1))
    double ang1;
    __declspec(property(get=Getang2,put=Putang2))
    double ang2;
    __declspec(property(get=Getdir,put=Putdir))
    short dir;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double Getrad ( );
    void Putrad ( double _val );
    double Getang1 ( );
    void Putang1 ( double _val );
    double Getang2 ( );
    void Putang2 ( double _val );
    short Getdir ( );
    void Putdir ( short _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6f8d-97da-11d6-8732-00c0262cdd2c"))
ksArcByPointParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=Getrad,put=Putrad))
    double rad;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getdir,put=Putdir))
    short dir;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double Getrad ( );
    void Putrad ( double _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    short Getdir ( );
    void Putdir ( short _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6f90-97da-11d6-8732-00c0262cdd2c"))
ksPointParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6f93-97da-11d6-8732-00c0262cdd2c"))
ksHatchParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getwidth,put=Putwidth))
    double width;
    __declspec(property(get=Getboundaries,put=Putboundaries))
    long boundaries;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=Getsheeting,put=Putsheeting))
    short sheeting;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getstep ( );
    void Putstep ( double _val );
    double Getang ( );
    void Putang ( double _val );
    double Getwidth ( );
    void Putwidth ( double _val );
    long Getboundaries ( );
    void Putboundaries ( long _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    short Getsheeting ( );
    void Putsheeting ( short _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6f96-97da-11d6-8732-00c0262cdd2c"))
ksTextParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetParagraphParam ( );
    VARIANT_BOOL SetParagraphParam (
        IDispatch * val );
    IDispatchPtr GetTextLineArr ( );
    VARIANT_BOOL SetTextLineArr (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6f99-97da-11d6-8732-00c0262cdd2c"))
ksNurbsPointParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getweight,put=Putweight))
    double weight;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getweight ( );
    void Putweight ( double _val );
};

struct __declspec(uuid("7f7d6f9c-97da-11d6-8732-00c0262cdd2c"))
ksDoubleValue : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getvalue,put=Putvalue))
    double value;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getvalue ( );
    void Putvalue ( double _val );
};

struct __declspec(uuid("7f7d6f9f-97da-11d6-8732-00c0262cdd2c"))
ksNurbsParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getperiodic))
    VARIANT_BOOL periodic;
    __declspec(property(get=Getdegree,put=Putdegree))
    short degree;
    __declspec(property(get=Getclose,put=Putclose))
    VARIANT_BOOL close;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Getperiodic ( );
    VARIANT_BOOL Init ( );
    IDispatchPtr GetPPoint ( );
    VARIANT_BOOL SetPPoint (
        IDispatch * val );
    IDispatchPtr GetPKnot ( );
    VARIANT_BOOL SetPKnot (
        IDispatch * val );

    // Properties:
    short Getdegree ( );
    void Putdegree ( short _val );
    VARIANT_BOOL Getclose ( );
    void Putclose ( VARIANT_BOOL _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6fa2-97da-11d6-8732-00c0262cdd2c"))
ksConicArcParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetA,put=PutA))
    double A;
    __declspec(property(get=GetB,put=PutB))
    double B;
    __declspec(property(get=GetC,put=PutC))
    double C;
    __declspec(property(get=GetD,put=PutD))
    double D;
    __declspec(property(get=GetE,put=PutE))
    double E;
    __declspec(property(get=GetF,put=PutF))
    double F;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetA ( );
    void PutA ( double _val );
    double GetB ( );
    void PutB ( double _val );
    double GetC ( );
    void PutC ( double _val );
    double GetD ( );
    void PutD ( double _val );
    double GetE ( );
    void PutE ( double _val );
    double GetF ( );
    void PutF ( double _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("7f7d6fa5-97da-11d6-8732-00c0262cdd2c"))
ksCentreParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbaseCurve,put=PutbaseCurve))
    long baseCurve;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=GetstandXpTail,put=PutstandXpTail))
    VARIANT_BOOL standXpTail;
    __declspec(property(get=GetstandXmTail,put=PutstandXmTail))
    VARIANT_BOOL standXmTail;
    __declspec(property(get=GetstandYpTail,put=PutstandYpTail))
    VARIANT_BOOL standYpTail;
    __declspec(property(get=GetstandYmTail,put=PutstandYmTail))
    VARIANT_BOOL standYmTail;
    __declspec(property(get=GetlenXpTail,put=PutlenXpTail))
    double lenXpTail;
    __declspec(property(get=GetlenXmTail,put=PutlenXmTail))
    double lenXmTail;
    __declspec(property(get=GetlenYpTail,put=PutlenYpTail))
    double lenYpTail;
    __declspec(property(get=GetlenYmTail,put=PutlenYmTail))
    double lenYmTail;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long GetbaseCurve ( );
    void PutbaseCurve ( long _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    short Gettype ( );
    void Puttype ( short _val );
    VARIANT_BOOL GetstandXpTail ( );
    void PutstandXpTail ( VARIANT_BOOL _val );
    VARIANT_BOOL GetstandXmTail ( );
    void PutstandXmTail ( VARIANT_BOOL _val );
    VARIANT_BOOL GetstandYpTail ( );
    void PutstandYpTail ( VARIANT_BOOL _val );
    VARIANT_BOOL GetstandYmTail ( );
    void PutstandYmTail ( VARIANT_BOOL _val );
    double GetlenXpTail ( );
    void PutlenXpTail ( double _val );
    double GetlenXmTail ( );
    void PutlenXmTail ( double _val );
    double GetlenYpTail ( );
    void PutlenYpTail ( double _val );
    double GetlenYmTail ( );
    void PutlenYmTail ( double _val );
};

struct __declspec(uuid("7f7d6fa8-97da-11d6-8732-00c0262cdd2c"))
ksPlacementParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetxBase,put=PutxBase))
    double xBase;
    __declspec(property(get=GetyBase,put=PutyBase))
    double yBase;
    __declspec(property(get=Getscale_,put=Putscale_))
    double scale_;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetxBase ( );
    void PutxBase ( double _val );
    double GetyBase ( );
    void PutyBase ( double _val );
    double Getscale_ ( );
    void Putscale_ ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
};

struct __declspec(uuid("7f7d6fab-97da-11d6-8732-00c0262cdd2c"))
ksRasterParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getembeded,put=Putembeded))
    VARIANT_BOOL embeded;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetPlace ( );
    VARIANT_BOOL SetPlace (
        IDispatch * val );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    VARIANT_BOOL Getembeded ( );
    void Putembeded ( VARIANT_BOOL _val );
};

struct __declspec(uuid("7f7d6fae-97da-11d6-8732-00c0262cdd2c"))
ksPolylineParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getclosed,put=Putclosed))
    VARIANT_BOOL closed;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetpMathPoint ( );
    VARIANT_BOOL SetpMathPoint (
        IDispatch * val );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    VARIANT_BOOL Getclosed ( );
    void Putclosed ( VARIANT_BOOL _val );
};

struct __declspec(uuid("7f7d6fb1-97da-11d6-8732-00c0262cdd2c"))
ksInsertFragmentParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=GetinsertType,put=PutinsertType))
    short insertType;
    __declspec(property(get=GetmultiLayer,put=PutmultiLayer))
    VARIANT_BOOL multiLayer;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetPlace ( );
    VARIANT_BOOL SetPlace (
        IDispatch * val );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    short GetinsertType ( );
    void PutinsertType ( short _val );
    VARIANT_BOOL GetmultiLayer ( );
    void PutmultiLayer ( VARIANT_BOOL _val );
};

struct __declspec(uuid("7f7d6fb4-97da-11d6-8732-00c0262cdd2c"))
ksViewParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getscale_,put=Putscale_))
    double scale_;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=Getstate,put=Putstate))
    short state;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    double Getscale_ ( );
    void Putscale_ ( double _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    short Getstate ( );
    void Putstate ( short _val );
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
};

struct __declspec(uuid("7f7d6fb7-97da-11d6-8732-00c0262cdd2c"))
ksLBreakDimSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getx3,put=Putx3))
    double x3;
    __declspec(property(get=Gety3,put=Puty3))
    double y3;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    double Getx3 ( );
    void Putx3 ( double _val );
    double Gety3 ( );
    void Puty3 ( double _val );
};

struct __declspec(uuid("7f7d6fba-97da-11d6-8732-00c0262cdd2c"))
ksBreakDimDrawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getpl,put=Putpl))
    VARIANT_BOOL pl;
    __declspec(property(get=Getpt,put=Putpt))
    short pt;
    __declspec(property(get=GettextPos,put=PuttextPos))
    long textPos;
    __declspec(property(get=GetshelfDir,put=PutshelfDir))
    long shelfDir;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getlength,put=Putlength))
    long length;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    VARIANT_BOOL Getpl ( );
    void Putpl ( VARIANT_BOOL _val );
    short Getpt ( );
    void Putpt ( short _val );
    long GettextPos ( );
    void PuttextPos ( long _val );
    long GetshelfDir ( );
    void PutshelfDir ( long _val );
    double Getangle ( );
    void Putangle ( double _val );
    long Getlength ( );
    void Putlength ( long _val );
};

struct __declspec(uuid("7f7d6fbd-97da-11d6-8732-00c0262cdd2c"))
ksLBreakDimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6fc0-97da-11d6-8732-00c0262cdd2c"))
ksABreakDimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6fc3-97da-11d6-8732-00c0262cdd2c"))
ksInsertFragmentParamEx : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=GetinsertType,put=PutinsertType))
    short insertType;
    __declspec(property(get=GetmultiLayer,put=PutmultiLayer))
    VARIANT_BOOL multiLayer;
    __declspec(property(get=GetscaleProjLinesSize,put=PutscaleProjLinesSize))
    short scaleProjLinesSize;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetPlace ( );
    VARIANT_BOOL SetPlace (
        IDispatch * val );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    short GetinsertType ( );
    void PutinsertType ( short _val );
    VARIANT_BOOL GetmultiLayer ( );
    void PutmultiLayer ( VARIANT_BOOL _val );
    short GetscaleProjLinesSize ( );
    void PutscaleProjLinesSize ( short _val );
};

struct __declspec(uuid("7f7d6fc6-97da-11d6-8732-00c0262cdd2c"))
ksBezierParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getclosed,put=Putclosed))
    short closed;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetMathPointArr ( );
    VARIANT_BOOL SetMathPointArr (
        IDispatch * val );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    short Getclosed ( );
    void Putclosed ( short _val );
};

struct __declspec(uuid("7f7d6fc9-97da-11d6-8732-00c0262cdd2c"))
ksBezierPointParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getleft,put=Putleft))
    double left;
    __declspec(property(get=Getright,put=Putright))
    double right;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getang ( );
    void Putang ( double _val );
    double Getleft ( );
    void Putleft ( double _val );
    double Getright ( );
    void Putright ( double _val );
};

struct __declspec(uuid("7f7d6fcc-97da-11d6-8732-00c0262cdd2c"))
ksDimTextParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getsign,put=Putsign))
    long sign;
    __declspec(property(get=GetstringFlag,put=PutstringFlag))
    VARIANT_BOOL stringFlag;
    __declspec(property(get=GetbitFlag,put=PutbitFlag))
    long bitFlag;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init (
        VARIANT_BOOL stringFlag );
    VARIANT_BOOL GetBitFlagValue (
        long bitFlag );
    VARIANT_BOOL SetBitFlagValue (
        long val,
        VARIANT_BOOL state );
    IDispatchPtr GetTextArr ( );
    VARIANT_BOOL SetTextArr (
        IDispatch * val );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    long Getsign ( );
    void Putsign ( long _val );
    VARIANT_BOOL GetstringFlag ( );
    void PutstringFlag ( VARIANT_BOOL _val );
    long GetbitFlag ( );
    void PutbitFlag ( long _val );
};

struct __declspec(uuid("7f7d6fcf-97da-11d6-8732-00c0262cdd2c"))
ksLDimSourceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getdx,put=Putdx))
    double dx;
    __declspec(property(get=Getdy,put=Putdy))
    double dy;
    __declspec(property(get=Getps,put=Putps))
    short ps;
    __declspec(property(get=GetbasePoint,put=PutbasePoint))
    short basePoint;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    double Getdx ( );
    void Putdx ( double _val );
    double Getdy ( );
    void Putdy ( double _val );
    short Getps ( );
    void Putps ( short _val );
    short GetbasePoint ( );
    void PutbasePoint ( short _val );
};

struct __declspec(uuid("7f7d6fd2-97da-11d6-8732-00c0262cdd2c"))
ksDimDrawingParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getpl1,put=Putpl1))
    VARIANT_BOOL pl1;
    __declspec(property(get=Getpl2,put=Putpl2))
    VARIANT_BOOL pl2;
    __declspec(property(get=Getpt1,put=Putpt1))
    short pt1;
    __declspec(property(get=Getpt2,put=Putpt2))
    short pt2;
    __declspec(property(get=GettextPos,put=PuttextPos))
    long textPos;
    __declspec(property(get=GettextBase,put=PuttextBase))
    short textBase;
    __declspec(property(get=GetshelfDir,put=PutshelfDir))
    long shelfDir;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getlenght,put=Putlenght))
    long lenght;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    VARIANT_BOOL Getpl1 ( );
    void Putpl1 ( VARIANT_BOOL _val );
    VARIANT_BOOL Getpl2 ( );
    void Putpl2 ( VARIANT_BOOL _val );
    short Getpt1 ( );
    void Putpt1 ( short _val );
    short Getpt2 ( );
    void Putpt2 ( short _val );
    long GettextPos ( );
    void PuttextPos ( long _val );
    short GettextBase ( );
    void PuttextBase ( short _val );
    long GetshelfDir ( );
    void PutshelfDir ( long _val );
    double Getang ( );
    void Putang ( double _val );
    long Getlenght ( );
    void Putlenght ( long _val );
};

struct __declspec(uuid("7f7d6fd5-97da-11d6-8732-00c0262cdd2c"))
ksLDimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6fd8-97da-11d6-8732-00c0262cdd2c"))
ksADimSourceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getxc,put=Putxc))
    double xc;
    __declspec(property(get=Getyc,put=Putyc))
    double yc;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getang1,put=Putang1))
    double ang1;
    __declspec(property(get=Getang2,put=Putang2))
    double ang2;
    __declspec(property(get=Getdir,put=Putdir))
    long dir;
    __declspec(property(get=Getrad,put=Putrad))
    double rad;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getxc ( );
    void Putxc ( double _val );
    double Getyc ( );
    void Putyc ( double _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    double Getang1 ( );
    void Putang1 ( double _val );
    double Getang2 ( );
    void Putang2 ( double _val );
    long Getdir ( );
    void Putdir ( long _val );
    double Getrad ( );
    void Putrad ( double _val );
};

struct __declspec(uuid("7f7d6fdb-97da-11d6-8732-00c0262cdd2c"))
ksDimensionPartsParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getline1,put=Putline1))
    long line1;
    __declspec(property(get=Getline2,put=Putline2))
    long line2;
    __declspec(property(get=GetdimLine,put=PutdimLine))
    long dimLine;
    __declspec(property(get=GetdimLine1,put=PutdimLine1))
    long dimLine1;
    __declspec(property(get=Getleg,put=Putleg))
    long leg;
    __declspec(property(get=Getshelf,put=Putshelf))
    long shelf;
    __declspec(property(get=Getgr,put=Putgr))
    long gr;
    __declspec(property(get=GetcurveExt,put=PutcurveExt))
    long curveExt;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getline1 ( );
    void Putline1 ( long _val );
    long Getline2 ( );
    void Putline2 ( long _val );
    long GetdimLine ( );
    void PutdimLine ( long _val );
    long GetdimLine1 ( );
    void PutdimLine1 ( long _val );
    long Getleg ( );
    void Putleg ( long _val );
    long Getshelf ( );
    void Putshelf ( long _val );
    long Getgr ( );
    void Putgr ( long _val );
    long GetcurveExt ( );
    void PutcurveExt ( long _val );
};

struct __declspec(uuid("7f7d6fde-97da-11d6-8732-00c0262cdd2c"))
ksADimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6fe1-97da-11d6-8732-00c0262cdd2c"))
ksRBreakDrawingParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getpt,put=Putpt))
    short pt;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getpb,put=Putpb))
    long pb;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short Getpt ( );
    void Putpt ( short _val );
    double Getang ( );
    void Putang ( double _val );
    long Getpb ( );
    void Putpb ( long _val );
};

struct __declspec(uuid("7f7d6fe4-97da-11d6-8732-00c0262cdd2c"))
ksRBreakDimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("7f7d6fe7-97da-11d6-8732-00c0262cdd2c"))
ksQualityItemParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetminLimit,put=PutminLimit))
    short minLimit;
    __declspec(property(get=GetmaxLimit,put=PutmaxLimit))
    short maxLimit;
    __declspec(property(get=Gethigh,put=Puthigh))
    double high;
    __declspec(property(get=Getlow,put=Putlow))
    double low;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short GetminLimit ( );
    void PutminLimit ( short _val );
    short GetmaxLimit ( );
    void PutmaxLimit ( short _val );
    double Gethigh ( );
    void Puthigh ( double _val );
    double Getlow ( );
    void Putlow ( double _val );
};

struct __declspec(uuid("7f7d6fea-97da-11d6-8732-00c0262cdd2c"))
ksQualityContensParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsystemQuality,put=PutsystemQuality))
    short systemQuality;
    __declspec(property(get=GetkindQuality,put=PutkindQuality))
    short kindQuality;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetpQualityItems ( );
    VARIANT_BOOL SetpQualityItems (
        IDispatch * val );

    // Properties:
    short GetsystemQuality ( );
    void PutsystemQuality ( short _val );
    short GetkindQuality ( );
    void PutkindQuality ( short _val );
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
};

struct __declspec(uuid("d06c9101-98ca-11d6-8732-00c0262cdd2c"))
ksIterator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getreference,put=Putreference))
    long reference;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL ksCreateIterator (
        long tipSeartch,
        long parent );
    long ksMoveIterator (
        _bstr_t ksMoveIterator );
    VARIANT_BOOL ksCreateAttrIterator (
        long obj,
        long key1,
        long key2,
        long key3,
        long key4,
        double numb );
    long ksMoveAttrIterator (
        _bstr_t ch,
        long * pObj );
    VARIANT_BOOL ksCreateSpcIterator (
        _bstr_t nameLib,
        long styleNumb,
        long spcObjType );
    VARIANT_BOOL ksCreateQualityIterator (
        short system,
        short withLimitation );
    VARIANT_BOOL ksMoveQualityIterator (
        IDispatch * param,
        short inMM,
        _bstr_t ch );
    long ksDeleteIterator ( );

    // Properties:
    long Getreference ( );
    void Putreference ( long _val );
};

struct __declspec(uuid("d06c9104-98ca-11d6-8732-00c0262cdd2c"))
ksFragment : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ksFragmentDefinition (
        _bstr_t fileName,
        _bstr_t comment,
        short insertType );
    long ksInsertFragment (
        long p,
        VARIANT_BOOL curentLayer,
        IDispatch * par );
    long ksReadFragment (
        _bstr_t fileName,
        VARIANT_BOOL curentLayer,
        IDispatch * par );
    long ksReadFragmentToGroup (
        _bstr_t fileName,
        VARIANT_BOOL curentLayer,
        IDispatch * par );
    long ksReadFragmentToGroupEx (
        _bstr_t fileName,
        VARIANT_BOOL curentLayer,
        IDispatch * par,
        VARIANT_BOOL scaleProjLinesSize );
    long ksWriteFragment (
        long gr,
        _bstr_t fileName,
        _bstr_t comment,
        double xb,
        double yb );
    long ksLocalFragmentDefinition (
        _bstr_t comment );
    long ksCloseLocalFragmentDefinition ( );
    long ksInsertFragmentEx (
        long p,
        VARIANT_BOOL curentLayer,
        IDispatch * par,
        VARIANT_BOOL scaleProjLinesSize );
};

struct __declspec(uuid("d06c910a-98ca-11d6-8732-00c0262cdd2c"))
ksFragmentLibrary : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t ksChoiceFragmentFromLib (
        _bstr_t frwLibFile,
        long * type );
    long ksFragmentLibraryOperation (
        _bstr_t libName,
        long type );
    long ksAddFragmentToLibrary (
        _bstr_t libName,
        _bstr_t frwName );
    long ksCheckFragmentLibrary (
        _bstr_t libName,
        VARIANT_BOOL possibleMessage );
    long ksExistFragmentInLibrary (
        _bstr_t frwName );
};

struct __declspec(uuid("fbcc5b81-996c-11d6-8732-00c0262cdd2c"))
ksTechnicalDemandParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=GetstrCount,put=PutstrCount))
    short strCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetPGab ( );
    VARIANT_BOOL SetPGab (
        IDispatch * val );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    short GetstrCount ( );
    void PutstrCount ( short _val );
};

struct __declspec(uuid("fbcc5b84-996c-11d6-8732-00c0262cdd2c"))
ksOrdinatedSourceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx0,put=Putx0))
    double x0;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Gety0,put=Puty0))
    double y0;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    double Getx0 ( );
    void Putx0 ( double _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Gety0 ( );
    void Puty0 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
};

struct __declspec(uuid("fbcc5b87-996c-11d6-8732-00c0262cdd2c"))
ksOrdinatedDimParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetTPar ( );
    VARIANT_BOOL SetTPar (
        IDispatch * val );
    IDispatchPtr GetDPar ( );
    VARIANT_BOOL SetDPar (
        IDispatch * val );
    IDispatchPtr GetSPar ( );
    VARIANT_BOOL SetSPar (
        IDispatch * val );
};

struct __declspec(uuid("fbcc5b8a-996c-11d6-8732-00c0262cdd2c"))
ksOrdinatedDrawingParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype,put=Puttype))
    long type;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    long Gettype ( );
    void Puttype ( long _val );
};

struct __declspec(uuid("fbcc5b8d-996c-11d6-8732-00c0262cdd2c"))
ksSheetSize : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getwidth,put=Putwidth))
    double width;
    __declspec(property(get=Getheight,put=Putheight))
    double height;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double Getwidth ( );
    void Putwidth ( double _val );
    double Getheight ( );
    void Putheight ( double _val );
};

struct __declspec(uuid("fbcc5b90-996c-11d6-8732-00c0262cdd2c"))
ksStandartSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getformat,put=Putformat))
    short format;
    __declspec(property(get=Getmultiply,put=Putmultiply))
    short multiply;
    __declspec(property(get=Getdirect,put=Putdirect))
    VARIANT_BOOL direct;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short Getformat ( );
    void Putformat ( short _val );
    short Getmultiply ( );
    void Putmultiply ( short _val );
    VARIANT_BOOL Getdirect ( );
    void Putdirect ( VARIANT_BOOL _val );
};

struct __declspec(uuid("fbcc5b93-996c-11d6-8732-00c0262cdd2c"))
ksSheetPar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetlayoutName,put=PutlayoutName))
    _bstr_t layoutName;
    __declspec(property(get=GetshtType,put=PutshtType))
    short shtType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetSheetParam ( );

    // Properties:
    _bstr_t GetlayoutName ( );
    void PutlayoutName ( _bstr_t _val );
    short GetshtType ( );
    void PutshtType ( short _val );
};

struct __declspec(uuid("fbcc5b96-996c-11d6-8732-00c0262cdd2c"))
ksDocumentParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=Getauthor,put=Putauthor))
    _bstr_t author;
    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=Getregime,put=Putregime))
    short regime;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetLayoutParam ( );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    _bstr_t Getauthor ( );
    void Putauthor ( _bstr_t _val );
    short Gettype ( );
    void Puttype ( short _val );
    short Getregime ( );
    void Putregime ( short _val );
};

struct __declspec(uuid("fbcc5b99-996c-11d6-8732-00c0262cdd2c"))
ksDimensionsOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetproLineExtension,put=PutproLineExtension))
    double proLineExtension;
    __declspec(property(get=GettextDistanceFromDimLine,put=PuttextDistanceFromDimLine))
    double textDistanceFromDimLine;
    __declspec(property(get=GettextDistanceFromProLine,put=PuttextDistanceFromProLine))
    double textDistanceFromProLine;
    __declspec(property(get=GetdimLineExtension,put=PutdimLineExtension))
    double dimLineExtension;
    __declspec(property(get=GetarrowLength,put=PutarrowLength))
    double arrowLength;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=GetdecimalsCount,put=PutdecimalsCount))
    short decimalsCount;
    __declspec(property(get=GetanglePrecisionLevel,put=PutanglePrecisionLevel))
    long anglePrecisionLevel;
    __declspec(property(get=GethiddenToleranceNumber,put=PuthiddenToleranceNumber))
    long hiddenToleranceNumber;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetproLineExtension ( );
    void PutproLineExtension ( double _val );
    double GettextDistanceFromDimLine ( );
    void PuttextDistanceFromDimLine ( double _val );
    double GettextDistanceFromProLine ( );
    void PuttextDistanceFromProLine ( double _val );
    double GetdimLineExtension ( );
    void PutdimLineExtension ( double _val );
    double GetarrowLength ( );
    void PutarrowLength ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
    short GetdecimalsCount ( );
    void PutdecimalsCount ( short _val );
    long GetanglePrecisionLevel ( );
    void PutanglePrecisionLevel ( long _val );
    long GethiddenToleranceNumber ( );
    void PuthiddenToleranceNumber ( long _val );
};

struct __declspec(uuid("fbcc5b9c-996c-11d6-8732-00c0262cdd2c"))
ksSnapOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetnearestPoint,put=PutnearestPoint))
    VARIANT_BOOL nearestPoint;
    __declspec(property(get=GetnearestMiddle,put=PutnearestMiddle))
    VARIANT_BOOL nearestMiddle;
    __declspec(property(get=Getintersect,put=Putintersect))
    VARIANT_BOOL intersect;
    __declspec(property(get=GettangentToCurve,put=PuttangentToCurve))
    VARIANT_BOOL tangentToCurve;
    __declspec(property(get=GetnormalToCurve,put=PutnormalToCurve))
    VARIANT_BOOL normalToCurve;
    __declspec(property(get=Getgrid,put=Putgrid))
    VARIANT_BOOL grid;
    __declspec(property(get=GetxyAlign,put=PutxyAlign))
    VARIANT_BOOL xyAlign;
    __declspec(property(get=GetangSnap,put=PutangSnap))
    VARIANT_BOOL angSnap;
    __declspec(property(get=GetpointOnCurve,put=PutpointOnCurve))
    VARIANT_BOOL pointOnCurve;
    __declspec(property(get=GetcommonOpt,put=PutcommonOpt))
    long commonOpt;
    __declspec(property(get=GetangleStep,put=PutangleStep))
    double angleStep;
    __declspec(property(get=GetlocalSnap,put=PutlocalSnap))
    short localSnap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    VARIANT_BOOL GetCommonOptValue (
        long val );
    VARIANT_BOOL SetCommonOptValue (
        long val,
        VARIANT_BOOL state );

    // Properties:
    VARIANT_BOOL GetnearestPoint ( );
    void PutnearestPoint ( VARIANT_BOOL _val );
    VARIANT_BOOL GetnearestMiddle ( );
    void PutnearestMiddle ( VARIANT_BOOL _val );
    VARIANT_BOOL Getintersect ( );
    void Putintersect ( VARIANT_BOOL _val );
    VARIANT_BOOL GettangentToCurve ( );
    void PuttangentToCurve ( VARIANT_BOOL _val );
    VARIANT_BOOL GetnormalToCurve ( );
    void PutnormalToCurve ( VARIANT_BOOL _val );
    VARIANT_BOOL Getgrid ( );
    void Putgrid ( VARIANT_BOOL _val );
    VARIANT_BOOL GetxyAlign ( );
    void PutxyAlign ( VARIANT_BOOL _val );
    VARIANT_BOOL GetangSnap ( );
    void PutangSnap ( VARIANT_BOOL _val );
    VARIANT_BOOL GetpointOnCurve ( );
    void PutpointOnCurve ( VARIANT_BOOL _val );
    long GetcommonOpt ( );
    void PutcommonOpt ( long _val );
    double GetangleStep ( );
    void PutangleStep ( double _val );
    short GetlocalSnap ( );
    void PutlocalSnap ( short _val );
};

struct __declspec(uuid("fbcc5b9f-996c-11d6-8732-00c0262cdd2c"))
ksLibraryStyleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetstyleName,put=PutstyleName))
    _bstr_t styleName;
    __declspec(property(get=GetstyleId,put=PutstyleId))
    long styleId;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t GetstyleName ( );
    void PutstyleName ( _bstr_t _val );
    long GetstyleId ( );
    void PutstyleId ( long _val );
};

struct __declspec(uuid("404e7d5a-a13f-4cff-8214-fea7012110cb"))
ksStampNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginEditStamp ( );
    VARIANT_BOOL EndEditStamp (
        VARIANT_BOOL editResult );
    VARIANT_BOOL StampCellDblClick (
        long number );
    VARIANT_BOOL StampCellBeginEdit (
        long number );
    VARIANT_BOOL StampBeginClearCells (
        const _variant_t & cells );
};

struct __declspec(uuid("fbcc5ba5-996c-11d6-8732-00c0262cdd2c"))
ksStamp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSheetNumb))
    long SheetNumb;
    __declspec(property(get=Getreference,put=Putreference))
    long reference;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ksOpenStamp ( );
    long ksCloseStamp ( );
    long ksClearStamp (
        long numb );
    IDispatchPtr ksGetStampColumnText (
        long * numb );
    long ksSetStampColumnText (
        long numb,
        IDispatch * textArr );
    long ksColumnNumber (
        long numb );
    long ksTextLine (
        IDispatch * textItem );
    long ksSetTextLineAlign (
        short align );
    long GetSheetNumb ( );

    // Properties:
    long Getreference ( );
    void Putreference ( long _val );
};

struct __declspec(uuid("fbcc5ba8-996c-11d6-8732-00c0262cdd2c"))
ksSheetOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetshtType,put=PutshtType))
    short shtType;
    __declspec(property(get=GetlayoutName,put=PutlayoutName))
    _bstr_t layoutName;
    __declspec(property(get=GetsheetType,put=PutsheetType))
    VARIANT_BOOL sheetType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetSheetParam (
        VARIANT_BOOL type );

    // Properties:
    short GetshtType ( );
    void PutshtType ( short _val );
    _bstr_t GetlayoutName ( );
    void PutlayoutName ( _bstr_t _val );
    VARIANT_BOOL GetsheetType ( );
    void PutsheetType ( VARIANT_BOOL _val );
};

struct __declspec(uuid("910ec549-958d-11d6-95ce-00c0262d30e3"))
ksCurvePatternEx : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetvisibleSeg,put=PutvisibleSeg))
    double visibleSeg;
    __declspec(property(get=GetinvisibleSeg,put=PutinvisibleSeg))
    double invisibleSeg;
    __declspec(property(get=Getdx,put=Putdx))
    double dx;
    __declspec(property(get=Getdy,put=Putdy))
    double dy;
    __declspec(property(get=GetpictureType,put=PutpictureType))
    short pictureType;
    __declspec(property(get=GetfrwName,put=PutfrwName))
    _bstr_t frwName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetCurvePicture ( );
    VARIANT_BOOL SetCurvePicture (
        IDispatch * picture );

    // Properties:
    double GetvisibleSeg ( );
    void PutvisibleSeg ( double _val );
    double GetinvisibleSeg ( );
    void PutinvisibleSeg ( double _val );
    double Getdx ( );
    void Putdx ( double _val );
    double Getdy ( );
    void Putdy ( double _val );
    short GetpictureType ( );
    void PutpictureType ( short _val );
    _bstr_t GetfrwName ( );
    void PutfrwName ( _bstr_t _val );
};

struct __declspec(uuid("910ec54c-958d-11d6-95ce-00c0262d30e3"))
ksCurveStyleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=GetpaperWidth,put=PutpaperWidth))
    double paperWidth;
    __declspec(property(get=GetscreenWidth,put=PutscreenWidth))
    short screenWidth;
    __declspec(property(get=GetcurveType,put=PutcurveType))
    short curveType;
    __declspec(property(get=Geteven,put=Puteven))
    short even;
    __declspec(property(get=GetwidthPen,put=PutwidthPen))
    short widthPen;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPPattern (
        long type );
    VARIANT_BOOL SetPPattern (
        IDispatch * pattern );
    VARIANT_BOOL SetPropertyCurve (
        long val,
        VARIANT_BOOL state );
    VARIANT_BOOL GetPropertyCurve (
        long val );
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    double GetpaperWidth ( );
    void PutpaperWidth ( double _val );
    short GetscreenWidth ( );
    void PutscreenWidth ( short _val );
    short GetcurveType ( );
    void PutcurveType ( short _val );
    short Geteven ( );
    void Puteven ( short _val );
    short GetwidthPen ( );
    void PutwidthPen ( short _val );
};

struct __declspec(uuid("3f715e24-97d9-11d6-95ce-00c0262d30e3"))
ksTextStyleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=Getksu,put=Putksu))
    double ksu;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=GetfontName,put=PutfontName))
    _bstr_t fontName;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=Getalign,put=Putalign))
    short align;
    __declspec(property(get=Getbold,put=Putbold))
    short bold;
    __declspec(property(get=Getitalic,put=Putitalic))
    short italic;
    __declspec(property(get=Getunderline,put=Putunderline))
    short underline;
    __declspec(property(get=GetposKS,put=PutposKS))
    double posKS;
    __declspec(property(get=GetstepParPre,put=PutstepParPre))
    double stepParPre;
    __declspec(property(get=GetstepParPst,put=PutstepParPst))
    double stepParPst;
    __declspec(property(get=GetleftEdge,put=PutleftEdge))
    double leftEdge;
    __declspec(property(get=GetrightEdge,put=PutrightEdge))
    double rightEdge;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    double Getheight ( );
    void Putheight ( double _val );
    double Getksu ( );
    void Putksu ( double _val );
    double Getstep ( );
    void Putstep ( double _val );
    _bstr_t GetfontName ( );
    void PutfontName ( _bstr_t _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    short Getalign ( );
    void Putalign ( short _val );
    short Getbold ( );
    void Putbold ( short _val );
    short Getitalic ( );
    void Putitalic ( short _val );
    short Getunderline ( );
    void Putunderline ( short _val );
    double GetposKS ( );
    void PutposKS ( double _val );
    double GetstepParPre ( );
    void PutstepParPre ( double _val );
    double GetstepParPst ( );
    void PutstepParPst ( double _val );
    double GetleftEdge ( );
    void PutleftEdge ( double _val );
    double GetrightEdge ( );
    void PutrightEdge ( double _val );
};

struct __declspec(uuid("3f715e27-97d9-11d6-95ce-00c0262d30e3"))
ksHatchLineParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getdx,put=Putdx))
    double dx;
    __declspec(property(get=Getdy,put=Putdy))
    double dy;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=GettypeCurvStyle,put=PuttypeCurvStyle))
    short typeCurvStyle;
    __declspec(property(get=Getstyle,put=Putstyle))
    short style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetCurPar ( );
    VARIANT_BOOL SetCurPar (
        IDispatch * curPar );
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getdx ( );
    void Putdx ( double _val );
    double Getdy ( );
    void Putdy ( double _val );
    double Getang ( );
    void Putang ( double _val );
    short GettypeCurvStyle ( );
    void PuttypeCurvStyle ( short _val );
    short Getstyle ( );
    void Putstyle ( short _val );
};

struct __declspec(uuid("3f715e2a-97d9-11d6-95ce-00c0262d30e3"))
ksHatchStyleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getwidth,put=Putwidth))
    double width;
    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=GetmayChangeAngle,put=PutmayChangeAngle))
    short mayChangeAngle;
    __declspec(property(get=GetmayChangeWidth,put=PutmayChangeWidth))
    short mayChangeWidth;
    __declspec(property(get=GetmayChangeSpace,put=PutmayChangeSpace))
    short mayChangeSpace;
    __declspec(property(get=GetisScalable,put=PutisScalable))
    short isScalable;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetRefPoint ( );
    VARIANT_BOOL SetRefPoint (
        IDispatch * refPoint );
    IDispatchPtr GetArrLineParam ( );
    VARIANT_BOOL SetArrLineParam (
        IDispatch * arrLineParam );
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    double Getstep ( );
    void Putstep ( double _val );
    double Getang ( );
    void Putang ( double _val );
    double Getwidth ( );
    void Putwidth ( double _val );
    long Getcolor ( );
    void Putcolor ( long _val );
    short GetmayChangeAngle ( );
    void PutmayChangeAngle ( short _val );
    short GetmayChangeWidth ( );
    void PutmayChangeWidth ( short _val );
    short GetmayChangeSpace ( );
    void PutmayChangeSpace ( short _val );
    short GetisScalable ( );
    void PutisScalable ( short _val );
};

struct __declspec(uuid("3f715e2d-97d9-11d6-95ce-00c0262d30e3"))
ksRectParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpBot ( );
    VARIANT_BOOL SetpBot (
        IDispatch * pBot );
    IDispatchPtr GetpTop ( );
    VARIANT_BOOL SetpTop (
        IDispatch * pTop );
};

struct __declspec(uuid("3f715e30-97d9-11d6-95ce-00c0262d30e3"))
ksShelfPar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getpsh,put=Putpsh))
    long psh;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=Getlength,put=Putlength))
    long length;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getpsh ( );
    void Putpsh ( long _val );
    double Getang ( );
    void Putang ( double _val );
    long Getlength ( );
    void Putlength ( long _val );
};

struct __declspec(uuid("3f715e33-97d9-11d6-95ce-00c0262d30e3"))
ksRoughPar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=Getaround,put=Putaround))
    short around;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getang,put=Putang))
    double ang;
    __declspec(property(get=GetcText0,put=PutcText0))
    short cText0;
    __declspec(property(get=GetcText1,put=PutcText1))
    short cText1;
    __declspec(property(get=GetcText2,put=PutcText2))
    short cText2;
    __declspec(property(get=GetcText3,put=PutcText3))
    short cText3;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpText ( );
    VARIANT_BOOL SetpText (
        IDispatch * pText );
    VARIANT_BOOL Init ( );
    VARIANT_BOOL InitEx (
        long style );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    short Gettype ( );
    void Puttype ( short _val );
    short Getaround ( );
    void Putaround ( short _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getang ( );
    void Putang ( double _val );
    short GetcText0 ( );
    void PutcText0 ( short _val );
    short GetcText1 ( );
    void PutcText1 ( short _val );
    short GetcText2 ( );
    void PutcText2 ( short _val );
    short GetcText3 ( );
    void PutcText3 ( short _val );
};

struct __declspec(uuid("3f715e36-97d9-11d6-95ce-00c0262d30e3"))
ksRoughParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetrPar ( );
    VARIANT_BOOL SetrPar (
        IDispatch * par );
    IDispatchPtr GetshPar ( );
    VARIANT_BOOL SetshPar (
        IDispatch * shPar );
};

struct __declspec(uuid("3f715e39-97d9-11d6-95ce-00c0262d30e3"))
ksChar255 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstr,put=Putstr))
    _bstr_t str;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t Getstr ( );
    void Putstr ( _bstr_t _val );
};

struct __declspec(uuid("3f715e40-97d9-11d6-95ce-00c0262d30e3"))
ksLeaderParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetarrowType,put=PutarrowType))
    short arrowType;
    __declspec(property(get=GetdirX,put=PutdirX))
    long dirX;
    __declspec(property(get=GetsignType,put=PutsignType))
    short signType;
    __declspec(property(get=Getaround,put=Putaround))
    short around;
    __declspec(property(get=GetcText0,put=PutcText0))
    short cText0;
    __declspec(property(get=GetcText1,put=PutcText1))
    short cText1;
    __declspec(property(get=GetcText2,put=PutcText2))
    short cText2;
    __declspec(property(get=GetcText3,put=PutcText3))
    short cText3;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * pTextLine );
    IDispatchPtr GetpPolyline ( );
    VARIANT_BOOL SetpPolyline (
        IDispatch * pPolyline );
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    short GetarrowType ( );
    void PutarrowType ( short _val );
    long GetdirX ( );
    void PutdirX ( long _val );
    short GetsignType ( );
    void PutsignType ( short _val );
    short Getaround ( );
    void Putaround ( short _val );
    short GetcText0 ( );
    void PutcText0 ( short _val );
    short GetcText1 ( );
    void PutcText1 ( short _val );
    short GetcText2 ( );
    void PutcText2 ( short _val );
    short GetcText3 ( );
    void PutcText3 ( short _val );
};

struct __declspec(uuid("3f715e43-97d9-11d6-95ce-00c0262d30e3"))
ksPosLeaderParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetarrowType,put=PutarrowType))
    short arrowType;
    __declspec(property(get=GetdirX,put=PutdirX))
    long dirX;
    __declspec(property(get=GetdirY,put=PutdirY))
    long dirY;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * textline );
    IDispatchPtr GetpPolyline ( );
    VARIANT_BOOL SetpPolyline (
        IDispatch * polyline );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    short GetarrowType ( );
    void PutarrowType ( short _val );
    long GetdirX ( );
    void PutdirX ( long _val );
    long GetdirY ( );
    void PutdirY ( long _val );
};

struct __declspec(uuid("3f715e46-97d9-11d6-95ce-00c0262d30e3"))
ksBrandLeaderParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirX,put=PutdirX))
    long dirX;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetarrowType,put=PutarrowType))
    short arrowType;
    __declspec(property(get=Getstyle1,put=Putstyle1))
    long style1;
    __declspec(property(get=Getstyle2,put=Putstyle2))
    long style2;
    __declspec(property(get=GetcText0,put=PutcText0))
    short cText0;
    __declspec(property(get=GetcText1,put=PutcText1))
    short cText1;
    __declspec(property(get=GetcText2,put=PutcText2))
    long cText2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * pTextLine );
    IDispatchPtr GetpPolyline ( );
    VARIANT_BOOL SetpPolyline (
        IDispatch * pPolyline );
    VARIANT_BOOL Init ( );

    // Properties:
    long GetdirX ( );
    void PutdirX ( long _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    short GetarrowType ( );
    void PutarrowType ( short _val );
    long Getstyle1 ( );
    void Putstyle1 ( long _val );
    long Getstyle2 ( );
    void Putstyle2 ( long _val );
    short GetcText0 ( );
    void PutcText0 ( short _val );
    short GetcText1 ( );
    void PutcText1 ( short _val );
    long GetcText2 ( );
    void PutcText2 ( long _val );
};

struct __declspec(uuid("9af8e341-98a0-11d6-95ce-00c0262d30e3"))
ksMarkerLeaderParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetarrowType,put=PutarrowType))
    short arrowType;
    __declspec(property(get=Getstyle1,put=Putstyle1))
    long style1;
    __declspec(property(get=Getstyle2,put=Putstyle2))
    long style2;
    __declspec(property(get=GetcText0,put=PutcText0))
    short cText0;
    __declspec(property(get=GetcText1,put=PutcText1))
    short cText1;
    __declspec(property(get=GetcText2,put=PutcText2))
    short cText2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * pTextLine );
    IDispatchPtr GetpPolyline ( );
    VARIANT_BOOL SetpPolyline (
        IDispatch * pPolyline );
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    short GetarrowType ( );
    void PutarrowType ( short _val );
    long Getstyle1 ( );
    void Putstyle1 ( long _val );
    long Getstyle2 ( );
    void Putstyle2 ( long _val );
    short GetcText0 ( );
    void PutcText0 ( short _val );
    short GetcText1 ( );
    void PutcText1 ( short _val );
    short GetcText2 ( );
    void PutcText2 ( short _val );
};

struct __declspec(uuid("9af8e344-98a0-11d6-95ce-00c0262d30e3"))
ksType1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetxBase,put=PutxBase))
    double xBase;
    __declspec(property(get=GetyBase,put=PutyBase))
    double yBase;
    __declspec(property(get=Getscale_,put=Putscale_))
    double scale_;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getgr,put=Putgr))
    long gr;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetxBase ( );
    void PutxBase ( double _val );
    double GetyBase ( );
    void PutyBase ( double _val );
    double Getscale_ ( );
    void Putscale_ ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    long Getgr ( );
    void Putgr ( long _val );
};

struct __declspec(uuid("9af8e347-98a0-11d6-95ce-00c0262d30e3"))
ksType2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetxBase,put=PutxBase))
    double xBase;
    __declspec(property(get=GetyBase,put=PutyBase))
    double yBase;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetxBase ( );
    void PutxBase ( double _val );
    double GetyBase ( );
    void PutyBase ( double _val );
};

struct __declspec(uuid("9af8e34a-98a0-11d6-95ce-00c0262d30e3"))
ksType3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetxBase,put=PutxBase))
    double xBase;
    __declspec(property(get=GetyBase,put=PutyBase))
    double yBase;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetxBase ( );
    void PutxBase ( double _val );
    double GetyBase ( );
    void PutyBase ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
};

struct __declspec(uuid("9af8e34d-98a0-11d6-95ce-00c0262d30e3"))
ksType5 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetxBase,put=PutxBase))
    double xBase;
    __declspec(property(get=GetyBase,put=PutyBase))
    double yBase;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Gethorizon,put=Puthorizon))
    VARIANT_BOOL horizon;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    double GetxBase ( );
    void PutxBase ( double _val );
    double GetyBase ( );
    void PutyBase ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    VARIANT_BOOL Gethorizon ( );
    void Puthorizon ( VARIANT_BOOL _val );
};

struct __declspec(uuid("9af8e350-98a0-11d6-95ce-00c0262d30e3"))
ksType6 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getgr,put=Putgr))
    long gr;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getgr ( );
    void Putgr ( long _val );
};

struct __declspec(uuid("9af8e353-98a0-11d6-95ce-00c0262d30e3"))
ksPhantom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getphantom,put=Putphantom))
    short phantom;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPhantomParam ( );
    VARIANT_BOOL Init ( );

    // Properties:
    short Getphantom ( );
    void Putphantom ( short _val );
};

struct __declspec(uuid("9af8e356-98a0-11d6-95ce-00c0262d30e3"))
ksRequestInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getprompt,put=Putprompt))
    _bstr_t prompt;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetcommandsString,put=PutcommandsString))
    _bstr_t commandsString;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=Getdynamic,put=Putdynamic))
    long dynamic;
    __declspec(property(get=GetcommInstance,put=PutcommInstance))
    long commInstance;
    __declspec(property(get=GetmenuId,put=PutmenuId))
    long menuId;
    __declspec(property(get=GettitleId,put=PuttitleId))
    long titleId;
    __declspec(property(get=GetpromptId,put=PutpromptId))
    long promptId;
    __declspec(property(get=GetcursorId,put=PutcursorId))
    long cursorId;
    __declspec(property(get=GetcommInstanceEx,put=PutcommInstanceEx))
    _variant_t commInstanceEx;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetCallBackC ( );
    VARIANT_BOOL SetCallBackC (
        _bstr_t methodName,
        long hInst,
        IDispatch * dispatchOCX );
    _bstr_t GetCallBackP ( );
    VARIANT_BOOL SetCallBackP (
        _bstr_t methodName,
        long hInst,
        IDispatch * dispatchOCX );
    _bstr_t GetCallBackCm ( );
    VARIANT_BOOL SetCallBackCm (
        _bstr_t methodName,
        long hInst,
        IDispatch * dispatchOCX );
    VARIANT_BOOL Init ( );
    VARIANT_BOOL SetCursorText (
        _bstr_t text );
    VARIANT_BOOL SetCallBackCEx (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );
    VARIANT_BOOL SetCallBackPEx (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );
    VARIANT_BOOL SetCallBackCmEx (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );

    // Properties:
    _bstr_t Getprompt ( );
    void Putprompt ( _bstr_t _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _bstr_t GetcommandsString ( );
    void PutcommandsString ( _bstr_t _val );
    _bstr_t Getcursor ( );
    void Putcursor ( _bstr_t _val );
    long Getdynamic ( );
    void Putdynamic ( long _val );
    long GetcommInstance ( );
    void PutcommInstance ( long _val );
    long GetmenuId ( );
    void PutmenuId ( long _val );
    long GettitleId ( );
    void PuttitleId ( long _val );
    long GetpromptId ( );
    void PutpromptId ( long _val );
    long GetcursorId ( );
    void PutcursorId ( long _val );
    _variant_t GetcommInstanceEx ( );
    void PutcommInstanceEx ( const _variant_t & _val );
};

struct __declspec(uuid("cd1c0144-98dc-11d6-95ce-00c0262d30e3"))
ksViewPointerParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Getxt,put=Putxt))
    double xt;
    __declspec(property(get=Getyt,put=Putyt))
    double yt;
    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=Getstr,put=Putstr))
    _bstr_t str;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * pTextLine );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    double Getxt ( );
    void Putxt ( double _val );
    double Getyt ( );
    void Putyt ( double _val );
    short Gettype ( );
    void Puttype ( short _val );
    _bstr_t Getstr ( );
    void Putstr ( _bstr_t _val );
};

struct __declspec(uuid("4fd7ce81-9968-11d6-95ce-00c0262d30e3"))
ksCutLineParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getright,put=Putright))
    short right;
    __declspec(property(get=Getx1,put=Putx1))
    double x1;
    __declspec(property(get=Gety1,put=Puty1))
    double y1;
    __declspec(property(get=Getx2,put=Putx2))
    double x2;
    __declspec(property(get=Gety2,put=Puty2))
    double y2;
    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=Getstr,put=Putstr))
    _bstr_t str;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * pTextLine );
    IDispatchPtr GetpMathPoint ( );
    VARIANT_BOOL SetpMathPoint (
        IDispatch * pMathPoint );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    short Getright ( );
    void Putright ( short _val );
    double Getx1 ( );
    void Putx1 ( double _val );
    double Gety1 ( );
    void Puty1 ( double _val );
    double Getx2 ( );
    void Putx2 ( double _val );
    double Gety2 ( );
    void Puty2 ( double _val );
    short Gettype ( );
    void Puttype ( short _val );
    _bstr_t Getstr ( );
    void Putstr ( _bstr_t _val );
};

struct __declspec(uuid("4fd7ce84-9968-11d6-95ce-00c0262d30e3"))
ksToleranceBranch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetarrowType,put=PutarrowType))
    short arrowType;
    __declspec(property(get=GettCorner,put=PuttCorner))
    short tCorner;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpMathPoint ( );
    VARIANT_BOOL SetpMathPoint (
        IDispatch * pMathPoint );
    VARIANT_BOOL Init ( );

    // Properties:
    short GetarrowType ( );
    void PutarrowType ( short _val );
    short GettCorner ( );
    void PuttCorner ( short _val );
};

struct __declspec(uuid("4fd7ce87-9968-11d6-95ce-00c0262d30e3"))
ksToleranceParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettBase,put=PuttBase))
    short tBase;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Gettype,put=Puttype))
    short type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetBranchArr ( );
    VARIANT_BOOL SetBranchArr (
        IDispatch * branchArr );
    VARIANT_BOOL Init ( );

    // Properties:
    short GettBase ( );
    void PuttBase ( short _val );
    long Getstyle ( );
    void Putstyle ( long _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    short Gettype ( );
    void Puttype ( short _val );
};

struct __declspec(uuid("4fd7ce8a-9968-11d6-95ce-00c0262d30e3"))
ksSpcColumnParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcolumnType,put=PutcolumnType))
    long columnType;
    __declspec(property(get=Getispoln,put=Putispoln))
    long ispoln;
    __declspec(property(get=Getblock,put=Putblock))
    long block;
    __declspec(property(get=GettypeVal,put=PuttypeVal))
    long typeVal;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long GetcolumnType ( );
    void PutcolumnType ( long _val );
    long Getispoln ( );
    void Putispoln ( long _val );
    long Getblock ( );
    void Putblock ( long _val );
    long GettypeVal ( );
    void PuttypeVal ( long _val );
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
};

struct __declspec(uuid("4fd7ce8d-9968-11d6-95ce-00c0262d30e3"))
ksRecordTypeAttrParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetattrLibName))
    _bstr_t attrLibName;
    __declspec(property(get=Getkey1))
    long key1;
    __declspec(property(get=Getkey2))
    long key2;
    __declspec(property(get=Getkey3))
    long key3;
    __declspec(property(get=Getkey4))
    long key4;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetattrLibName ( );
    long Getkey1 ( );
    long Getkey2 ( );
    long Getkey3 ( );
    long Getkey4 ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7ce90-9968-11d6-95ce-00c0262d30e3"))
ksNumberTypeAttrParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetminValue))
    double minValue;
    __declspec(property(get=GetmaxValue))
    double maxValue;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetminValue ( );
    double GetmaxValue ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7ce93-9968-11d6-95ce-00c0262d30e3"))
ksSpcStyleColumnParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetnameColumn))
    _bstr_t nameColumn;
    __declspec(property(get=GetcolumnType))
    long columnType;
    __declspec(property(get=Getispoln))
    long ispoln;
    __declspec(property(get=Getedit))
    short edit;
    __declspec(property(get=GetcreateSum))
    short createSum;
    __declspec(property(get=GetmultiplyToCount))
    short multiplyToCount;
    __declspec(property(get=GetuseForSectionTitle))
    short useForSectionTitle;
    __declspec(property(get=GettextDn))
    short textDn;
    __declspec(property(get=GetlinkId))
    long linkId;
    __declspec(property(get=GettypeVal))
    long typeVal;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetnameColumn ( );
    long GetcolumnType ( );
    long Getispoln ( );
    short Getedit ( );
    short GetcreateSum ( );
    short GetmultiplyToCount ( );
    short GetuseForSectionTitle ( );
    short GettextDn ( );
    long GetlinkId ( );
    long GettypeVal ( );
    IDispatchPtr GetAdditionalParam ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7ce96-9968-11d6-95ce-00c0262d30e3"))
ksSpcStyleSectionParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsectionName))
    _bstr_t sectionName;
    __declspec(property(get=Getnumber))
    long number;
    __declspec(property(get=GetsortColumnType))
    long sortColumnType;
    __declspec(property(get=GetsortIspoln))
    long sortIspoln;
    __declspec(property(get=GetdataType))
    short dataType;
    __declspec(property(get=GetsortType))
    long sortType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetsectionName ( );
    long Getnumber ( );
    long GetsortColumnType ( );
    long GetsortIspoln ( );
    short GetdataType ( );
    long GetsortType ( );
    IDispatchPtr GetArrColumn ( );
    IDispatchPtr GetArrAdditionalColumn ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7ce99-9968-11d6-95ce-00c0262d30e3"))
ksSpcSubSectionParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getnumber))
    long number;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t Getname ( );
    long Getnumber ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7ce9c-9968-11d6-95ce-00c0262d30e3"))
ksSpcTuningSectionParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsubsectionOn))
    short subsectionOn;
    __declspec(property(get=GetgeometryOn))
    short geometryOn;
    __declspec(property(get=GetpositionOn))
    short positionOn;
    __declspec(property(get=GetsortOn))
    short sortOn;
    __declspec(property(get=GetfirstOnSheet))
    short firstOnSheet;
    __declspec(property(get=GetrezervCount))
    long rezervCount;
    __declspec(property(get=Getnumber))
    long number;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    short GetsubsectionOn ( );
    short GetgeometryOn ( );
    short GetpositionOn ( );
    short GetsortOn ( );
    short GetfirstOnSheet ( );
    long GetrezervCount ( );
    long Getnumber ( );
    IDispatchPtr GetArrSubSection ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7ce9f-9968-11d6-95ce-00c0262d30e3"))
ksSpcTuningStyleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetgrToSP,put=PutgrToSP))
    short grToSP;
    __declspec(property(get=GetzoneCalc,put=PutzoneCalc))
    short zoneCalc;
    __declspec(property(get=GetshowSectionName,put=PutshowSectionName))
    short showSectionName;
    __declspec(property(get=GetpositionCalc,put=PutpositionCalc))
    short positionCalc;
    __declspec(property(get=GetgeometryDel,put=PutgeometryDel))
    short geometryDel;
    __declspec(property(get=GetpositionDel,put=PutpositionDel))
    short positionDel;
    __declspec(property(get=GetmassCalc,put=PutmassCalc))
    short massCalc;
    __declspec(property(get=GetdisableEmptyStr,put=PutdisableEmptyStr))
    short disableEmptyStr;
    __declspec(property(get=GetinsertNull,put=PutinsertNull))
    short insertNull;
    __declspec(property(get=GetinsertDash,put=PutinsertDash))
    short insertDash;
    __declspec(property(get=GetdisableEmptyBlockStr,put=PutdisableEmptyBlockStr))
    short disableEmptyBlockStr;
    __declspec(property(get=GetshowInfoByDetBlock,put=PutshowInfoByDetBlock))
    short showInfoByDetBlock;
    __declspec(property(get=GetispolnOn,put=PutispolnOn))
    short ispolnOn;
    __declspec(property(get=GetispolnMarkFull,put=PutispolnMarkFull))
    short ispolnMarkFull;
    __declspec(property(get=GetblocOnNewPage,put=PutblocOnNewPage))
    short blocOnNewPage;
    __declspec(property(get=GetuserTextStyle,put=PutuserTextStyle))
    short userTextStyle;
    __declspec(property(get=GetcountIspoln,put=PutcountIspoln))
    short countIspoln;
    __declspec(property(get=GetcountBlock,put=PutcountBlock))
    short countBlock;
    __declspec(property(get=GetpredefinedTextFileName,put=PutpredefinedTextFileName))
    _bstr_t predefinedTextFileName;
    __declspec(property(get=GetdelSpcObjOnDelGeometry,put=PutdelSpcObjOnDelGeometry))
    short delSpcObjOnDelGeometry;
    __declspec(property(get=GetcopySpcObjOnCopyGeometry,put=PutcopySpcObjOnCopyGeometry))
    short copySpcObjOnCopyGeometry;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetSectionTextStyleFirst ( );
    IDispatchPtr GetSectionTextStyleNext ( );
    IDispatchPtr GetObjectTextStyle ( );
    IDispatchPtr GetArrSection ( );
    VARIANT_BOOL Init ( );
    VARIANT_BOOL SetSectionTextStyleFirst (
        IDispatch * style );
    VARIANT_BOOL SetSectionTextStyleNext (
        IDispatch * style );
    VARIANT_BOOL SetObjectTextStyle (
        IDispatch * style );
    VARIANT_BOOL SetArrSection (
        IDispatch * arr );

    // Properties:
    short GetgrToSP ( );
    void PutgrToSP ( short _val );
    short GetzoneCalc ( );
    void PutzoneCalc ( short _val );
    short GetshowSectionName ( );
    void PutshowSectionName ( short _val );
    short GetpositionCalc ( );
    void PutpositionCalc ( short _val );
    short GetgeometryDel ( );
    void PutgeometryDel ( short _val );
    short GetpositionDel ( );
    void PutpositionDel ( short _val );
    short GetmassCalc ( );
    void PutmassCalc ( short _val );
    short GetdisableEmptyStr ( );
    void PutdisableEmptyStr ( short _val );
    short GetinsertNull ( );
    void PutinsertNull ( short _val );
    short GetinsertDash ( );
    void PutinsertDash ( short _val );
    short GetdisableEmptyBlockStr ( );
    void PutdisableEmptyBlockStr ( short _val );
    short GetshowInfoByDetBlock ( );
    void PutshowInfoByDetBlock ( short _val );
    short GetispolnOn ( );
    void PutispolnOn ( short _val );
    short GetispolnMarkFull ( );
    void PutispolnMarkFull ( short _val );
    short GetblocOnNewPage ( );
    void PutblocOnNewPage ( short _val );
    short GetuserTextStyle ( );
    void PutuserTextStyle ( short _val );
    short GetcountIspoln ( );
    void PutcountIspoln ( short _val );
    short GetcountBlock ( );
    void PutcountBlock ( short _val );
    _bstr_t GetpredefinedTextFileName ( );
    void PutpredefinedTextFileName ( _bstr_t _val );
    short GetdelSpcObjOnDelGeometry ( );
    void PutdelSpcObjOnDelGeometry ( short _val );
    short GetcopySpcObjOnCopyGeometry ( );
    void PutcopySpcObjOnCopyGeometry ( short _val );
};

struct __declspec(uuid("4fd7cea2-9968-11d6-95ce-00c0262d30e3"))
ksSpcStyleParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetlayoutName1))
    _bstr_t layoutName1;
    __declspec(property(get=GetlayoutName2))
    _bstr_t layoutName2;
    __declspec(property(get=GetshtType1))
    long shtType1;
    __declspec(property(get=GetshtType2))
    long shtType2;
    __declspec(property(get=Getvariant))
    short variant;
    __declspec(property(get=GetsectionOn))
    short sectionOn;
    __declspec(property(get=Gettype))
    short type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetlayoutName1 ( );
    _bstr_t GetlayoutName2 ( );
    long GetshtType1 ( );
    long GetshtType2 ( );
    short Getvariant ( );
    short GetsectionOn ( );
    short Gettype ( );
    IDispatchPtr GetTuning ( );
    IDispatchPtr GetArrColumn ( );
    IDispatchPtr GetArrAdditionalColumn ( );
    IDispatchPtr GetArrSection ( );
    IDispatchPtr GetSheetParam ( );
    VARIANT_BOOL Init ( );
};

struct __declspec(uuid("4fd7cea5-9968-11d6-95ce-00c0262d30e3"))
ksSpcDescrParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetlayoutName,put=PutlayoutName))
    _bstr_t layoutName;
    __declspec(property(get=GetstyleId,put=PutstyleId))
    long styleId;
    __declspec(property(get=GetspcName,put=PutspcName))
    _bstr_t spcName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t GetlayoutName ( );
    void PutlayoutName ( _bstr_t _val );
    long GetstyleId ( );
    void PutstyleId ( long _val );
    _bstr_t GetspcName ( );
    void PutspcName ( _bstr_t _val );
};

struct __declspec(uuid("4fd7cea8-9968-11d6-95ce-00c0262d30e3"))
ksDocAttachedSpcParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=Gettransmit,put=Puttransmit))
    short transmit;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    short Gettransmit ( );
    void Puttransmit ( short _val );
};

struct __declspec(uuid("4fd7ceab-9968-11d6-95ce-00c0262d30e3"))
ksSpcObjParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettypeObj))
    long typeObj;
    __declspec(property(get=GetnumbSection))
    long numbSection;
    __declspec(property(get=GetsubSectionName))
    _bstr_t subSectionName;
    __declspec(property(get=GetinsFrgType))
    short insFrgType;
    __declspec(property(get=GetFirst))
    short First;
    __declspec(property(get=GetblockNumber,put=PutblockNumber))
    long blockNumber;
    __declspec(property(get=GetnumbSubSection,put=PutnumbSubSection))
    long numbSubSection;
    __declspec(property(get=GetfirstOnSheet,put=PutfirstOnSheet))
    short firstOnSheet;
    __declspec(property(get=GetposInc,put=PutposInc))
    short posInc;
    __declspec(property(get=Getdraw,put=Putdraw))
    short draw;
    __declspec(property(get=GetposNotDraw,put=PutposNotDraw))
    short posNotDraw;
    __declspec(property(get=Getispoln,put=Putispoln))
    short ispoln;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetDocArr ( );
    VARIANT_BOOL SetDocArr (
        IDispatch * docArr );
    long GettypeObj ( );
    long GetnumbSection ( );
    _bstr_t GetsubSectionName ( );
    short GetinsFrgType ( );
    short GetFirst ( );
    VARIANT_BOOL Init ( );

    // Properties:
    long GetblockNumber ( );
    void PutblockNumber ( long _val );
    long GetnumbSubSection ( );
    void PutnumbSubSection ( long _val );
    short GetfirstOnSheet ( );
    void PutfirstOnSheet ( short _val );
    short GetposInc ( );
    void PutposInc ( short _val );
    short Getdraw ( );
    void Putdraw ( short _val );
    short GetposNotDraw ( );
    void PutposNotDraw ( short _val );
    short Getispoln ( );
    void Putispoln ( short _val );
};

struct __declspec(uuid("4fd7ceae-9968-11d6-95ce-00c0262d30e3"))
ksLibStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=GetstyleNumber,put=PutstyleNumber))
    long styleNumber;
    __declspec(property(get=GettypeAllocation,put=PuttypeAllocation))
    short typeAllocation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    long GetstyleNumber ( );
    void PutstyleNumber ( long _val );
    short GettypeAllocation ( );
    void PuttypeAllocation ( short _val );
};

struct __declspec(uuid("0981cd01-9a49-11d6-8732-00c0262cdd2c"))
ksDataBaseObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ksRelation (
        long db );
    VARIANT_BOOL ksEndRelation ( );
    long ksCreateDB (
        _bstr_t typeBD );
    long ksDeleteDB (
        long db );
    long ksConnectDB (
        long db,
        _bstr_t DBName );
    long ksDisconnectDB (
        long db );
    long ksFreeStatement (
        long db,
        long r,
        long fOption );
    long ksDoStatement (
        long db,
        long r,
        _bstr_t stSQL );
    long ksReadRecord (
        long db,
        long r,
        IDispatch * userPars );
    long ksCondition (
        long db,
        long r,
        _bstr_t stSQL );
    long ksRDouble (
        _bstr_t name );
    long ksRFloat (
        _bstr_t name );
    long ksRInt (
        _bstr_t name );
    long ksRLong (
        _bstr_t name );
    long ksRChar (
        _bstr_t name,
        long size,
        long type );
    long ksOpenTextFile (
        _bstr_t fileName );
    VARIANT_BOOL ksCloseTextFile (
        long F );
    _bstr_t ksReadStrFrFile (
        long F,
        long * res,
        long numb );
    _bstr_t ksGetTableName (
        long db,
        long * res,
        _bstr_t firstOrNext );
    _bstr_t ksGetColumnName (
        long db,
        _bstr_t tableName,
        long * res,
        _bstr_t firstOrNext );
    long ksIsODBCOkey ( );
    long ksRCharW (
        _bstr_t name,
        long size,
        long type );
    long ksOpenTextFileEx (
        _bstr_t fileName,
        long textFileType );
};

struct __declspec(uuid("1bd030f4-4058-4a86-9f4f-1aeef8be8d23"))
ksSpcDocumentNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL DocumentBeginAdd ( );
    VARIANT_BOOL DocumentAdd (
        _bstr_t docName );
    VARIANT_BOOL DocumentBeginRemove (
        _bstr_t docName );
    VARIANT_BOOL DocumentRemove (
        _bstr_t docName );
    VARIANT_BOOL SpcStyleBeginChange (
        _bstr_t libName,
        long numb );
    VARIANT_BOOL SpcStyleChange (
        _bstr_t libName,
        long numb );
};

struct __declspec(uuid("51e74521-9a3a-11d6-95ce-00c0262d30e3"))
ksSpcDocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getreference,put=Putreference))
    long reference;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetStamp ( );
    IDispatchPtr GetSpecification ( );
    VARIANT_BOOL ksCloseDocument ( );
    IDispatchPtr ksGetSpcSheetSB ( );
    long ksGetSpcDocumentPagesCount ( );
    VARIANT_BOOL ksSaveDocument (
        _bstr_t fileName );
    VARIANT_BOOL ksCreateDocument (
        IDispatch * par );
    long ksDeleteObj (
        long ref );
    long ksSetSpcSheetSB (
        IDispatch * arr );
    long ksExistObj (
        long ref );
    VARIANT_BOOL ksOpenDocument (
        _bstr_t nameDoc,
        short regim );
    long ksGetObjParam (
        long ref,
        IDispatch * param,
        long parType );
    long ksSetObjParam (
        long ref,
        IDispatch * param,
        long parType );
    VARIANT_BOOL SaveAsToRasterFormat (
        _bstr_t fileName,
        IDispatch * par );
    IDispatchPtr RasterFormatParam ( );
    VARIANT_BOOL SaveAsToUncompressedRasterFormat (
        _bstr_t fileName,
        IDispatch * rasterPar );
    IUnknownPtr GetSpcDocumentNotify ( );
    VARIANT_BOOL ksSaveDocumentEx (
        _bstr_t fileName,
        long SaveMode );
    IDispatchPtr GetStampEx (
        long SheetNumb );
    VARIANT_BOOL ksSaveToDXF (
        _bstr_t DXFFileName );

    // Properties:
    long Getreference ( );
    void Putreference ( long _val );
};

struct __declspec(uuid("dc32eb43-4615-4717-8c67-48875a357b06"))
SpcDocumentNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksSpcDocumentNotify

struct __declspec(uuid("ac5004d1-c240-41fc-ab84-7eb5c793ae7f"))
ksSpcObjectNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL BeginDelete (
        long objRef );
    VARIANT_BOOL Delete (
        long objRef );
    VARIANT_BOOL CellDblClick (
        long objRef,
        long number );
    VARIANT_BOOL CellBeginEdit (
        long objRef,
        long number );
    VARIANT_BOOL ChangeCurrent (
        long objRef );
    VARIANT_BOOL DocumentBeginAdd (
        long objRef );
    VARIANT_BOOL DocumentAdd (
        long objRef,
        _bstr_t docName );
    VARIANT_BOOL DocumentRemove (
        long objRef,
        _bstr_t docName );
    VARIANT_BOOL BeginGeomChange (
        long objRef );
    VARIANT_BOOL GeomChange (
        long objRef );
    VARIANT_BOOL BeginProcess (
        long pType,
        long objRef );
    VARIANT_BOOL EndProcess (
        long pType );
    VARIANT_BOOL CreateObject (
        long objRef );
    VARIANT_BOOL UpdateObject (
        long objRef );
    VARIANT_BOOL BeginCopy (
        long objRef );
    VARIANT_BOOL copy (
        long objRef );
};

struct __declspec(uuid("0331ab4b-f25b-4eb9-9c8a-bfea414e3822"))
ksSpecificationNotify : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL TuningSpcStyleBeginChange (
        _bstr_t libName,
        long numb );
    VARIANT_BOOL TuningSpcStyleChange (
        _bstr_t libName,
        long numb,
        VARIANT_BOOL isOk );
    VARIANT_BOOL ChangeCurrentSpcDescription (
        _bstr_t libName,
        long numb );
    VARIANT_BOOL SpcDescriptionAdd (
        _bstr_t libName,
        long numb );
    VARIANT_BOOL SpcDescriptionRemove (
        _bstr_t libName,
        long numb );
    VARIANT_BOOL SpcDescriptionBeginEdit (
        _bstr_t libName,
        long numb );
    VARIANT_BOOL SpcDescriptionEdit (
        _bstr_t libName,
        long numb,
        VARIANT_BOOL isOk );
    VARIANT_BOOL SynchronizationBegin ( );
    VARIANT_BOOL Synchronization ( );
    VARIANT_BOOL BeginCalcPositions ( );
    VARIANT_BOOL CalcPositions ( );
    VARIANT_BOOL BeginCreateObject (
        long typeObj );
};

struct __declspec(uuid("51e74524-9a3a-11d6-95ce-00c0262d30e3"))
ksSpecification : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ksSpcObjectEnd ( );
    long ksSpcObjectEdit (
        long spcObj );
    long ksSpcObjectCreate (
        _bstr_t nameLib,
        long styleNumb,
        long secNumb,
        long subSecNumb,
        double numb,
        short typeObj );
    long ksSpcChangeValue (
        long colNumb,
        long itemNumb,
        IDispatch * userPars,
        short typeVal );
    long ksSpcVisible (
        long colNumb,
        long itemNumb,
        short flagOn );
    long ksSpcMassa (
        _bstr_t sMassa );
    long ksSpcCount (
        short ispoln,
        _bstr_t sCount );
    long ksSpcPosition (
        long pos );
    long ksSpcIncludeReference (
        long obj,
        short Clear );
    long ksGetSpcObjForGeom (
        _bstr_t nameLib,
        long numb,
        long obj,
        short equal,
        short First );
    long ksGetSpcObjForGeomWithLimit (
        _bstr_t nameLib,
        long numb,
        long obj,
        short equal,
        short First,
        long section,
        double attrTypeNumb );
    _bstr_t ksGetSpcSectionName (
        long spcObj );
    long ksEditWindowSpcObject (
        long obj );
    double ksGetSpcObjectNumber (
        long spcObj );
    long ksGetSpcObject (
        double objNumb );
    _bstr_t ksGetSpcObjectColumnText (
        long spcObj,
        long columnType,
        long ispoln,
        long block );
    long ksSetSpcObjectColumnText (
        long columnType,
        long ispoln,
        long block,
        _bstr_t str );
    long ksGetSpcTableColumn (
        _bstr_t nameLib,
        long numb,
        short additioanalCol );
    long ksGetSpcColumnType (
        long spcObj,
        long colNumb,
        IDispatch * par );
    long ksGetSpcColumnNumb (
        long spcObj,
        long columnType,
        long ispoln,
        long block );
    long ksGetSpcStyleParam (
        _bstr_t nameLib,
        long numb,
        IDispatch * par,
        long tPar );
    long ksGetSpcDescription (
        long index,
        IDispatch * param,
        VARIANT_BOOL * state );
    long ksSetSpcDescription (
        long index,
        IDispatch * param,
        short state );
    long ksAddSpcDescription (
        IDispatch * param );
    long ksDeleteSpcDescription (
        long index );
    VARIANT_BOOL D3SpcIncludePart (
        IDispatch * part,
        VARIANT_BOOL fillTexts );
    long D3GetSpcObjForGeomWithLimit (
        _bstr_t nameLib,
        long numb,
        IDispatch * part,
        short First,
        short section,
        double attrTypeNumb );
    double ksGetWidthColumnSpc (
        long numColumn,
        VARIANT_BOOL cellOrText );
    long ksGetCurrentSpcObject ( );
    long ksSetCurrentSpcObject (
        long spcObj,
        long index );
    long ksSetTuningSpcStyleParam (
        long index,
        IDispatch * par );
    long ksGetTuningSpcStyleParam (
        long index,
        IDispatch * par );
    long ksGetSpcObjGeometry (
        long spcObj );
    IDispatchPtr D3GetSpcObjGeometry (
        long spcObj );
    IDispatchPtr ksGetSpcObjectColumnTextEx (
        long spcObj,
        long columnType,
        long ispoln,
        long block );
    long ksSetSpcObjectColumnTextEx (
        long columnType,
        long ispoln,
        long block,
        IDispatch * arr );
    IUnknownPtr GetSpcObjectNotify (
        long objType );
    long ksGetSpcObjGeometryEx (
        long spcObj,
        long geomMode );
    VARIANT_BOOL ksSetSpcObjectColumnTextAlign (
        long spcObj,
        long columnNumber,
        long lineIndex,
        long align );
    long ksGetSpcObjectColumnTextAlign (
        long spcObj,
        long columnNumber,
        long lineIndex );
    double ksGetSpcObjectAttributeNumber (
        long spcObj );
    VARIANT_BOOL ksSetSpcObjectAttributeNumber (
        long spcObj,
        double attrNumber );
    double ksGetSpcObjectSummaryCount (
        long spcObj,
        long ispoln,
        long blockNumber );
    VARIANT_BOOL ksSetSpcObjectMaterial (
        long spcObj,
        _bstr_t material,
        double density );
    _bstr_t ksGetSpcPerformanceName (
        long index,
        long ispoln,
        long block );
    VARIANT_BOOL ksSetSpcPerformanceName (
        long index,
        long ispoln,
        long block,
        _bstr_t name );
    VARIANT_BOOL ksSpcDocLinksClear (
        long doc );
    VARIANT_BOOL ksSpcDocLinksClearEx (
        long doc,
        long mode );
    VARIANT_BOOL ksGetSpcPropertyFill (
        long spcObj );
    VARIANT_BOOL ksSetSpcPropertyFill (
        long spcObj,
        long val );
    IDispatchPtr ksGetSpcObjectSummaryCountText (
        long spcObj,
        long ispoln,
        long block );
};

struct __declspec(uuid("02cbc423-bc8c-40de-be65-03a67df1c834"))
SpcObjectNotify;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface ksSpcObjectNotify

struct __declspec(uuid("74d745f1-9a3a-11d6-95ce-00c0262d30e3"))
ksDocumentTxt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getreference,put=Putreference))
    long reference;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetStamp ( );
    VARIANT_BOOL ksCloseDocument ( );
    long ksGetTxtDocumentPagesCount ( );
    VARIANT_BOOL ksSaveDocument (
        _bstr_t fileName );
    VARIANT_BOOL ksCreateDocument (
        IDispatch * par );
    VARIANT_BOOL ksOpenDocument (
        _bstr_t nameDoc,
        short regim );
    VARIANT_BOOL SaveAsToRasterFormat (
        _bstr_t fileName,
        IDispatch * par );
    IDispatchPtr RasterFormatParam ( );
    VARIANT_BOOL SaveAsToUncompressedRasterFormat (
        _bstr_t fileName,
        IDispatch * rasterPar );
    long ksGetObjParam (
        long ref,
        IDispatch * param,
        long parType );
    long ksSetObjParam (
        long ref,
        IDispatch * param,
        long parType );
    VARIANT_BOOL ksSaveDocumentEx (
        _bstr_t fileName,
        long SaveMode );
    IDispatchPtr GetStampEx (
        long SheetNumb );
    long ksGetDocumentPagesCount ( );

    // Properties:
    long Getreference ( );
    void Putreference ( long _val );
};

struct __declspec(uuid("cc26da61-9b22-11d6-95ce-00c0262d30e3"))
ksAttributeTypeParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getkey1,put=Putkey1))
    long key1;
    __declspec(property(get=Getkey2,put=Putkey2))
    long key2;
    __declspec(property(get=Getkey3,put=Putkey3))
    long key3;
    __declspec(property(get=Getkey4,put=Putkey4))
    long key4;
    __declspec(property(get=GetrowsCount,put=PutrowsCount))
    long rowsCount;
    __declspec(property(get=Getheader,put=Putheader))
    _bstr_t header;
    __declspec(property(get=GetflagVisible,put=PutflagVisible))
    VARIANT_BOOL flagVisible;
    __declspec(property(get=Getpassword,put=Putpassword))
    _bstr_t password;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetColumns ( );
    VARIANT_BOOL SetColumns (
        IDispatch * val );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getkey1 ( );
    void Putkey1 ( long _val );
    long Getkey2 ( );
    void Putkey2 ( long _val );
    long Getkey3 ( );
    void Putkey3 ( long _val );
    long Getkey4 ( );
    void Putkey4 ( long _val );
    long GetrowsCount ( );
    void PutrowsCount ( long _val );
    _bstr_t Getheader ( );
    void Putheader ( _bstr_t _val );
    VARIANT_BOOL GetflagVisible ( );
    void PutflagVisible ( VARIANT_BOOL _val );
    _bstr_t Getpassword ( );
    void Putpassword ( _bstr_t _val );
};

struct __declspec(uuid("ce0d05e1-9b2a-11d6-95ce-00c0262d30e3"))
ksColumnInfoParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=Getheader,put=Putheader))
    _bstr_t header;
    __declspec(property(get=Getkey,put=Putkey))
    short key;
    __declspec(property(get=Getdef,put=Putdef))
    _bstr_t def;
    __declspec(property(get=GetflagEnum,put=PutflagEnum))
    VARIANT_BOOL flagEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetFieldEnum ( );
    VARIANT_BOOL SetFieldEnum (
        IDispatch * fieldEnum );
    IDispatchPtr GetColumns ( );
    VARIANT_BOOL SetColumns (
        IDispatch * fieldEnum );
    VARIANT_BOOL Init ( );

    // Properties:
    short Gettype ( );
    void Puttype ( short _val );
    _bstr_t Getheader ( );
    void Putheader ( _bstr_t _val );
    short Getkey ( );
    void Putkey ( short _val );
    _bstr_t Getdef ( );
    void Putdef ( _bstr_t _val );
    VARIANT_BOOL GetflagEnum ( );
    void PutflagEnum ( VARIANT_BOOL _val );
};

struct __declspec(uuid("ce0d05e4-9b2a-11d6-95ce-00c0262d30e3"))
ksAttributeParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getkey1,put=Putkey1))
    long key1;
    __declspec(property(get=Getkey2,put=Putkey2))
    long key2;
    __declspec(property(get=Getkey3,put=Putkey3))
    long key3;
    __declspec(property(get=Getkey4,put=Putkey4))
    long key4;
    __declspec(property(get=Getpassword,put=Putpassword))
    _bstr_t password;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetValues ( );
    VARIANT_BOOL SetValues (
        IDispatch * values );
    IDispatchPtr GetFlagVisible ( );
    VARIANT_BOOL SetFlagVisible (
        IDispatch * flagVisible );
    IDispatchPtr GetColumnKeys ( );
    VARIANT_BOOL SetColumnKeys (
        IDispatch * columnKeys );
    VARIANT_BOOL Init ( );

    // Properties:
    long Getkey1 ( );
    void Putkey1 ( long _val );
    long Getkey2 ( );
    void Putkey2 ( long _val );
    long Getkey3 ( );
    void Putkey3 ( long _val );
    long Getkey4 ( );
    void Putkey4 ( long _val );
    _bstr_t Getpassword ( );
    void Putpassword ( _bstr_t _val );
};

struct __declspec(uuid("508a0cc1-9d74-11d6-95ce-00c0262d30e3"))
ksVariable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=GetparameterNote))
    _bstr_t parameterNote;
    __declspec(property(get=GetlinkVarName))
    _bstr_t linkVarName;
    __declspec(property(get=GetlinkDocName))
    _bstr_t linkDocName;
    __declspec(property(get=GetdisplayName))
    _bstr_t displayName;
    __declspec(property(get=Getvalue,put=Putvalue))
    double value;
    __declspec(property(get=Getnote,put=Putnote))
    _bstr_t note;
    __declspec(property(get=GetPseudonym,put=PutPseudonym))
    _bstr_t Pseudonym;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;
    __declspec(property(get=Getexternal,put=Putexternal))
    VARIANT_BOOL external;
    __declspec(property(get=GetInformation,put=PutInformation))
    VARIANT_BOOL Information;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t Getname ( );
    _bstr_t GetparameterNote ( );
    _bstr_t GetlinkVarName ( );
    _bstr_t GetlinkDocName ( );
    VARIANT_BOOL SetLink (
        _bstr_t doc,
        _bstr_t name );
    _bstr_t GetdisplayName ( );

    // Properties:
    double Getvalue ( );
    void Putvalue ( double _val );
    _bstr_t Getnote ( );
    void Putnote ( _bstr_t _val );
    _bstr_t GetPseudonym ( );
    void PutPseudonym ( _bstr_t _val );
    _bstr_t GetExpression ( );
    void PutExpression ( _bstr_t _val );
    VARIANT_BOOL Getexternal ( );
    void Putexternal ( VARIANT_BOOL _val );
    VARIANT_BOOL GetInformation ( );
    void PutInformation ( VARIANT_BOOL _val );
};

struct __declspec(uuid("fa93aa21-9b3d-11d6-95ce-00c0262d30e3"))
ksLibraryAttrTypeParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=GettypeId,put=PuttypeId))
    double typeId;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    double GettypeId ( );
    void PuttypeId ( double _val );
};

struct __declspec(uuid("fa93aa24-9b3d-11d6-95ce-00c0262d30e3"))
ksAttributeObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double ksCreateAttrType (
        IDispatch * attrType,
        _bstr_t libName );
    long ksDeleteAttrType (
        double attrID,
        _bstr_t libName,
        _bstr_t password );
    long ksGetAttrType (
        double attrID,
        _bstr_t libName,
        IDispatch * attrType );
    double ksSetAttrType (
        double attrID,
        _bstr_t libName,
        IDispatch * attrType,
        _bstr_t password );
    double ksChoiceAttrTypes (
        _bstr_t libName );
    long ksCreateAttr (
        long pObj,
        IDispatch * attr,
        double attrID,
        _bstr_t libName );
    long ksDeleteAttr (
        long pObj,
        long pAttr,
        _bstr_t password );
    long ksGetAttrValue (
        long pAttr,
        long rowNumb,
        long columnNumb,
        IDispatch * flagVisible,
        IDispatch * columnKeys,
        IDispatch * value );
    long ksSetAttrValue (
        long pAttr,
        long rowNumb,
        long columnNumb,
        IDispatch * flagVisible,
        IDispatch * columnKeys,
        IDispatch * value,
        _bstr_t password );
    long ksGetAttrRow (
        long pAttr,
        long rowNumb,
        IDispatch * flagVisible,
        IDispatch * columnKeys,
        IDispatch * value );
    long ksSetAttrRow (
        long pAttr,
        long rowNumb,
        IDispatch * flagVisible,
        IDispatch * columnKeys,
        IDispatch * value,
        _bstr_t password );
    long ksAddAttrRow (
        long pAttr,
        long rowNumb,
        IDispatch * flagVisible,
        IDispatch * value,
        _bstr_t password );
    long ksDeleteAttrRow (
        long pAttr,
        long rowNumb,
        _bstr_t password );
    long ksGetSizeAttrValue (
        long pAttr,
        long columnNumb,
        long * count );
    long ksGetSizeAttrRow (
        long pAttr,
        long * count );
    long ksGetAttrKeysInfo (
        long pAttr,
        long * key1,
        long * key2,
        long * key3,
        long * key4,
        double * numb );
    long ksGetAttrColumnInfo (
        long pAttr,
        long columnNumb,
        IDispatch * columnInfo );
    long ksGetAttrTabInfo (
        long pAttr,
        long * rowsCount,
        long * columnsCount );
    long ksViewEditAttr (
        long pAttr,
        long type,
        _bstr_t password );
    long ksViewEditAttrType (
        _bstr_t libName,
        long type,
        double attrID,
        _bstr_t password );
    long ksChoiceAttr (
        long pObj );
    IDispatchPtr ksGetLibraryAttrTypesArray (
        _bstr_t libName );
    ksAttribute3DPtr ksCreateAttr3D (
        IDispatch * pObj,
        IDispatch * attr,
        double attrID,
        _bstr_t libName );
    long ksDeleteAttr3D (
        IDispatch * pObj,
        struct ksAttribute3D * pAttr,
        _bstr_t password );
    ksAttribute3DPtr ksChoiceAttr3D (
        IDispatch * pObj );
    ksAttribute3DPtr ksCreateAttr3DEx (
        IDispatch * pObj,
        IDispatch * pSourcePart,
        IDispatch * attr,
        double attrID,
        _bstr_t libName );
    long ksGetSizeAttrValueW (
        long pAttr,
        long columnNumb,
        long * count );
    long ksGetSizeAttrRowW (
        long pAttr,
        long * count );
};

struct __declspec(uuid("e9807824-9d55-11d6-95ce-00c0262d30e3"))
ksRequestInfo3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getprompt,put=Putprompt))
    _bstr_t prompt;
    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=GetcursorName,put=PutcursorName))
    _bstr_t cursorName;
    __declspec(property(get=GetcommandsString,put=PutcommandsString))
    _bstr_t commandsString;
    __declspec(property(get=GetcursorId,put=PutcursorId))
    long cursorId;
    __declspec(property(get=GetmenuId,put=PutmenuId))
    long menuId;
    __declspec(property(get=GetDynamicFiltering,put=PutDynamicFiltering))
    VARIANT_BOOL DynamicFiltering;
    __declspec(property(get=GetShowCommandWindow,put=PutShowCommandWindow))
    VARIANT_BOOL ShowCommandWindow;
    __declspec(property(get=GetSelectionBandMode,put=PutSelectionBandMode))
    long SelectionBandMode;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetFilterCallBack ( );
    _bstr_t GetCallBack ( );
    VARIANT_BOOL SetFilterCallBack (
        _bstr_t methodName,
        long hInst,
        IDispatch * dispatchOCX );
    VARIANT_BOOL SetCallBack (
        _bstr_t methodName,
        long hInst,
        IDispatch * dispatchOCX );
    IDispatchPtr GetPlacement ( );
    IDispatchPtr GetEntityCollection ( );
    long GetCurrentCommand ( );
    IDispatchPtr GetMateConstraintCollection ( );
    IDispatchPtr GetIPhantom ( );
    VARIANT_BOOL CreatePhantom ( );
    IUnknownPtr GetProcessParam ( );
    VARIANT_BOOL SetProcessParam (
        IUnknown * param );
    IDispatchPtr GetCallBackFeature ( );
    VARIANT_BOOL SetCursorText (
        _bstr_t text );
    VARIANT_BOOL SetFilterCallBackEx (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );
    VARIANT_BOOL SetCallBackEx (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );
    _bstr_t GetTakeObjectCallBack ( );
    VARIANT_BOOL SetTakeObjectCallBack (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );
    IDispatchPtr GetTakeProcessObject ( );
    VARIANT_BOOL SetTakeProcessObject (
        IDispatch * param );
    _bstr_t GetProcessingGroupObjectsCallBack ( );
    VARIANT_BOOL SetProcessingGroupObjectsCallBack (
        _bstr_t methodName,
        const _variant_t & hInst,
        IDispatch * dispatchOCX );
    VARIANT_BOOL SetObjectsFilter3D (
        long filterType,
        VARIANT_BOOL newVal );
    VARIANT_BOOL GetObjectsFilter3D (
        long filterType );

    // Properties:
    _bstr_t Getprompt ( );
    void Putprompt ( _bstr_t _val );
    _bstr_t Gettitle ( );
    void Puttitle ( _bstr_t _val );
    _bstr_t GetcursorName ( );
    void PutcursorName ( _bstr_t _val );
    _bstr_t GetcommandsString ( );
    void PutcommandsString ( _bstr_t _val );
    long GetcursorId ( );
    void PutcursorId ( long _val );
    long GetmenuId ( );
    void PutmenuId ( long _val );
    VARIANT_BOOL GetDynamicFiltering ( );
    void PutDynamicFiltering ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowCommandWindow ( );
    void PutShowCommandWindow ( VARIANT_BOOL _val );
    long GetSelectionBandMode ( );
    void PutSelectionBandMode ( long _val );
};

struct __declspec(uuid("508a0cc4-9d74-11d6-95ce-00c0262d30e3"))
ksMateConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetconstraintType,put=PutconstraintType))
    short constraintType;
    __declspec(property(get=Getdirection,put=Putdirection))
    short direction;
    __declspec(property(get=Getfixed,put=Putfixed))
    short fixed;
    __declspec(property(get=Getdistance,put=Putdistance))
    double distance;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Create ( );
    IDispatchPtr GetBaseObj (
        short number );
    VARIANT_BOOL SetBaseObj (
        short number,
        IDispatch * obj );
    IDispatchPtr GetFeature ( );
    long GetEntityParams (
        short number,
        VARIANT * params );

    // Properties:
    short GetconstraintType ( );
    void PutconstraintType ( short _val );
    short Getdirection ( );
    void Putdirection ( short _val );
    short Getfixed ( );
    void Putfixed ( short _val );
    double Getdistance ( );
    void Putdistance ( double _val );
};

struct __declspec(uuid("508a0cc7-9d74-11d6-95ce-00c0262d30e3"))
ksDefaultObject : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetSurface ( );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("111cefe4-a0a7-11d6-95ce-00c0262d30e3"))
ksModelLibrary : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long ModelLibraryOperation (
        _bstr_t libName,
        long type );
    _bstr_t ChoiceModelFromLib (
        _bstr_t libFile,
        long * type );
    long ExistModelInLibrary (
        _bstr_t name );
    long AddD3DocumentToLibrary (
        _bstr_t libName,
        _bstr_t fileName );
    long CheckModelLibrary (
        _bstr_t libName,
        VARIANT_BOOL possibleMessage );
};

struct __declspec(uuid("03ceac81-c0b8-11d6-8734-00c0262cdd2c"))
ksVariableCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    IDispatchPtr GetByName (
        _bstr_t name,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    IDispatchPtr AddNewVariable (
        _bstr_t name,
        double value,
        _bstr_t note );
    VARIANT_BOOL RemoveVariable (
        _bstr_t name );
};

struct __declspec(uuid("03ceac84-c0b8-11d6-8734-00c0262cdd2c"))
ksMateConstraintCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    VARIANT_BOOL AddMateConstraint (
        IDispatch * mate );
    VARIANT_BOOL RemoveMateConstraint (
        IDispatch * mate );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL refresh ( );
    long FindIt (
        IDispatch * entity );
    VARIANT_BOOL GetSafeArrayByObj (
        IDispatch * obj,
        VARIANT * pArray );
};

struct __declspec(uuid("03ceac87-c0b8-11d6-8734-00c0262cdd2c"))
ksPartCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByName (
        _bstr_t name,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    IDispatchPtr GetByIndex (
        long index );
    VARIANT_BOOL Add (
        IDispatch * part );
    VARIANT_BOOL AddAt (
        IDispatch * part,
        long index );
    VARIANT_BOOL AddBefore (
        IDispatch * part,
        IDispatch * base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        IDispatch * part );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL SetByIndex (
        IDispatch * part,
        long index );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("e6e78d61-c0fa-11d6-8734-00c0262cdd2c"))
ksMeshPartArrayDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle1,put=Putangle1))
    double angle1;
    __declspec(property(get=Getcount1,put=Putcount1))
    long count1;
    __declspec(property(get=Getstep1,put=Putstep1))
    double step1;
    __declspec(property(get=Getfactor1,put=Putfactor1))
    VARIANT_BOOL factor1;
    __declspec(property(get=Getangle2,put=Putangle2))
    double angle2;
    __declspec(property(get=Getcount2,put=Putcount2))
    long count2;
    __declspec(property(get=Getstep2,put=Putstep2))
    double step2;
    __declspec(property(get=Getfactor2,put=Putfactor2))
    VARIANT_BOOL factor2;
    __declspec(property(get=GetinsideFlag,put=PutinsideFlag))
    VARIANT_BOOL insideFlag;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetAxis1 ( );
    VARIANT_BOOL SetAxis1 (
        IDispatch * axis );
    IDispatchPtr GetAxis2 ( );
    VARIANT_BOOL SetAxis2 (
        IDispatch * axis );
    IDispatchPtr PartArray ( );
    VARIANT_BOOL GetCopyParamAlongAxis (
        VARIANT_BOOL firstAxis,
        double * angle,
        long * count,
        double * step,
        VARIANT_BOOL * factor );
    VARIANT_BOOL SetCopyParamAlongAxis (
        VARIANT_BOOL firstAxis,
        double angle,
        long count,
        double step,
        VARIANT_BOOL factor );
    IDispatchPtr DeletedCollection ( );

    // Properties:
    double Getangle1 ( );
    void Putangle1 ( double _val );
    long Getcount1 ( );
    void Putcount1 ( long _val );
    double Getstep1 ( );
    void Putstep1 ( double _val );
    VARIANT_BOOL Getfactor1 ( );
    void Putfactor1 ( VARIANT_BOOL _val );
    double Getangle2 ( );
    void Putangle2 ( double _val );
    long Getcount2 ( );
    void Putcount2 ( long _val );
    double Getstep2 ( );
    void Putstep2 ( double _val );
    VARIANT_BOOL Getfactor2 ( );
    void Putfactor2 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetinsideFlag ( );
    void PutinsideFlag ( VARIANT_BOOL _val );
};

struct __declspec(uuid("ddd05143-c180-11d6-8734-00c0262cdd2c"))
ksCircularPartArrayDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount1,put=Putcount1))
    long count1;
    __declspec(property(get=Getstep1,put=Putstep1))
    double step1;
    __declspec(property(get=Getfactor1,put=Putfactor1))
    VARIANT_BOOL factor1;
    __declspec(property(get=Getcount2,put=Putcount2))
    long count2;
    __declspec(property(get=Getstep2,put=Putstep2))
    double step2;
    __declspec(property(get=Getfactor2,put=Putfactor2))
    VARIANT_BOOL factor2;
    __declspec(property(get=Getinverce,put=Putinverce))
    VARIANT_BOOL inverce;
    __declspec(property(get=GetkeepAngle,put=PutkeepAngle))
    VARIANT_BOOL keepAngle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr PartArray ( );
    IDispatchPtr GetAxis ( );
    VARIANT_BOOL SetAxis (
        IDispatch * axis );
    VARIANT_BOOL GetCopyParamAlongDir (
        long * count,
        double * step,
        VARIANT_BOOL * factor,
        VARIANT_BOOL dir );
    VARIANT_BOOL SetCopyParamAlongDir (
        long count,
        double step,
        VARIANT_BOOL factor,
        VARIANT_BOOL dir );
    IDispatchPtr DeletedCollection ( );

    // Properties:
    long Getcount1 ( );
    void Putcount1 ( long _val );
    double Getstep1 ( );
    void Putstep1 ( double _val );
    VARIANT_BOOL Getfactor1 ( );
    void Putfactor1 ( VARIANT_BOOL _val );
    long Getcount2 ( );
    void Putcount2 ( long _val );
    double Getstep2 ( );
    void Putstep2 ( double _val );
    VARIANT_BOOL Getfactor2 ( );
    void Putfactor2 ( VARIANT_BOOL _val );
    VARIANT_BOOL Getinverce ( );
    void Putinverce ( VARIANT_BOOL _val );
    VARIANT_BOOL GetkeepAngle ( );
    void PutkeepAngle ( VARIANT_BOOL _val );
};

struct __declspec(uuid("ddd05146-c180-11d6-8734-00c0262cdd2c"))
ksCurvePartArrayDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount,put=Putcount))
    long count;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=Getfactor,put=Putfactor))
    VARIANT_BOOL factor;
    __declspec(property(get=GetkeepAngle,put=PutkeepAngle))
    VARIANT_BOOL keepAngle;
    __declspec(property(get=GetfullCurve,put=PutfullCurve))
    VARIANT_BOOL fullCurve;
    __declspec(property(get=Getsence,put=Putsence))
    VARIANT_BOOL sence;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr PartArray ( );
    IDispatchPtr CurveArray ( );
    IDispatchPtr DeletedCollection ( );

    // Properties:
    long Getcount ( );
    void Putcount ( long _val );
    double Getstep ( );
    void Putstep ( double _val );
    VARIANT_BOOL Getfactor ( );
    void Putfactor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetkeepAngle ( );
    void PutkeepAngle ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfullCurve ( );
    void PutfullCurve ( VARIANT_BOOL _val );
    VARIANT_BOOL Getsence ( );
    void Putsence ( VARIANT_BOOL _val );
};

struct __declspec(uuid("ddd05149-c180-11d6-8734-00c0262cdd2c"))
ksDerivativePartArrayDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr PartArray ( );
    IDispatchPtr GetDeriv ( );
    VARIANT_BOOL SetDeriv (
        IDispatch * deriv );
    IDispatchPtr DeletedCollection ( );
};

struct __declspec(uuid("0307bb81-c193-11d6-8734-00c0262cdd2c"))
ksAxis2PlanesDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPlane (
        long number,
        IDispatch * plane );
    IDispatchPtr GetPlane (
        long number );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("0307bb84-c193-11d6-8734-00c0262cdd2c"))
ksAxisOperationsDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetOperation (
        IDispatch * plane );
    IDispatchPtr GetOperation ( );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("0307bb87-c193-11d6-8734-00c0262cdd2c"))
ksAxis2PointsDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPoint (
        long number,
        IDispatch * point );
    IDispatchPtr GetPoint (
        long number );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("0307bb8a-c193-11d6-8734-00c0262cdd2c"))
ksAxisEdgeDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetEdge (
        IDispatch * edge );
    IDispatchPtr GetEdge ( );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("0307bb8d-c193-11d6-8734-00c0262cdd2c"))
ksMeshCopyDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle1,put=Putangle1))
    double angle1;
    __declspec(property(get=Getcount1,put=Putcount1))
    long count1;
    __declspec(property(get=Getstep1,put=Putstep1))
    double step1;
    __declspec(property(get=Getfactor1,put=Putfactor1))
    VARIANT_BOOL factor1;
    __declspec(property(get=Getangle2,put=Putangle2))
    double angle2;
    __declspec(property(get=Getcount2,put=Putcount2))
    long count2;
    __declspec(property(get=Getstep2,put=Putstep2))
    double step2;
    __declspec(property(get=Getfactor2,put=Putfactor2))
    VARIANT_BOOL factor2;
    __declspec(property(get=GetinsideFlag,put=PutinsideFlag))
    VARIANT_BOOL insideFlag;
    __declspec(property(get=GetgeomArray,put=PutgeomArray))
    VARIANT_BOOL geomArray;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr OperationArray ( );
    VARIANT_BOOL GetCopyParamAlongAxis (
        VARIANT_BOOL firstAxis,
        double * angle,
        long * count,
        double * step,
        VARIANT_BOOL * factor );
    VARIANT_BOOL SetCopyParamAlongAxis (
        VARIANT_BOOL firstAxis,
        double angle,
        long count,
        double step,
        VARIANT_BOOL factor );
    IDispatchPtr DeletedCollection ( );
    IDispatchPtr GetAxis1 ( );
    VARIANT_BOOL SetAxis1 (
        IDispatch * axis );
    IDispatchPtr GetAxis2 ( );
    VARIANT_BOOL SetAxis2 (
        IDispatch * axis );

    // Properties:
    double Getangle1 ( );
    void Putangle1 ( double _val );
    long Getcount1 ( );
    void Putcount1 ( long _val );
    double Getstep1 ( );
    void Putstep1 ( double _val );
    VARIANT_BOOL Getfactor1 ( );
    void Putfactor1 ( VARIANT_BOOL _val );
    double Getangle2 ( );
    void Putangle2 ( double _val );
    long Getcount2 ( );
    void Putcount2 ( long _val );
    double Getstep2 ( );
    void Putstep2 ( double _val );
    VARIANT_BOOL Getfactor2 ( );
    void Putfactor2 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetinsideFlag ( );
    void PutinsideFlag ( VARIANT_BOOL _val );
    VARIANT_BOOL GetgeomArray ( );
    void PutgeomArray ( VARIANT_BOOL _val );
};

struct __declspec(uuid("0307bb90-c193-11d6-8734-00c0262cdd2c"))
ksCircularCopyDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount1,put=Putcount1))
    long count1;
    __declspec(property(get=Getstep1,put=Putstep1))
    double step1;
    __declspec(property(get=Getfactor1,put=Putfactor1))
    VARIANT_BOOL factor1;
    __declspec(property(get=Getcount2,put=Putcount2))
    long count2;
    __declspec(property(get=Getstep2,put=Putstep2))
    double step2;
    __declspec(property(get=Getfactor2,put=Putfactor2))
    VARIANT_BOOL factor2;
    __declspec(property(get=Getinverce,put=Putinverce))
    VARIANT_BOOL inverce;
    __declspec(property(get=GetgeomArray,put=PutgeomArray))
    VARIANT_BOOL geomArray;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetOperationArray ( );
    IDispatchPtr GetAxis ( );
    VARIANT_BOOL SetAxis (
        IDispatch * axis );
    VARIANT_BOOL GetCopyParamAlongDir (
        long * count,
        double * step,
        VARIANT_BOOL * factor,
        VARIANT_BOOL dir );
    VARIANT_BOOL SetCopyParamAlongDir (
        long count,
        double step,
        VARIANT_BOOL factor,
        VARIANT_BOOL dir );
    IDispatchPtr DeletedCollection ( );

    // Properties:
    long Getcount1 ( );
    void Putcount1 ( long _val );
    double Getstep1 ( );
    void Putstep1 ( double _val );
    VARIANT_BOOL Getfactor1 ( );
    void Putfactor1 ( VARIANT_BOOL _val );
    long Getcount2 ( );
    void Putcount2 ( long _val );
    double Getstep2 ( );
    void Putstep2 ( double _val );
    VARIANT_BOOL Getfactor2 ( );
    void Putfactor2 ( VARIANT_BOOL _val );
    VARIANT_BOOL Getinverce ( );
    void Putinverce ( VARIANT_BOOL _val );
    VARIANT_BOOL GetgeomArray ( );
    void PutgeomArray ( VARIANT_BOOL _val );
};

struct __declspec(uuid("0307bb93-c193-11d6-8734-00c0262cdd2c"))
ksCurveCopyDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount,put=Putcount))
    long count;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=Getfactor,put=Putfactor))
    VARIANT_BOOL factor;
    __declspec(property(get=GetkeepAngle,put=PutkeepAngle))
    VARIANT_BOOL keepAngle;
    __declspec(property(get=GetfullCurve,put=PutfullCurve))
    VARIANT_BOOL fullCurve;
    __declspec(property(get=Getsence,put=Putsence))
    VARIANT_BOOL sence;
    __declspec(property(get=GetgeomArray,put=PutgeomArray))
    VARIANT_BOOL geomArray;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr OperationArray ( );
    IDispatchPtr CurveArray ( );
    IDispatchPtr DeletedCollection ( );

    // Properties:
    long Getcount ( );
    void Putcount ( long _val );
    double Getstep ( );
    void Putstep ( double _val );
    VARIANT_BOOL Getfactor ( );
    void Putfactor ( VARIANT_BOOL _val );
    VARIANT_BOOL GetkeepAngle ( );
    void PutkeepAngle ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfullCurve ( );
    void PutfullCurve ( VARIANT_BOOL _val );
    VARIANT_BOOL Getsence ( );
    void Putsence ( VARIANT_BOOL _val );
    VARIANT_BOOL GetgeomArray ( );
    void PutgeomArray ( VARIANT_BOOL _val );
};

struct __declspec(uuid("0307bb96-c193-11d6-8734-00c0262cdd2c"))
ksMirrorCopyDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetOperationArray ( );
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
};

struct __declspec(uuid("0307bb99-c193-11d6-8734-00c0262cdd2c"))
ksMirrorCopyAllDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr ChooseBodies ( );
};

struct __declspec(uuid("0307bb9c-c193-11d6-8734-00c0262cdd2c"))
ksConicSpiralDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getturn,put=Putturn))
    double turn;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=GetturnDir,put=PutturnDir))
    VARIANT_BOOL turnDir;
    __declspec(property(get=GetbuildMode,put=PutbuildMode))
    short buildMode;
    __declspec(property(get=GetbuildDir,put=PutbuildDir))
    VARIANT_BOOL buildDir;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=GetheightType,put=PutheightType))
    short heightType;
    __declspec(property(get=GetheightAdd,put=PutheightAdd))
    double heightAdd;
    __declspec(property(get=GetheightAddHow,put=PutheightAddHow))
    VARIANT_BOOL heightAddHow;
    __declspec(property(get=GetinitialDiam,put=PutinitialDiam))
    double initialDiam;
    __declspec(property(get=GetinitialDiamType,put=PutinitialDiamType))
    short initialDiamType;
    __declspec(property(get=GetterminalDiam,put=PutterminalDiam))
    double terminalDiam;
    __declspec(property(get=GetterminalDiamType,put=PutterminalDiamType))
    short terminalDiamType;
    __declspec(property(get=GettiltAngleHow,put=PuttiltAngleHow))
    VARIANT_BOOL tiltAngleHow;
    __declspec(property(get=GetfirstAngle,put=PutfirstAngle))
    double firstAngle;
    __declspec(property(get=GettiltAngle,put=PuttiltAngle))
    double tiltAngle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    VARIANT_BOOL GetLocation (
        double * x,
        double * y );
    VARIANT_BOOL SetLocation (
        double x,
        double y );
    IDispatchPtr GetHeightObject ( );
    VARIANT_BOOL SetHeightObject (
        IDispatch * heightObject );
    IDispatchPtr GetInitialDiamObject ( );
    VARIANT_BOOL SetInitialDiamObject (
        IDispatch * initialDiamObject );
    IDispatchPtr GetTerminalDiamObject ( );
    VARIANT_BOOL SetTerminalDiamObject (
        IDispatch * terminalDiamObject );
    IDispatchPtr GetSketch ( );
    IDispatchPtr GetCurve3D ( );

    // Properties:
    double Getturn ( );
    void Putturn ( double _val );
    double Getstep ( );
    void Putstep ( double _val );
    VARIANT_BOOL GetturnDir ( );
    void PutturnDir ( VARIANT_BOOL _val );
    short GetbuildMode ( );
    void PutbuildMode ( short _val );
    VARIANT_BOOL GetbuildDir ( );
    void PutbuildDir ( VARIANT_BOOL _val );
    double Getheight ( );
    void Putheight ( double _val );
    short GetheightType ( );
    void PutheightType ( short _val );
    double GetheightAdd ( );
    void PutheightAdd ( double _val );
    VARIANT_BOOL GetheightAddHow ( );
    void PutheightAddHow ( VARIANT_BOOL _val );
    double GetinitialDiam ( );
    void PutinitialDiam ( double _val );
    short GetinitialDiamType ( );
    void PutinitialDiamType ( short _val );
    double GetterminalDiam ( );
    void PutterminalDiam ( double _val );
    short GetterminalDiamType ( );
    void PutterminalDiamType ( short _val );
    VARIANT_BOOL GettiltAngleHow ( );
    void PuttiltAngleHow ( VARIANT_BOOL _val );
    double GetfirstAngle ( );
    void PutfirstAngle ( double _val );
    double GettiltAngle ( );
    void PuttiltAngle ( double _val );
};

struct __declspec(uuid("0307bb9f-c193-11d6-8734-00c0262cdd2c"))
ksCylindricSpiralDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getturn,put=Putturn))
    double turn;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=GetturnDir,put=PutturnDir))
    VARIANT_BOOL turnDir;
    __declspec(property(get=GetbuildMode,put=PutbuildMode))
    short buildMode;
    __declspec(property(get=GetbuildDir,put=PutbuildDir))
    VARIANT_BOOL buildDir;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=GetheightType,put=PutheightType))
    short heightType;
    __declspec(property(get=GetheightAdd,put=PutheightAdd))
    double heightAdd;
    __declspec(property(get=GetheightAddHow,put=PutheightAddHow))
    VARIANT_BOOL heightAddHow;
    __declspec(property(get=Getdiam,put=Putdiam))
    double diam;
    __declspec(property(get=GetdiamType,put=PutdiamType))
    short diamType;
    __declspec(property(get=GetfirstAngle,put=PutfirstAngle))
    double firstAngle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    VARIANT_BOOL GetLocation (
        double * x,
        double * y );
    VARIANT_BOOL SetLocation (
        double x,
        double y );
    IDispatchPtr GetHeightObject ( );
    VARIANT_BOOL SetHeightObject (
        IDispatch * heightObject );
    IDispatchPtr GetDiamObject ( );
    VARIANT_BOOL SetDiamObject (
        IDispatch * diamObject );
    IDispatchPtr GetSketch ( );
    IDispatchPtr GetCurve3D ( );

    // Properties:
    double Getturn ( );
    void Putturn ( double _val );
    double Getstep ( );
    void Putstep ( double _val );
    VARIANT_BOOL GetturnDir ( );
    void PutturnDir ( VARIANT_BOOL _val );
    short GetbuildMode ( );
    void PutbuildMode ( short _val );
    VARIANT_BOOL GetbuildDir ( );
    void PutbuildDir ( VARIANT_BOOL _val );
    double Getheight ( );
    void Putheight ( double _val );
    short GetheightType ( );
    void PutheightType ( short _val );
    double GetheightAdd ( );
    void PutheightAdd ( double _val );
    VARIANT_BOOL GetheightAddHow ( );
    void PutheightAddHow ( VARIANT_BOOL _val );
    double Getdiam ( );
    void Putdiam ( double _val );
    short GetdiamType ( );
    void PutdiamType ( short _val );
    double GetfirstAngle ( );
    void PutfirstAngle ( double _val );
};

struct __declspec(uuid("0307bba2-c193-11d6-8734-00c0262cdd2c"))
ksPolyLineDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getclosed,put=Putclosed))
    VARIANT_BOOL closed;
    __declspec(property(get=GetvertexVisible,put=PutvertexVisible))
    VARIANT_BOOL vertexVisible;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCountVertex ( );
    VARIANT_BOOL AddVertex (
        double x,
        double y,
        double z,
        double radius );
    VARIANT_BOOL InsertVertex (
        long index,
        double x,
        double y,
        double z,
        double radius );
    VARIANT_BOOL DeleteVertex (
        long index );
    VARIANT_BOOL GetParamVertex (
        long index,
        double * x,
        double * y,
        double * z,
        double * radius );
    VARIANT_BOOL Flush ( );
    VARIANT_BOOL ReadFromFile (
        _bstr_t fileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t fileName );
    IDispatchPtr EdgeCollection ( );
    ksPolyLineVertexParamPtr AddPointWithParams (
        long index );
    ksPolyLineVertexParamPtr GetPointParams (
        long index );
    IDispatchPtr GetCurve3D ( );

    // Properties:
    VARIANT_BOOL Getclosed ( );
    void Putclosed ( VARIANT_BOOL _val );
    VARIANT_BOOL GetvertexVisible ( );
    void PutvertexVisible ( VARIANT_BOOL _val );
};

struct __declspec(uuid("1bcc4f0f-1091-41a3-895b-0608d20715b7"))
ksPolyLineVertexParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbuildingType,put=PutbuildingType))
    long buildingType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetParamVertex (
        double * x,
        double * y,
        double * z,
        double * radius );
    VARIANT_BOOL SetParamVertex (
        double x,
        double y,
        double z,
        double radius );
    VARIANT_BOOL SetParamByVertex (
        struct ksEntity * vertex,
        double radius );
    VARIANT_BOOL GetParamByDistance (
        double * distance,
        double * radius );
    VARIANT_BOOL SetParamByDistance (
        double distance,
        double radius );
    ksEntityPtr GetBuildingObject ( );
    VARIANT_BOOL SetBuildingObject (
        struct ksEntity * object );
    ksEntityPtr GetAssociation ( );
    VARIANT_BOOL SetAssociation (
        struct ksEntity * vertex );
    ksEntityPtr GetVertex ( );
    int GetIndex ( );

    // Properties:
    long GetbuildingType ( );
    void PutbuildingType ( long _val );
};

struct __declspec(uuid("0307bba5-c193-11d6-8734-00c0262cdd2c"))
ksSplineDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getclosed,put=Putclosed))
    VARIANT_BOOL closed;
    __declspec(property(get=GetsplineOnPoles,put=PutsplineOnPoles))
    VARIANT_BOOL splineOnPoles;
    __declspec(property(get=Getdegree,put=Putdegree))
    long degree;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCountVertex ( );
    VARIANT_BOOL AddVertex (
        double x,
        double y,
        double z,
        double radius );
    VARIANT_BOOL InsertVertex (
        long index,
        double x,
        double y,
        double z,
        double weight );
    VARIANT_BOOL DeleteVertex (
        long index );
    VARIANT_BOOL GetParamVertex (
        long index,
        double * x,
        double * y,
        double * z,
        double * weight );
    VARIANT_BOOL Flush ( );
    VARIANT_BOOL ReadFromFile (
        _bstr_t fileName );
    VARIANT_BOOL WriteToFile (
        _bstr_t fileName );
    VARIANT_BOOL AddVertexAndAssociation (
        long index,
        IDispatch * obj,
        double weight );
    VARIANT_BOOL SetAssociation (
        long index,
        IDispatch * obj );
    IDispatchPtr GetAssociation (
        long index );

    // Properties:
    VARIANT_BOOL Getclosed ( );
    void Putclosed ( VARIANT_BOOL _val );
    VARIANT_BOOL GetsplineOnPoles ( );
    void PutsplineOnPoles ( VARIANT_BOOL _val );
    long Getdegree ( );
    void Putdegree ( long _val );
};

struct __declspec(uuid("deefefe1-c3e2-11d6-8734-00c0262cdd2c"))
ksBaseExtrusionDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        short * type,
        double * depth,
        double * draftValue,
        VARIANT_BOOL * draftOutward );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        short type,
        double depth,
        double draftValue,
        VARIANT_BOOL draftOutward );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr ExtrusionParam ( );
    IDispatchPtr GetDepthObject (
        VARIANT_BOOL normal );
    VARIANT_BOOL SetDepthObject (
        VARIANT_BOOL normal,
        IDispatch * obj );
    VARIANT_BOOL ResetDepthObject (
        VARIANT_BOOL normal );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
};

struct __declspec(uuid("deefefe4-c3e2-11d6-8734-00c0262cdd2c"))
ksBossExtrusionDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        short * type,
        double * depth,
        double * draftValue,
        VARIANT_BOOL * draftOutward );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        short type,
        double depth,
        double draftValue,
        VARIANT_BOOL draftOutward );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr ExtrusionParam ( );
    IDispatchPtr GetDepthObject (
        VARIANT_BOOL normal );
    VARIANT_BOOL SetDepthObject (
        VARIANT_BOOL normal,
        IDispatch * obj );
    VARIANT_BOOL ResetDepthObject (
        VARIANT_BOOL normal );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("deefefe7-c3e2-11d6-8734-00c0262cdd2c"))
ksCutExtrusionDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=Getcut,put=Putcut))
    VARIANT_BOOL cut;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        short * type,
        double * depth,
        double * draftValue,
        VARIANT_BOOL * draftOutward );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        short type,
        double depth,
        double draftValue,
        VARIANT_BOOL draftOutward );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr ExtrusionParam ( );
    IDispatchPtr GetDepthObject (
        VARIANT_BOOL normal );
    VARIANT_BOOL SetDepthObject (
        VARIANT_BOOL normal,
        IDispatch * obj );
    VARIANT_BOOL ResetDepthObject (
        VARIANT_BOOL normal );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    VARIANT_BOOL Getcut ( );
    void Putcut ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("b20e24c3-5e4a-4cda-a1ed-6bb8ebc81a29"))
ksExtrusionSurfaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=GetclosedShell,put=PutclosedShell))
    short closedShell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        short * type,
        double * depth,
        double * draftValue,
        VARIANT_BOOL * draftOutward );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        short type,
        double depth,
        double draftValue,
        VARIANT_BOOL draftOutward );
    IDispatchPtr ExtrusionParam ( );
    IDispatchPtr GetDepthObject (
        VARIANT_BOOL normal );
    VARIANT_BOOL SetDepthObject (
        VARIANT_BOOL normal,
        IDispatch * obj );
    VARIANT_BOOL ResetDepthObject (
        VARIANT_BOOL normal );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    short GetclosedShell ( );
    void PutclosedShell ( short _val );
};

struct __declspec(uuid("0307bba8-c193-11d6-8734-00c0262cdd2c"))
ksFaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetnormalOrientation))
    VARIANT_BOOL normalOrientation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL IsPlanar ( );
    VARIANT_BOOL IsCone ( );
    VARIANT_BOOL IsCylinder ( );
    VARIANT_BOOL GetCylinderParam (
        double * h,
        double * r );
    IDispatchPtr GetOwnerEntity ( );
    IDispatchPtr GetSurface ( );
    IDispatchPtr LoopCollection ( );
    VARIANT_BOOL GetnormalOrientation ( );
    VARIANT_BOOL IsConnectedWith (
        IDispatch * faceDefinition );
    IDispatchPtr ConnectedFaceCollection ( );
    IDispatchPtr EdgeCollection ( );
    IDispatchPtr GetNextFace ( );
    VARIANT_BOOL IsTorus ( );
    VARIANT_BOOL IsSphere ( );
    VARIANT_BOOL IsNurbsSurface ( );
    VARIANT_BOOL IsRevolved ( );
    VARIANT_BOOL IsSwept ( );
    IDispatchPtr GetTessellation ( );
    double GetArea (
        unsigned long bitVector );
    IDispatchPtr GetEntity ( );
    VARIANT_BOOL IsValid ( );
    double GetAreaEx (
        unsigned long bitVector,
        double angleTolerance );
};

struct __declspec(uuid("0307bbab-c193-11d6-8734-00c0262cdd2c"))
ksEdgeDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsketchEdge))
    VARIANT_BOOL sketchEdge;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL IsStraight ( );
    IDispatchPtr GetOwnerEntity ( );
    IDispatchPtr GetCurve3D ( );
    IDispatchPtr GetAdjacentFace (
        VARIANT_BOOL facePlus );
    IDispatchPtr GetVertex (
        VARIANT_BOOL start );
    IDispatchPtr EdgeCollection (
        VARIANT_BOOL begin );
    IDispatchPtr OrientedEdgeCollection ( );
    VARIANT_BOOL IsArc ( );
    VARIANT_BOOL IsCircle ( );
    VARIANT_BOOL IsEllipse ( );
    VARIANT_BOOL IsNurbs ( );
    VARIANT_BOOL IsPeriodic ( );
    double GetLength (
        unsigned long bitVector );
    IDispatchPtr GetEntity ( );
    VARIANT_BOOL IsValid ( );
    VARIANT_BOOL GetsketchEdge ( );
    VARIANT_BOOL IsEllipseArc ( );
    VARIANT_BOOL IsPlanar ( );
    VARIANT_BOOL IsLineSeg ( );
};

struct __declspec(uuid("0307bbae-c193-11d6-8734-00c0262cdd2c"))
ksChamferDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettangent,put=Puttangent))
    VARIANT_BOOL tangent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetChamferParam (
        VARIANT_BOOL * transfer,
        double * distance1,
        double * distance2 );
    VARIANT_BOOL SetChamferParam (
        VARIANT_BOOL transfer,
        double distance1,
        double distance2 );
    IDispatchPtr array ( );

    // Properties:
    VARIANT_BOOL Gettangent ( );
    void Puttangent ( VARIANT_BOOL _val );
};

struct __declspec(uuid("0307bbb1-c193-11d6-8734-00c0262cdd2c"))
ksFilletDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius,put=Putradius))
    double radius;
    __declspec(property(get=Gettangent,put=Puttangent))
    VARIANT_BOOL tangent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr array ( );

    // Properties:
    double Getradius ( );
    void Putradius ( double _val );
    VARIANT_BOOL Gettangent ( );
    void Puttangent ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deefefea-c3e2-11d6-8734-00c0262cdd2c"))
ksBaseLoftDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetLoftParam (
        VARIANT_BOOL * closed,
        VARIANT_BOOL * flipVertex,
        VARIANT_BOOL * autoPath );
    VARIANT_BOOL SetLoftParam (
        VARIANT_BOOL closed,
        VARIANT_BOOL flipVertex,
        VARIANT_BOOL autoPath );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr Sketchs ( );
};

struct __declspec(uuid("deefefed-c3e2-11d6-8734-00c0262cdd2c"))
ksBossLoftDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetLoftParam (
        VARIANT_BOOL * closed,
        VARIANT_BOOL * flipVertex,
        VARIANT_BOOL * autoPath );
    VARIANT_BOOL SetLoftParam (
        VARIANT_BOOL closed,
        VARIANT_BOOL flipVertex,
        VARIANT_BOOL autoPath );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr Sketchs ( );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr GetDirectionalLine ( );
    VARIANT_BOOL SetDirectionalLine (
        IDispatch * sketch );
    IDispatchPtr ChooseParts ( );

    // Properties:
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("deefeff0-c3e2-11d6-8734-00c0262cdd2c"))
ksCutLoftDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcut,put=Putcut))
    VARIANT_BOOL cut;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetLoftParam (
        VARIANT_BOOL * closed,
        VARIANT_BOOL * flipVertex,
        VARIANT_BOOL * autoPath );
    VARIANT_BOOL SetLoftParam (
        VARIANT_BOOL closed,
        VARIANT_BOOL flipVertex,
        VARIANT_BOOL autoPath );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr Sketchs ( );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr GetDirectionalLine ( );
    VARIANT_BOOL SetDirectionalLine (
        IDispatch * sketch );
    IDispatchPtr ChooseParts ( );

    // Properties:
    VARIANT_BOOL Getcut ( );
    void Putcut ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("e04339b5-aa08-4717-8e50-90ed0e375624"))
ksLoftSurfaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetclosedShell,put=PutclosedShell))
    short closedShell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetLoftParam (
        VARIANT_BOOL * closed,
        VARIANT_BOOL * flipVertex,
        VARIANT_BOOL * autoPath );
    VARIANT_BOOL SetLoftParam (
        VARIANT_BOOL closed,
        VARIANT_BOOL flipVertex,
        VARIANT_BOOL autoPath );
    IDispatchPtr Sketchs ( );
    IDispatchPtr GetDirectionalLine ( );
    VARIANT_BOOL SetDirectionalLine (
        IDispatch * sketch );

    // Properties:
    short GetclosedShell ( );
    void PutclosedShell ( short _val );
};

struct __declspec(uuid("deefeff3-c3e2-11d6-8734-00c0262cdd2c"))
ksInclineDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getdirection,put=Putdirection))
    VARIANT_BOOL direction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr FaceArray ( );
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );

    // Properties:
    double Getangle ( );
    void Putangle ( double _val );
    VARIANT_BOOL Getdirection ( );
    void Putdirection ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deefeff6-c3e2-11d6-8734-00c0262cdd2c"))
ksShellDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getthickness,put=Putthickness))
    double thickness;
    __declspec(property(get=GetthinType,put=PutthinType))
    VARIANT_BOOL thinType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr FaceArray ( );

    // Properties:
    double Getthickness ( );
    void Putthickness ( double _val );
    VARIANT_BOOL GetthinType ( );
    void PutthinType ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deefeff9-c3e2-11d6-8734-00c0262cdd2c"))
ksBaseEvolutionDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsketchShiftType,put=PutsketchShiftType))
    short sketchShiftType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    IDispatchPtr PathPartArray ( );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    double GetPathLength (
        unsigned long bitVector );

    // Properties:
    short GetsketchShiftType ( );
    void PutsketchShiftType ( short _val );
};

struct __declspec(uuid("deefeffc-c3e2-11d6-8734-00c0262cdd2c"))
ksBossEvolutionDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsketchShiftType,put=PutsketchShiftType))
    short sketchShiftType;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    IDispatchPtr PathPartArray ( );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr ChooseBodies ( );
    double GetPathLength (
        unsigned long bitVector );
    IDispatchPtr ChooseParts ( );

    // Properties:
    short GetsketchShiftType ( );
    void PutsketchShiftType ( short _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("deefefff-c3e2-11d6-8734-00c0262cdd2c"))
ksCutEvolutionDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsketchShiftType,put=PutsketchShiftType))
    short sketchShiftType;
    __declspec(property(get=Getcut,put=Putcut))
    VARIANT_BOOL cut;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    IDispatchPtr PathPartArray ( );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );
    double GetPathLength (
        unsigned long bitVector );

    // Properties:
    short GetsketchShiftType ( );
    void PutsketchShiftType ( short _val );
    VARIANT_BOOL Getcut ( );
    void Putcut ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("2bd4c79e-e2c3-42e8-8fcc-b51ffbde9f69"))
ksEvolutionSurfaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsketchShiftType,put=PutsketchShiftType))
    short sketchShiftType;
    __declspec(property(get=GetclosedShell,put=PutclosedShell))
    VARIANT_BOOL closedShell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    IDispatchPtr PathPartArray ( );
    double GetPathLength (
        unsigned long bitVector );

    // Properties:
    short GetsketchShiftType ( );
    void PutsketchShiftType ( short _val );
    VARIANT_BOOL GetclosedShell ( );
    void PutclosedShell ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deeff002-c3e2-11d6-8734-00c0262cdd2c"))
ksRibDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getindex,put=Putindex))
    long index;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getside,put=Putside))
    long side;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    VARIANT_BOOL GetThinParam (
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );

    // Properties:
    long Getindex ( );
    void Putindex ( long _val );
    double Getangle ( );
    void Putangle ( double _val );
    long Getside ( );
    void Putside ( long _val );
};

struct __declspec(uuid("deeff005-c3e2-11d6-8734-00c0262cdd2c"))
ksCutByPlaneDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdirection,put=Putdirection))
    VARIANT_BOOL direction;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );

    // Properties:
    VARIANT_BOOL Getdirection ( );
    void Putdirection ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("deeff008-c3e2-11d6-8734-00c0262cdd2c"))
ksCutBySketchDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdirection,put=Putdirection))
    VARIANT_BOOL direction;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );

    // Properties:
    VARIANT_BOOL Getdirection ( );
    void Putdirection ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("deeff00b-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneOffsetDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getoffset,put=Putoffset))
    double offset;
    __declspec(property(get=Getdirection,put=Putdirection))
    VARIANT_BOOL direction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetSurface ( );

    // Properties:
    double Getoffset ( );
    void Putoffset ( double _val );
    VARIANT_BOOL Getdirection ( );
    void Putdirection ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deeff00e-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneAngleDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle,put=Putangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetAxis (
        IDispatch * axis );
    IDispatchPtr GetAxis ( );
    IDispatchPtr GetSurface ( );

    // Properties:
    double Getangle ( );
    void Putangle ( double _val );
};

struct __declspec(uuid("deeff011-c3e2-11d6-8734-00c0262cdd2c"))
ksPlane3PointsDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPoint (
        long number,
        IDispatch * point );
    IDispatchPtr GetPoint (
        long number );
    IDispatchPtr GetSurface ( );
};

struct __declspec(uuid("deeff014-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneNormalToSurfaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=GetautoBuilding,put=PutautoBuilding))
    double autoBuilding;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetFace (
        IDispatch * face );
    IDispatchPtr GetFace ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetSurface ( );

    // Properties:
    double Getangle ( );
    void Putangle ( double _val );
    double GetautoBuilding ( );
    void PutautoBuilding ( double _val );
};

struct __declspec(uuid("deeff017-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneTangentToSurfaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetchoosePlane,put=PutchoosePlane))
    short choosePlane;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetFace (
        IDispatch * face );
    IDispatchPtr GetFace ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetSurface ( );

    // Properties:
    short GetchoosePlane ( );
    void PutchoosePlane ( short _val );
    double Getangle ( );
    void Putangle ( double _val );
};

struct __declspec(uuid("deeff01a-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneEdgePointDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetEdge (
        IDispatch * edge );
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL SetPoint (
        IDispatch * point );
    IDispatchPtr GetPoint ( );
    IDispatchPtr GetSurface ( );
};

struct __declspec(uuid("deeff01d-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneParallelDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL SetPoint (
        IDispatch * point );
    IDispatchPtr GetPoint ( );
    IDispatchPtr GetSurface ( );
};

struct __declspec(uuid("deeff020-c3e2-11d6-8734-00c0262cdd2c"))
ksPlanePerpendicularDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetEdge (
        IDispatch * edge );
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL SetPoint (
        IDispatch * point );
    IDispatchPtr GetPoint ( );
    IDispatchPtr GetSurface ( );
};

struct __declspec(uuid("deeff023-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneLineToEdgeDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getparallel,put=Putparallel))
    VARIANT_BOOL parallel;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetEdgeFirst (
        IDispatch * edge1 );
    IDispatchPtr GetEdgeFirst ( );
    VARIANT_BOOL SetEdgeSecond (
        IDispatch * edge2 );
    IDispatchPtr GetEdgeSecond ( );
    IDispatchPtr GetSurface ( );

    // Properties:
    VARIANT_BOOL Getparallel ( );
    void Putparallel ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deeff026-c3e2-11d6-8734-00c0262cdd2c"))
ksPlaneLineToPlaneDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getparallel,put=Putparallel))
    VARIANT_BOOL parallel;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetEdge (
        IDispatch * edge );
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetSurface ( );

    // Properties:
    VARIANT_BOOL Getparallel ( );
    void Putparallel ( VARIANT_BOOL _val );
};

struct __declspec(uuid("deeff029-c3e2-11d6-8734-00c0262cdd2c"))
ksThinParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getthin,put=Putthin))
    VARIANT_BOOL thin;
    __declspec(property(get=GetthinType,put=PutthinType))
    short thinType;
    __declspec(property(get=GetnormalThickness,put=PutnormalThickness))
    double normalThickness;
    __declspec(property(get=GetreverseThickness,put=PutreverseThickness))
    double reverseThickness;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    VARIANT_BOOL Getthin ( );
    void Putthin ( VARIANT_BOOL _val );
    short GetthinType ( );
    void PutthinType ( short _val );
    double GetnormalThickness ( );
    void PutnormalThickness ( double _val );
    double GetreverseThickness ( );
    void PutreverseThickness ( double _val );
};

struct __declspec(uuid("deeff02c-c3e2-11d6-8734-00c0262cdd2c"))
ksExtrusionParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettypeNormal,put=PuttypeNormal))
    short typeNormal;
    __declspec(property(get=GetdepthNormal,put=PutdepthNormal))
    double depthNormal;
    __declspec(property(get=GetdraftValueNormal,put=PutdraftValueNormal))
    double draftValueNormal;
    __declspec(property(get=GetdraftOutwardNormal,put=PutdraftOutwardNormal))
    VARIANT_BOOL draftOutwardNormal;
    __declspec(property(get=GettypeReverse,put=PuttypeReverse))
    short typeReverse;
    __declspec(property(get=GetdepthReverse,put=PutdepthReverse))
    double depthReverse;
    __declspec(property(get=GetdraftValueReverse,put=PutdraftValueReverse))
    double draftValueReverse;
    __declspec(property(get=GetdraftOutwardReverse,put=PutdraftOutwardReverse))
    VARIANT_BOOL draftOutwardReverse;
    __declspec(property(get=Getdirection,put=Putdirection))
    long direction;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    short GettypeNormal ( );
    void PuttypeNormal ( short _val );
    double GetdepthNormal ( );
    void PutdepthNormal ( double _val );
    double GetdraftValueNormal ( );
    void PutdraftValueNormal ( double _val );
    VARIANT_BOOL GetdraftOutwardNormal ( );
    void PutdraftOutwardNormal ( VARIANT_BOOL _val );
    short GettypeReverse ( );
    void PuttypeReverse ( short _val );
    double GetdepthReverse ( );
    void PutdepthReverse ( double _val );
    double GetdraftValueReverse ( );
    void PutdraftValueReverse ( double _val );
    VARIANT_BOOL GetdraftOutwardReverse ( );
    void PutdraftOutwardReverse ( VARIANT_BOOL _val );
    long Getdirection ( );
    void Putdirection ( long _val );
};

struct __declspec(uuid("deeff02f-c3e2-11d6-8734-00c0262cdd2c"))
ksRotatedParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetangleNormal,put=PutangleNormal))
    double angleNormal;
    __declspec(property(get=GetangleReverse,put=PutangleReverse))
    double angleReverse;
    __declspec(property(get=GettoroidShape,put=PuttoroidShape))
    VARIANT_BOOL toroidShape;
    __declspec(property(get=Getdirection,put=Putdirection))
    long direction;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    double GetangleNormal ( );
    void PutangleNormal ( double _val );
    double GetangleReverse ( );
    void PutangleReverse ( double _val );
    VARIANT_BOOL GettoroidShape ( );
    void PuttoroidShape ( VARIANT_BOOL _val );
    long Getdirection ( );
    void Putdirection ( long _val );
};

struct __declspec(uuid("2dfacc61-c4a4-11d6-8734-00c0262cdd2c"))
ksColorParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=Getambient,put=Putambient))
    double ambient;
    __declspec(property(get=Getdiffuse,put=Putdiffuse))
    double diffuse;
    __declspec(property(get=Getspecularity,put=Putspecularity))
    double specularity;
    __declspec(property(get=Getshininess,put=Putshininess))
    double shininess;
    __declspec(property(get=Gettransparency,put=Puttransparency))
    double transparency;
    __declspec(property(get=Getemission,put=Putemission))
    double emission;
    __declspec(property(get=GetuseColor,put=PutuseColor))
    long useColor;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Clear ( );

    // Properties:
    long Getcolor ( );
    void Putcolor ( long _val );
    double Getambient ( );
    void Putambient ( double _val );
    double Getdiffuse ( );
    void Putdiffuse ( double _val );
    double Getspecularity ( );
    void Putspecularity ( double _val );
    double Getshininess ( );
    void Putshininess ( double _val );
    double Gettransparency ( );
    void Puttransparency ( double _val );
    double Getemission ( );
    void Putemission ( double _val );
    long GetuseColor ( );
    void PutuseColor ( long _val );
};

struct __declspec(uuid("2dfacc67-c4a4-11d6-8734-00c0262cdd2c"))
ksBaseRotatedDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=GettoroidShapeType,put=PuttoroidShapeType))
    VARIANT_BOOL toroidShapeType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        double * angle );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        double angle );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr RotatedParam ( );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    VARIANT_BOOL GettoroidShapeType ( );
    void PuttoroidShapeType ( VARIANT_BOOL _val );
};

struct __declspec(uuid("2dfacc6a-c4a4-11d6-8734-00c0262cdd2c"))
ksBossRotatedDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=GettoroidShapeType,put=PuttoroidShapeType))
    VARIANT_BOOL toroidShapeType;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        double * angle );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        double angle );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr RotatedParam ( );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    VARIANT_BOOL GettoroidShapeType ( );
    void PuttoroidShapeType ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("2dfacc6d-c4a4-11d6-8734-00c0262cdd2c"))
ksCutRotatedDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=GettoroidShapeType,put=PuttoroidShapeType))
    VARIANT_BOOL toroidShapeType;
    __declspec(property(get=Getcut,put=Putcut))
    VARIANT_BOOL cut;
    __declspec(property(get=GetchooseType,put=PutchooseType))
    long chooseType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        double * angle );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        double angle );
    VARIANT_BOOL GetThinParam (
        VARIANT_BOOL * thin,
        short * thinType,
        double * normalThickness,
        double * reverseTthickness );
    VARIANT_BOOL SetThinParam (
        VARIANT_BOOL thin,
        short thinType,
        double normalThickness,
        double reverseThickness );
    IDispatchPtr ThinParam ( );
    IDispatchPtr RotatedParam ( );
    IDispatchPtr ChooseBodies ( );
    IDispatchPtr ChooseParts ( );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    VARIANT_BOOL GettoroidShapeType ( );
    void PuttoroidShapeType ( VARIANT_BOOL _val );
    VARIANT_BOOL Getcut ( );
    void Putcut ( VARIANT_BOOL _val );
    long GetchooseType ( );
    void PutchooseType ( long _val );
};

struct __declspec(uuid("fd27841d-1374-4f7f-ae8a-c2a44f89120d"))
ksRotatedSurfaceDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdirectionType,put=PutdirectionType))
    short directionType;
    __declspec(property(get=GettoroidShapeType,put=PuttoroidShapeType))
    VARIANT_BOOL toroidShapeType;
    __declspec(property(get=GetclosedShell,put=PutclosedShell))
    short closedShell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetSketch (
        IDispatch * sketch );
    IDispatchPtr GetSketch ( );
    VARIANT_BOOL GetSideParam (
        VARIANT_BOOL side1,
        double * angle );
    VARIANT_BOOL SetSideParam (
        VARIANT_BOOL side1,
        double angle );
    IDispatchPtr RotatedParam ( );

    // Properties:
    short GetdirectionType ( );
    void PutdirectionType ( short _val );
    VARIANT_BOOL GettoroidShapeType ( );
    void PuttoroidShapeType ( VARIANT_BOOL _val );
    short GetclosedShell ( );
    void PutclosedShell ( short _val );
};

struct __declspec(uuid("2dfacc70-c4a4-11d6-8734-00c0262cdd2c"))
ksSketchDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle,put=Putangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL EndEdit ( );
    VARIANT_BOOL SetPlane (
        IDispatch * plane );
    IDispatchPtr GetPlane ( );
    VARIANT_BOOL GetLocation (
        double * x,
        double * y );
    VARIANT_BOOL SetLocation (
        double x,
        double y );
    VARIANT_BOOL GetLoftPoint (
        double * x,
        double * y );
    VARIANT_BOOL UserSetPlacement (
        _bstr_t prompt );
    IDispatchPtr BeginEdit ( );
    long AddProjectionOf (
        IDispatch * entity );
    VARIANT_BOOL SetLoftPoint (
        double x,
        double y );
    IDispatchPtr GetSurface ( );
    IDispatchPtr BeginEditEx (
        long readOnly );

    // Properties:
    double Getangle ( );
    void Putangle ( double _val );
};

struct __declspec(uuid("1a91a8ab-af8c-4ee3-86d4-0a9c00123195"))
ksRasterFormatParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getformat,put=Putformat))
    short format;
    __declspec(property(get=GetcolorBPP,put=PutcolorBPP))
    short colorBPP;
    __declspec(property(get=GetgreyScale,put=PutgreyScale))
    VARIANT_BOOL greyScale;
    __declspec(property(get=GetextResolution,put=PutextResolution))
    long extResolution;
    __declspec(property(get=GetextScale,put=PutextScale))
    double extScale;
    __declspec(property(get=GetcolorType,put=PutcolorType))
    short colorType;
    __declspec(property(get=GetonlyThinLine,put=PutonlyThinLine))
    VARIANT_BOOL onlyThinLine;
    __declspec(property(get=Getpages,put=Putpages))
    _bstr_t pages;
    __declspec(property(get=GetrangeIndex,put=PutrangeIndex))
    short rangeIndex;
    __declspec(property(get=GetmultiPageOutput,put=PutmultiPageOutput))
    VARIANT_BOOL multiPageOutput;
    __declspec(property(get=GetsaveWorkArea,put=PutsaveWorkArea))
    VARIANT_BOOL saveWorkArea;
    __declspec(property(get=GetreturnResultAsArrayBytes,put=PutreturnResultAsArrayBytes))
    VARIANT_BOOL returnResultAsArrayBytes;
    __declspec(property(get=GetresultArrayBytes,put=PutresultArrayBytes))
    _variant_t resultArrayBytes;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short Getformat ( );
    void Putformat ( short _val );
    short GetcolorBPP ( );
    void PutcolorBPP ( short _val );
    VARIANT_BOOL GetgreyScale ( );
    void PutgreyScale ( VARIANT_BOOL _val );
    long GetextResolution ( );
    void PutextResolution ( long _val );
    double GetextScale ( );
    void PutextScale ( double _val );
    short GetcolorType ( );
    void PutcolorType ( short _val );
    VARIANT_BOOL GetonlyThinLine ( );
    void PutonlyThinLine ( VARIANT_BOOL _val );
    _bstr_t Getpages ( );
    void Putpages ( _bstr_t _val );
    short GetrangeIndex ( );
    void PutrangeIndex ( short _val );
    VARIANT_BOOL GetmultiPageOutput ( );
    void PutmultiPageOutput ( VARIANT_BOOL _val );
    VARIANT_BOOL GetsaveWorkArea ( );
    void PutsaveWorkArea ( VARIANT_BOOL _val );
    VARIANT_BOOL GetreturnResultAsArrayBytes ( );
    void PutreturnResultAsArrayBytes ( VARIANT_BOOL _val );
    _variant_t GetresultArrayBytes ( );
    void PutresultArrayBytes ( const _variant_t & _val );
};

struct __declspec(uuid("0fd25ff9-ab0a-48f3-bad4-f193116c0887"))
ksAdditionFormatParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getformat,put=Putformat))
    short format;
    __declspec(property(get=GetformatBinary,put=PutformatBinary))
    VARIANT_BOOL formatBinary;
    __declspec(property(get=GettopolgyIncluded,put=PuttopolgyIncluded))
    VARIANT_BOOL topolgyIncluded;
    __declspec(property(get=GettextExportForm,put=PuttextExportForm))
    long textExportForm;
    __declspec(property(get=GetcreateLocalComponents,put=PutcreateLocalComponents))
    VARIANT_BOOL createLocalComponents;
    __declspec(property(get=GetstepType,put=PutstepType))
    long stepType;
    __declspec(property(get=Getstep,put=Putstep))
    double step;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=Getlength,put=Putlength))
    double length;
    __declspec(property(get=GetmaxTeselationCellCount,put=PutmaxTeselationCellCount))
    long maxTeselationCellCount;
    __declspec(property(get=GetlengthUnits,put=PutlengthUnits))
    long lengthUnits;
    __declspec(property(get=GetstitchSurfaces,put=PutstitchSurfaces))
    VARIANT_BOOL stitchSurfaces;
    __declspec(property(get=GetstitchPrecision,put=PutstitchPrecision))
    double stitchPrecision;
    __declspec(property(get=Getauthor,put=Putauthor))
    _bstr_t author;
    __declspec(property(get=Getorganization,put=Putorganization))
    _bstr_t organization;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=Getpassword,put=Putpassword))
    _bstr_t password;
    __declspec(property(get=GetneedCreateComponentsFiles,put=PutneedCreateComponentsFiles))
    VARIANT_BOOL needCreateComponentsFiles;
    __declspec(property(get=GetsaveResultDocument,put=PutsaveResultDocument))
    VARIANT_BOOL saveResultDocument;
    __declspec(property(get=Getconfiguration,put=Putconfiguration))
    _variant_t configuration;
    __declspec(property(get=GetconfigurationFileName,put=PutconfigurationFileName))
    _bstr_t configurationFileName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    long GetObjectsOptions (
        long option );
    long SetObjectsOptions (
        long option,
        long set );
    IDispatchPtr GetPlacement ( );
    long SetPlacement (
        IDispatch * p );
    long SaveConfigurationFile (
        _bstr_t fileName );
    long LoadConfigurationFile (
        _bstr_t fileName );

    // Properties:
    short Getformat ( );
    void Putformat ( short _val );
    VARIANT_BOOL GetformatBinary ( );
    void PutformatBinary ( VARIANT_BOOL _val );
    VARIANT_BOOL GettopolgyIncluded ( );
    void PuttopolgyIncluded ( VARIANT_BOOL _val );
    long GettextExportForm ( );
    void PuttextExportForm ( long _val );
    VARIANT_BOOL GetcreateLocalComponents ( );
    void PutcreateLocalComponents ( VARIANT_BOOL _val );
    long GetstepType ( );
    void PutstepType ( long _val );
    double Getstep ( );
    void Putstep ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    double Getlength ( );
    void Putlength ( double _val );
    long GetmaxTeselationCellCount ( );
    void PutmaxTeselationCellCount ( long _val );
    long GetlengthUnits ( );
    void PutlengthUnits ( long _val );
    VARIANT_BOOL GetstitchSurfaces ( );
    void PutstitchSurfaces ( VARIANT_BOOL _val );
    double GetstitchPrecision ( );
    void PutstitchPrecision ( double _val );
    _bstr_t Getauthor ( );
    void Putauthor ( _bstr_t _val );
    _bstr_t Getorganization ( );
    void Putorganization ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    _bstr_t Getpassword ( );
    void Putpassword ( _bstr_t _val );
    VARIANT_BOOL GetneedCreateComponentsFiles ( );
    void PutneedCreateComponentsFiles ( VARIANT_BOOL _val );
    VARIANT_BOOL GetsaveResultDocument ( );
    void PutsaveResultDocument ( VARIANT_BOOL _val );
    _variant_t Getconfiguration ( );
    void Putconfiguration ( const _variant_t & _val );
    _bstr_t GetconfigurationFileName ( );
    void PutconfigurationFileName ( _bstr_t _val );
};

struct __declspec(uuid("862e250d-9db1-47e8-8ee2-9be2d2453d5a"))
ksConstraintParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetconstrType,put=PutconstrType))
    short constrType;
    __declspec(property(get=Getindex,put=Putindex))
    int index;
    __declspec(property(get=Getpartner,put=Putpartner))
    long partner;
    __declspec(property(get=GetpartnerIndex,put=PutpartnerIndex))
    int partnerIndex;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    short GetconstrType ( );
    void PutconstrType ( short _val );
    int Getindex ( );
    void Putindex ( int _val );
    long Getpartner ( );
    void Putpartner ( long _val );
    int GetpartnerIndex ( );
    void PutpartnerIndex ( int _val );
};

struct __declspec(uuid("78a2c35e-a7da-414e-b90a-f19998ec7bd1"))
ksImportedSurfaceDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL BeginCurve ( );
    VARIANT_BOOL AddPoint (
        double x,
        double y,
        double z );
    VARIANT_BOOL EndCurve ( );
    VARIANT_BOOL AddCurve (
        const _variant_t & arr );
};

struct __declspec(uuid("0e95ace0-0e73-406f-ae94-e8a0592e298d"))
ksFaceCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    IDispatchPtr GetByName (
        _bstr_t name,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("a7257e73-eb61-4602-bc8b-2d00ea4aa062"))
ksVertexDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettopologyVertex))
    VARIANT_BOOL topologyVertex;
    __declspec(property(get=GetfreeVertex))
    VARIANT_BOOL freeVertex;
    __declspec(property(get=GetsketchVertex))
    VARIANT_BOOL sketchVertex;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetOwnerEntity ( );
    VARIANT_BOOL GettopologyVertex ( );
    VARIANT_BOOL GetfreeVertex ( );
    VARIANT_BOOL GetsketchVertex ( );
};

struct __declspec(uuid("b810650e-7819-485c-90d2-adeb647ae5e2"))
ksTessellation : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetFacetsCount ( );
    VARIANT_BOOL GetFacetData (
        int index,
        IDispatch * facet );
    long GetPointsCount ( );
    VARIANT_BOOL GetPoint (
        int index,
        float * x,
        float * y,
        float * z );
    VARIANT_BOOL GetNormal (
        int index,
        float * x,
        float * y,
        float * z );
    VARIANT_BOOL SetFacetSize (
        double sag );
    double GetFacetSize ( );
    IDispatchPtr GetFacet ( );
    VARIANT_BOOL refresh ( );
    VARIANT_BOOL GetFacetPoints (
        VARIANT * points,
        VARIANT * indexes );
    VARIANT_BOOL GetFacetNormals (
        VARIANT * normals );
    VARIANT_BOOL GetFacetParams (
        VARIANT * params );
    VARIANT_BOOL SetFacetSag (
        double sag );
    double GetFacetSag ( );
    VARIANT_BOOL SetFacetAngle (
        double angle );
    double GetFacetAngle ( );
    VARIANT_BOOL SetNeedParams (
        VARIANT_BOOL need );
    VARIANT_BOOL GetNeedParams ( );
};

struct __declspec(uuid("eb6afbc0-c387-4e07-b24e-ddf2b7926a26"))
ksFacet : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetPointsCount ( );
    VARIANT_BOOL GetPoint (
        int index,
        float * x,
        float * y,
        float * z );
    VARIANT_BOOL GetNormal (
        int index,
        float * x,
        float * y,
        float * z );
    int GetTessellationIndex (
        int index );
};

struct __declspec(uuid("abc84fe5-3945-4a0b-820a-719bf4b79224"))
ksMeasurer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getangle))
    double angle;
    __declspec(property(get=Getdistance))
    double distance;
    __declspec(property(get=GetMaxDistance))
    double MaxDistance;
    __declspec(property(get=GetNormalDistance))
    double NormalDistance;
    __declspec(property(get=GetMeasureResult))
    long MeasureResult;
    __declspec(property(get=GetMinDistance))
    double MinDistance;
    __declspec(property(get=Getunit,put=Putunit))
    unsigned long unit;
    __declspec(property(get=GetextendObject1,put=PutextendObject1))
    VARIANT_BOOL extendObject1;
    __declspec(property(get=GetextendObject2,put=PutextendObject2))
    VARIANT_BOOL extendObject2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetObject1 (
        IDispatch * obj );
    VARIANT_BOOL SetObject2 (
        IDispatch * obj );
    IDispatchPtr GetObject1 ( );
    IDispatchPtr GetObject2 ( );
    VARIANT_BOOL Calc ( );
    VARIANT_BOOL IsAngleValid ( );
    double Getangle ( );
    double Getdistance ( );
    VARIANT_BOOL GetPoint1 (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetPoint2 (
        double * x,
        double * y,
        double * z );
    double GetMaxDistance ( );
    double GetNormalDistance ( );
    VARIANT_BOOL GetMaxPoint1 (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetMaxPoint2 (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetNormalPoint1 (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetNormalPoint2 (
        double * x,
        double * y,
        double * z );
    long GetMeasureResult ( );
    double GetMinDistance ( );
    VARIANT_BOOL GetMinPoint1 (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetMinPoint2 (
        double * x,
        double * y,
        double * z );

    // Properties:
    unsigned long Getunit ( );
    void Putunit ( unsigned long _val );
    VARIANT_BOOL GetextendObject1 ( );
    void PutextendObject1 ( VARIANT_BOOL _val );
    VARIANT_BOOL GetextendObject2 ( );
    void PutextendObject2 ( VARIANT_BOOL _val );
};

struct __declspec(uuid("cfc49c01-7653-4845-93fd-13428f5d58ec"))
ksBodyCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    long FindIt (
        IDispatch * entity );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL Add (
        IDispatch * body );
    VARIANT_BOOL AddAt (
        IDispatch * body,
        long index );
    VARIANT_BOOL AddBefore (
        IDispatch * body,
        IDispatch * base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        IDispatch * body );
    VARIANT_BOOL SetByIndex (
        IDispatch * body,
        long index );
};

struct __declspec(uuid("03efc9dd-e05a-4277-bc7c-4fd499a252de"))
ksBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiBodyParts))
    VARIANT_BOOL MultiBodyParts;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetGabarit (
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );
    IDispatchPtr FaceCollection ( );
    VARIANT_BOOL IsSolid ( );
    IDispatchPtr CalcMassInertiaProperties (
        unsigned long bitVector );
    VARIANT_BOOL CurveIntersection (
        IDispatch * curve,
        IDispatch * fases,
        IDispatch * points );
    IDispatchPtr CheckIntersectionWithBody (
        IDispatch * otherBody,
        VARIANT_BOOL checkTangent );
    VARIANT_BOOL GetMultiBodyParts ( );
    IDispatchPtr GetFeature ( );
    long GetIntersectionFacesWithBody (
        IDispatch * otherBody,
        VARIANT * intersectionFaces1,
        VARIANT * intersectionFaces2,
        VARIANT * connectedFaces1,
        VARIANT * connectedFaces2 );
};

struct __declspec(uuid("963cb6e1-b9bf-4234-964a-13bfe6c0282a"))
ksSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBoundaryCount))
    long BoundaryCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetGabarit (
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );
    VARIANT_BOOL GetPoint (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetNormal (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetTangentVectorU (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetTangentVectorV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeU (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeUU (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeVV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeUV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeUUU (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeVVV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeUVV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeUUV (
        double paramU,
        double paramV,
        double * x,
        double * y,
        double * z );
    double GetParamUMin ( );
    double GetParamUMax ( );
    double GetParamVMin ( );
    double GetParamVMax ( );
    VARIANT_BOOL IsClosedU ( );
    VARIANT_BOOL IsClosedV ( );
    VARIANT_BOOL IsPlane ( );
    VARIANT_BOOL IsCone ( );
    VARIANT_BOOL IsCylinder ( );
    VARIANT_BOOL IsTorus ( );
    VARIANT_BOOL IsSphere ( );
    VARIANT_BOOL IsNurbsSurface ( );
    VARIANT_BOOL IsRevolved ( );
    VARIANT_BOOL IsSwept ( );
    IDispatchPtr GetSurfaceParam ( );
    double GetArea (
        unsigned long bitVector );
    VARIANT_BOOL NearPointProjection (
        double x,
        double y,
        double z,
        double * u,
        double * v,
        VARIANT_BOOL ext );
    VARIANT_BOOL CurveIntersection (
        IDispatch * curve,
        IDispatch * points,
        VARIANT_BOOL extSurf,
        VARIANT_BOOL extCurve );
    IDispatchPtr GetNurbsSurfaceParam ( );
    VARIANT_BOOL GetBoundaryUVNurbs (
        VARIANT_BOOL uv,
        VARIANT_BOOL closed,
        long loopIndex,
        long edgeIndex,
        long * degree,
        VARIANT * points,
        VARIANT * weights,
        VARIANT * knots,
        double * tMin,
        double * tMax );
    long GetBoundaryCount ( );
    long GetEdgesCount (
        long loopIndex );
    double GetAreaEx (
        unsigned long bitVector,
        double angleTolerance );
};

struct __declspec(uuid("6096a4fd-970b-468c-815e-37ca1970a203"))
ksEdgeCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("88c32a80-3735-4e18-a02e-9b2a8f0a90e3"))
ksOrientedEdge : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL GetOrientation ( );
    IDispatchPtr GetOwnerEntity ( );
    IDispatchPtr GetNext ( );
    VARIANT_BOOL GetSameSense ( );
    IDispatchPtr GetAdjacentFace (
        long facePlus );
    long IsStraight ( );
    long IsSeam ( );
    long IsPole ( );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("5ce8909d-cf3d-418f-a9b9-0a12b23916c0"))
ksOrientedEdgeCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("22bc5c86-cf58-45e4-aa46-5e8d5a825798"))
ksLoop : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr OrientedEdgeCollection (
        IDispatch * edge );
    IDispatchPtr EdgeCollection ( );
    VARIANT_BOOL IsOuter ( );
    double GetLength (
        unsigned long bitVector );
};

struct __declspec(uuid("1bd7207e-36aa-47df-913e-ad26de6c16e8"))
ksLoopCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
};

struct __declspec(uuid("7572648a-d4ee-41fe-8d74-ec7d1f91bde2"))
ksCurve3D : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetPoint (
        double paramT,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetTangentVector (
        double paramT,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetNormal (
        double paramT,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeT (
        double paramT,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeTT (
        double paramT,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetDerivativeTTT (
        double paramT,
        double * x,
        double * y,
        double * z );
    double GetParamMin ( );
    double GetParamMax ( );
    VARIANT_BOOL IsClosed ( );
    VARIANT_BOOL IsPeriodic ( );
    double GetMetricLength (
        double startParam,
        double endParam );
    VARIANT_BOOL GetGabarit (
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );
    VARIANT_BOOL IsDegenerate ( );
    VARIANT_BOOL IsPlanar ( );
    VARIANT_BOOL IsLineSeg ( );
    VARIANT_BOOL IsArc ( );
    VARIANT_BOOL IsCircle ( );
    VARIANT_BOOL IsEllipse ( );
    VARIANT_BOOL IsNurbs ( );
    IDispatchPtr GetCurveParam ( );
    double GetLength (
        unsigned long bitVector );
    VARIANT_BOOL NearPointProjection (
        double x,
        double y,
        double z,
        double * t,
        VARIANT_BOOL ext );
    IDispatchPtr GetNurbs3dParam ( );
    _variant_t CalculatePolygon (
        double step );
    VARIANT_BOOL IsEllipseArc ( );
    VARIANT_BOOL IsStraight ( );
};

struct __declspec(uuid("dc8f6a7b-ff16-46ff-986d-2f7e1f6b25c4"))
ksLineSeg3dParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetPointFirst (
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetPointLast (
        double * x,
        double * y,
        double * z );
};

struct __declspec(uuid("82758442-c9eb-48f7-b304-083c5e64d4e0"))
ksCircle3dParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius))
    double radius;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getradius ( );
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("5b8082b8-6ad3-4509-826d-d23b7f613213"))
ksEllipse3dParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetmajorRadius))
    double majorRadius;
    __declspec(property(get=GetminorRadius))
    double minorRadius;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetmajorRadius ( );
    double GetminorRadius ( );
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("6a6f6b95-d100-4d54-a430-70a42d342917"))
ksPlaneParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("ccfa0d95-0834-4f92-988b-6e477ad67589"))
ksConeParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius))
    double radius;
    __declspec(property(get=Getheight))
    double height;
    __declspec(property(get=Getangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getradius ( );
    double Getheight ( );
    double Getangle ( );
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("5d462836-cf69-4995-ab78-8c7a83d09bd7"))
ksCylinderParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius))
    double radius;
    __declspec(property(get=Getheight))
    double height;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getradius ( );
    double Getheight ( );
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("c32977f3-3ca7-4d56-8ae7-4963e6851b75"))
ksSphereParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius))
    double radius;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getradius ( );
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("fda3b147-baf1-4f75-99aa-39d11323ea97"))
ksTorusParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius))
    double radius;
    __declspec(property(get=GetgeneratrixRadius))
    double generatrixRadius;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double Getradius ( );
    double GetgeneratrixRadius ( );
    IDispatchPtr GetPlacement ( );
};

struct __declspec(uuid("f1cd604d-1d26-4f6b-8f94-f112133e6162"))
ksNurbsPoint3dParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getweight))
    double weight;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetPoint (
        double * x,
        double * y,
        double * z );
    double Getweight ( );
};

struct __declspec(uuid("a12b63e8-9e0a-4854-b724-e18275b9ff20"))
ksNurbsSurfaceParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    short GetDegree (
        VARIANT_BOOL paramU );
    VARIANT_BOOL GetClose (
        VARIANT_BOOL paramU );
    IDispatchPtr GetPointCollection ( );
    IDispatchPtr GetKnotCollection (
        VARIANT_BOOL paramU );
    VARIANT_BOOL GetPeriodic (
        VARIANT_BOOL paramU );
    VARIANT_BOOL GetNurbsParams (
        VARIANT_BOOL closedV,
        VARIANT_BOOL closedU,
        long * degreeV,
        long * degreeU,
        long * nPV,
        long * nPU,
        VARIANT * points,
        VARIANT * weights,
        VARIANT * knotsV,
        VARIANT * knotsU );
    VARIANT_BOOL GetBoundaryUVNurbs (
        VARIANT_BOOL uv,
        VARIANT_BOOL closed,
        long loopIndex,
        long edgeIndex,
        long * degree,
        VARIANT * points,
        VARIANT * weights,
        VARIANT * knots,
        double * tMin,
        double * tMax );
    long GetBoundaryCount ( );
    long GetEdgesCount (
        long loopIndex );
    VARIANT_BOOL GetMinMaxParameters (
        VARIANT_BOOL closedV,
        VARIANT_BOOL closedU,
        double * uMin,
        double * uMax,
        double * vMin,
        double * vMax );
};

struct __declspec(uuid("4dddaedb-2819-42d9-bdbb-4ccbc98d76df"))
ksNurbs3dParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdegree))
    short degree;
    __declspec(property(get=Getclose))
    VARIANT_BOOL close;
    __declspec(property(get=Getperiodic))
    VARIANT_BOOL periodic;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    short Getdegree ( );
    VARIANT_BOOL Getclose ( );
    IDispatchPtr GetPointCollection ( );
    IDispatchPtr GetKnotCollection ( );
    VARIANT_BOOL Getperiodic ( );
    VARIANT_BOOL GetNurbsPoints3DParams (
        VARIANT_BOOL closed,
        VARIANT * points,
        VARIANT * weights,
        VARIANT * knots );
    VARIANT_BOOL GetMinMaxParameters (
        VARIANT_BOOL closed,
        double * tMin,
        double * tMax );
};

struct __declspec(uuid("483e9889-e1ca-4ca5-be4e-ecb3d5cf0126"))
ksNurbsKnotCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    double First ( );
    double Last ( );
    double Next ( );
    double Prev ( );
    double GetByIndex (
        long index );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL Add (
        double entity );
    VARIANT_BOOL AddAt (
        double entity,
        long index );
    VARIANT_BOOL AddBefore (
        double entity,
        double base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        double entity );
    VARIANT_BOOL SetByIndex (
        double entity,
        long index );
};

struct __declspec(uuid("84af9c81-1795-4631-b58a-101732262e75"))
ksNurbsPoint3dCollCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL Add (
        IDispatch * entity );
    VARIANT_BOOL AddAt (
        IDispatch * entity,
        long index );
    VARIANT_BOOL AddBefore (
        IDispatch * entity,
        IDispatch * base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        IDispatch * entity );
    VARIANT_BOOL SetByIndex (
        IDispatch * entity,
        long index );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("3ad5e519-74e2-4d3b-b6a3-b1e81f1006f1"))
ksNurbsPoint3dCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL Add (
        IDispatch * entity );
    VARIANT_BOOL AddAt (
        IDispatch * entity,
        long index );
    VARIANT_BOOL AddBefore (
        IDispatch * entity,
        IDispatch * base );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        IDispatch * entity );
    VARIANT_BOOL SetByIndex (
        IDispatch * entity,
        long index );
    long FindIt (
        IDispatch * entity );
};

struct __declspec(uuid("bf65b990-c2dc-4a12-9eb7-3e868608af47"))
ksViewProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetuserProjectionIndex))
    long userProjectionIndex;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=Getscale,put=Putscale))
    double scale;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL IsCurrent ( );
    VARIANT_BOOL SetCurrent ( );
    IDispatchPtr GetPlacement ( );
    VARIANT_BOOL SetPlacement (
        IDispatch * place );
    long GetuserProjectionIndex ( );
    VARIANT_BOOL SetMatrix3D (
        const _variant_t & Matrix3D );
    long GetViewProjectonType ( );

    // Properties:
    _bstr_t Getname ( );
    void Putname ( _bstr_t _val );
    double Getscale ( );
    void Putscale ( double _val );
};

struct __declspec(uuid("a174f872-c800-409e-9fb2-ff5b89d8b4b8"))
ksViewProjectionCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetviewProjectionScheme,put=PutviewProjectionScheme))
    long viewProjectionScheme;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetByIndex (
        long index );
    IDispatchPtr GetByName (
        _bstr_t name,
        VARIANT_BOOL testFullName,
        VARIANT_BOOL testIgnoreCase );
    long FindIt (
        IDispatch * entity );
    VARIANT_BOOL Add (
        IDispatch * entity );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        IDispatch * entity );
    VARIANT_BOOL DetachByName (
        _bstr_t name );
    IDispatchPtr NewViewProjection ( );
    VARIANT_BOOL SetBaseUserOrientation (
        const _variant_t & place );
    _variant_t GetBaseUserOrientation ( );
    IDispatchPtr AddUnfoldProjection (
        const _variant_t & place );

    // Properties:
    long GetviewProjectionScheme ( );
    void PutviewProjectionScheme ( long _val );
};

struct __declspec(uuid("be41850c-cfc5-40d4-ae49-37aa391bcf4b"))
ksSelectionMng : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Select (
        IDispatch * obj );
    VARIANT_BOOL Unselect (
        IDispatch * obj );
    VARIANT_BOOL UnselectAll ( );
    VARIANT_BOOL IsSelected (
        IDispatch * obj );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetObjectByIndex (
        long index );
    long GetObjectType (
        long index );
};

struct __declspec(uuid("8f2aa755-d9d1-42a0-97bf-c92548ce7232"))
ksChooseMng : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcurrentManagerType,put=PutcurrentManagerType))
    long currentManagerType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Choose (
        IDispatch * obj );
    VARIANT_BOOL UnChoose (
        IDispatch * obj );
    VARIANT_BOOL UnChooseAll ( );
    VARIANT_BOOL IsChoosen (
        IDispatch * obj );
    long GetCount ( );
    IDispatchPtr First ( );
    IDispatchPtr Last ( );
    IDispatchPtr Next ( );
    IDispatchPtr Prev ( );
    IDispatchPtr GetObjectByIndex (
        long index );
    long GetObjectType (
        long index );
    long GetManagerIndex (
        IDispatch * obj );

    // Properties:
    long GetcurrentManagerType ( );
    void PutcurrentManagerType ( long _val );
};

struct __declspec(uuid("7dcbcc76-5041-4c1e-9b33-12b1352d6d57"))
ksArc3dParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getradius))
    double radius;
    __declspec(property(get=Getangle))
    double angle;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetPlacement ( );
    double Getradius ( );
    double Getangle ( );
};

struct __declspec(uuid("9f8de1dc-1268-4785-9217-1b0dd59b85fa"))
ksTreeNodeParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    long type;
    __declspec(property(get=Getname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    long Gettype ( );
    _bstr_t Getname ( );
    IDispatchPtr GetComment ( );
    IDispatchPtr GetNodes ( );
};

struct __declspec(uuid("c81eb1da-bcb0-491a-8d22-923bf817d572"))
ksAssociationViewParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetviewType))
    short viewType;
    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=GetprojectionName,put=PutprojectionName))
    _bstr_t projectionName;
    __declspec(property(get=GetprojectionLink,put=PutprojectionLink))
    VARIANT_BOOL projectionLink;
    __declspec(property(get=Getdisassembly,put=Putdisassembly))
    VARIANT_BOOL disassembly;
    __declspec(property(get=GetvisibleLinesStyle,put=PutvisibleLinesStyle))
    long visibleLinesStyle;
    __declspec(property(get=GethiddenLinesStyle,put=PuthiddenLinesStyle))
    long hiddenLinesStyle;
    __declspec(property(get=GettangentEdgesStyle,put=PuttangentEdgesStyle))
    long tangentEdgesStyle;
    __declspec(property(get=GethiddenLinesShow,put=PuthiddenLinesShow))
    VARIANT_BOOL hiddenLinesShow;
    __declspec(property(get=GettangentEdgesShow,put=PuttangentEdgesShow))
    VARIANT_BOOL tangentEdgesShow;
    __declspec(property(get=GetprojBodies,put=PutprojBodies))
    VARIANT_BOOL projBodies;
    __declspec(property(get=GetprojSurfaces,put=PutprojSurfaces))
    VARIANT_BOOL projSurfaces;
    __declspec(property(get=GetprojThreads,put=PutprojThreads))
    VARIANT_BOOL projThreads;
    __declspec(property(get=Getsection,put=Putsection))
    VARIANT_BOOL section;
    __declspec(property(get=GetsameHatch,put=PutsameHatch))
    VARIANT_BOOL sameHatch;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetViewParam ( );
    short GetviewType ( );
    IDispatchPtr GetHatchParam ( );
    VARIANT_BOOL SetDimensionLayoutScaling (
        VARIANT_BOOL scaling );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t GetprojectionName ( );
    void PutprojectionName ( _bstr_t _val );
    VARIANT_BOOL GetprojectionLink ( );
    void PutprojectionLink ( VARIANT_BOOL _val );
    VARIANT_BOOL Getdisassembly ( );
    void Putdisassembly ( VARIANT_BOOL _val );
    long GetvisibleLinesStyle ( );
    void PutvisibleLinesStyle ( long _val );
    long GethiddenLinesStyle ( );
    void PuthiddenLinesStyle ( long _val );
    long GettangentEdgesStyle ( );
    void PuttangentEdgesStyle ( long _val );
    VARIANT_BOOL GethiddenLinesShow ( );
    void PuthiddenLinesShow ( VARIANT_BOOL _val );
    VARIANT_BOOL GettangentEdgesShow ( );
    void PuttangentEdgesShow ( VARIANT_BOOL _val );
    VARIANT_BOOL GetprojBodies ( );
    void PutprojBodies ( VARIANT_BOOL _val );
    VARIANT_BOOL GetprojSurfaces ( );
    void PutprojSurfaces ( VARIANT_BOOL _val );
    VARIANT_BOOL GetprojThreads ( );
    void PutprojThreads ( VARIANT_BOOL _val );
    VARIANT_BOOL Getsection ( );
    void Putsection ( VARIANT_BOOL _val );
    VARIANT_BOOL GetsameHatch ( );
    void PutsameHatch ( VARIANT_BOOL _val );
};

struct __declspec(uuid("5a42b962-8f78-4557-b17a-1b871f8dbdb5"))
ksViewColorParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcolor,put=Putcolor))
    long color;
    __declspec(property(get=GetuseGradient,put=PutuseGradient))
    VARIANT_BOOL useGradient;
    __declspec(property(get=GettopColor,put=PuttopColor))
    long topColor;
    __declspec(property(get=GetbottomColor,put=PutbottomColor))
    long bottomColor;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long Getcolor ( );
    void Putcolor ( long _val );
    VARIANT_BOOL GetuseGradient ( );
    void PutuseGradient ( VARIANT_BOOL _val );
    long GettopColor ( );
    void PuttopColor ( long _val );
    long GetbottomColor ( );
    void PutbottomColor ( long _val );
};

struct __declspec(uuid("afe694d7-c1e5-468f-99b0-fe4c60c49899"))
ksAxisLineParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetBegPoint ( );
    IDispatchPtr GetEndPoint ( );
};

struct __declspec(uuid("33706d56-d085-4840-833b-435aeb00be2a"))
ksTextDocumentParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfileName,put=PutfileName))
    _bstr_t fileName;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=Getauthor,put=Putauthor))
    _bstr_t author;
    __declspec(property(get=Gettype,put=Puttype))
    short type;
    __declspec(property(get=Getregime,put=Putregime))
    short regime;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );
    IDispatchPtr GetFirstSheet ( );
    IDispatchPtr GetEvenSheet ( );
    IDispatchPtr GetOddSheet ( );
    IDispatchPtr GetArrTitleSheet ( );
    IDispatchPtr GetArrTailSheet ( );
    IDispatchPtr GetSheetParam ( );

    // Properties:
    _bstr_t GetfileName ( );
    void PutfileName ( _bstr_t _val );
    _bstr_t Getcomment ( );
    void Putcomment ( _bstr_t _val );
    _bstr_t Getauthor ( );
    void Putauthor ( _bstr_t _val );
    short Gettype ( );
    void Puttype ( short _val );
    short Getregime ( );
    void Putregime ( short _val );
};

struct __declspec(uuid("25076616-4949-455e-a45c-1b801884d825"))
ksRemoteElementParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstyle,put=Putstyle))
    long style;
    __declspec(property(get=GetsignType,put=PutsignType))
    long signType;
    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=Getwidth,put=Putwidth))
    double width;
    __declspec(property(get=Getheight,put=Putheight))
    double height;
    __declspec(property(get=Getradius,put=Putradius))
    double radius;
    __declspec(property(get=Getsmooth,put=Putsmooth))
    double smooth;
    __declspec(property(get=GetshelfX,put=PutshelfX))
    double shelfX;
    __declspec(property(get=GetshelfY,put=PutshelfY))
    double shelfY;
    __declspec(property(get=GetshelfDir,put=PutshelfDir))
    short shelfDir;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init (
        long style );
    IDispatchPtr GetpText ( );
    VARIANT_BOOL SetpText (
        IDispatch * pText );

    // Properties:
    long Getstyle ( );
    void Putstyle ( long _val );
    long GetsignType ( );
    void PutsignType ( long _val );
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    double Getwidth ( );
    void Putwidth ( double _val );
    double Getheight ( );
    void Putheight ( double _val );
    double Getradius ( );
    void Putradius ( double _val );
    double Getsmooth ( );
    void Putsmooth ( double _val );
    double GetshelfX ( );
    void PutshelfX ( double _val );
    double GetshelfY ( );
    void PutshelfY ( double _val );
    short GetshelfDir ( );
    void PutshelfDir ( short _val );
};

struct __declspec(uuid("82f60797-d69c-4eb4-9f1a-24d625d5eafa"))
ksDeletedCopyCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL refresh ( );
    long GetCount ( );
    VARIANT_BOOL First (
        long * index1,
        long * index2 );
    VARIANT_BOOL Last (
        long * index1,
        long * index2 );
    VARIANT_BOOL Next (
        long * index1,
        long * index2 );
    VARIANT_BOOL Prev (
        long * index1,
        long * index2 );
    VARIANT_BOOL GetByIndex (
        long index,
        long * index1,
        long * index2 );
    VARIANT_BOOL Clear ( );
    VARIANT_BOOL Add (
        long index1,
        long index2 );
    VARIANT_BOOL AddAt (
        long index1,
        long index2,
        long index );
    VARIANT_BOOL DetachByIndex (
        long index );
    VARIANT_BOOL DetachByBody (
        long index1,
        long index2 );
    VARIANT_BOOL SetByIndex (
        long index1,
        long index2,
        long index );
    long FindIt (
        long index1,
        long index2 );
};

struct __declspec(uuid("aacad820-7790-46eb-b17f-06ae42215ed7"))
ksCopyObjectParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetobjRef,put=PutobjRef))
    long objRef;
    __declspec(property(get=GetxOld,put=PutxOld))
    double xOld;
    __declspec(property(get=GetyOld,put=PutyOld))
    double yOld;
    __declspec(property(get=GetxNew,put=PutxNew))
    double xNew;
    __declspec(property(get=GetyNew,put=PutyNew))
    double yNew;
    __declspec(property(get=Getscale,put=Putscale))
    double scale;
    __declspec(property(get=Getangle,put=Putangle))
    double angle;
    __declspec(property(get=GetattrCopy,put=PutattrCopy))
    VARIANT_BOOL attrCopy;
    __declspec(property(get=GetdimLineScale,put=PutdimLineScale))
    VARIANT_BOOL dimLineScale;
    __declspec(property(get=GetspcObjCopy,put=PutspcObjCopy))
    VARIANT_BOOL spcObjCopy;
    __declspec(property(get=GetstoragesCopy,put=PutstoragesCopy))
    VARIANT_BOOL storagesCopy;
    __declspec(property(get=GethyperLinksCopy,put=PuthyperLinksCopy))
    VARIANT_BOOL hyperLinksCopy;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    long GetobjRef ( );
    void PutobjRef ( long _val );
    double GetxOld ( );
    void PutxOld ( double _val );
    double GetyOld ( );
    void PutyOld ( double _val );
    double GetxNew ( );
    void PutxNew ( double _val );
    double GetyNew ( );
    void PutyNew ( double _val );
    double Getscale ( );
    void Putscale ( double _val );
    double Getangle ( );
    void Putangle ( double _val );
    VARIANT_BOOL GetattrCopy ( );
    void PutattrCopy ( VARIANT_BOOL _val );
    VARIANT_BOOL GetdimLineScale ( );
    void PutdimLineScale ( VARIANT_BOOL _val );
    VARIANT_BOOL GetspcObjCopy ( );
    void PutspcObjCopy ( VARIANT_BOOL _val );
    VARIANT_BOOL GetstoragesCopy ( );
    void PutstoragesCopy ( VARIANT_BOOL _val );
    VARIANT_BOOL GethyperLinksCopy ( );
    void PuthyperLinksCopy ( VARIANT_BOOL _val );
};

struct __declspec(uuid("5ddb6b14-6f3d-431f-b62f-c5fccafc3632"))
ksThreadDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getoutside))
    VARIANT_BOOL outside;
    __declspec(property(get=Getdr,put=Putdr))
    double dr;
    __declspec(property(get=Getlength,put=Putlength))
    double length;
    __declspec(property(get=Getp,put=Putp))
    double p;
    __declspec(property(get=GetautoDefinDr,put=PutautoDefinDr))
    VARIANT_BOOL autoDefinDr;
    __declspec(property(get=GetallLength,put=PutallLength))
    VARIANT_BOOL allLength;
    __declspec(property(get=GetfaceValue,put=PutfaceValue))
    VARIANT_BOOL faceValue;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Getoutside ( );
    IDispatchPtr GetBaseObject ( );
    VARIANT_BOOL SetBaseObject (
        IDispatch * obj );
    IDispatchPtr GetFaceBegin ( );
    VARIANT_BOOL SetFaceBegin (
        IDispatch * face );
    IDispatchPtr GetFaceEnd ( );
    VARIANT_BOOL SetFaceEnd (
        IDispatch * face );

    // Properties:
    double Getdr ( );
    void Putdr ( double _val );
    double Getlength ( );
    void Putlength ( double _val );
    double Getp ( );
    void Putp ( double _val );
    VARIANT_BOOL GetautoDefinDr ( );
    void PutautoDefinDr ( VARIANT_BOOL _val );
    VARIANT_BOOL GetallLength ( );
    void PutallLength ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfaceValue ( );
    void PutfaceValue ( VARIANT_BOOL _val );
};

struct __declspec(uuid("f78e6b71-bef3-4a4d-ae50-fe96426f6fd1"))
ksOverlapObjectOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getoverlap,put=Putoverlap))
    VARIANT_BOOL overlap;
    __declspec(property(get=Getgap,put=Putgap))
    double gap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    VARIANT_BOOL Getoverlap ( );
    void Putoverlap ( VARIANT_BOOL _val );
    double Getgap ( );
    void Putgap ( double _val );
};

struct __declspec(uuid("abba6ce0-cb4c-4a32-98b4-b639352c75ba"))
ksObjectsFilter3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfilterAll,put=PutfilterAll))
    VARIANT_BOOL filterAll;
    __declspec(property(get=GetfilterFaces,put=PutfilterFaces))
    VARIANT_BOOL filterFaces;
    __declspec(property(get=GetfilterEdges,put=PutfilterEdges))
    VARIANT_BOOL filterEdges;
    __declspec(property(get=GetfilterVertexs,put=PutfilterVertexs))
    VARIANT_BOOL filterVertexs;
    __declspec(property(get=GetfilterCPlanes,put=PutfilterCPlanes))
    VARIANT_BOOL filterCPlanes;
    __declspec(property(get=GetfilterCAxis,put=PutfilterCAxis))
    VARIANT_BOOL filterCAxis;

    //
    // Wrapper methods for error-handling
    //

    // Properties:
    VARIANT_BOOL GetfilterAll ( );
    void PutfilterAll ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfilterFaces ( );
    void PutfilterFaces ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfilterEdges ( );
    void PutfilterEdges ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfilterVertexs ( );
    void PutfilterVertexs ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfilterCPlanes ( );
    void PutfilterCPlanes ( VARIANT_BOOL _val );
    VARIANT_BOOL GetfilterCAxis ( );
    void PutfilterCAxis ( VARIANT_BOOL _val );
};

struct __declspec(uuid("abba6ce0-cb4c-4a32-98b4-b639352c75bb"))
ksParametrizationParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetnearestPoints,put=PutnearestPoints))
    VARIANT_BOOL nearestPoints;
    __declspec(property(get=GetpointsLimit,put=PutpointsLimit))
    double pointsLimit;
    __declspec(property(get=Gethorizontal,put=Puthorizontal))
    VARIANT_BOOL horizontal;
    __declspec(property(get=Getvertical,put=Putvertical))
    VARIANT_BOOL vertical;
    __declspec(property(get=Getparallel,put=Putparallel))
    VARIANT_BOOL parallel;
    __declspec(property(get=Getperpendicular,put=Putperpendicular))
    VARIANT_BOOL perpendicular;
    __declspec(property(get=GetangleLimit,put=PutangleLimit))
    double angleLimit;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL Init ( );

    // Properties:
    VARIANT_BOOL GetnearestPoints ( );
    void PutnearestPoints ( VARIANT_BOOL _val );
    double GetpointsLimit ( );
    void PutpointsLimit ( double _val );
    VARIANT_BOOL Gethorizontal ( );
    void Puthorizontal ( VARIANT_BOOL _val );
    VARIANT_BOOL Getvertical ( );
    void Putvertical ( VARIANT_BOOL _val );
    VARIANT_BOOL Getparallel ( );
    void Putparallel ( VARIANT_BOOL _val );
    VARIANT_BOOL Getperpendicular ( );
    void Putperpendicular ( VARIANT_BOOL _val );
    double GetangleLimit ( );
    void PutangleLimit ( double _val );
};

struct __declspec(uuid("02556461-d088-4f00-ae61-d366082db9bc"))
ksMacro3DDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStaffVisible,put=PutStaffVisible))
    VARIANT_BOOL StaffVisible;
    __declspec(property(get=GetDoubleClickEditOff,put=PutDoubleClickEditOff))
    VARIANT_BOOL DoubleClickEditOff;
    __declspec(property(get=GetPropertyObjectEditable,put=PutPropertyObjectEditable))
    VARIANT_BOOL PropertyObjectEditable;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ksFeatureCollectionPtr FeatureCollection ( );
    VARIANT_BOOL Destroy ( );
    VARIANT_BOOL Add (
        IDispatch * obj );
    VARIANT_BOOL SetUserParam (
        IDispatch * userPars );
    long GetUserParamSize ( );
    VARIANT_BOOL GetUserParam (
        IDispatch * userPars );
    VARIANT_BOOL SetObject (
        long index,
        IDispatch * obj );
    IDispatchPtr GetObject (
        long index );
    long GetCountObj ( );
    VARIANT_BOOL ClearAllObj ( );

    // Properties:
    VARIANT_BOOL GetStaffVisible ( );
    void PutStaffVisible ( VARIANT_BOOL _val );
    VARIANT_BOOL GetDoubleClickEditOff ( );
    void PutDoubleClickEditOff ( VARIANT_BOOL _val );
    VARIANT_BOOL GetPropertyObjectEditable ( );
    void PutPropertyObjectEditable ( VARIANT_BOOL _val );
};

struct __declspec(uuid("97337daf-b7cd-4fb8-8e18-23f0230e5cbe"))
ksAxisConefaceDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetFace (
        IDispatch * face );
    IDispatchPtr GetFace ( );
    IDispatchPtr GetCurve3D ( );
};

struct __declspec(uuid("99797f89-fba4-4582-812f-226afb50ed7d"))
ksUnionComponentsDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr PartArray ( );
};

struct __declspec(uuid("be5f10f5-b198-49d9-9140-b2b91e060533"))
ksMoldCavityDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getscale,put=Putscale))
    double scale;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr PartArray ( );
    IDispatchPtr GetScaleCentre ( );
    VARIANT_BOOL SetScaleCentre (
        IDispatch * vert );

    // Properties:
    double Getscale ( );
    void Putscale ( double _val );
};

struct __declspec(uuid("e4091969-1c4e-4959-8d93-c2421564418b"))
ksCoordinate3dCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    VARIANT_BOOL GetByIndex (
        long index,
        double * x,
        double * y,
        double * z );
    VARIANT_BOOL GetSafeArray (
        VARIANT * array );
};

struct __declspec(uuid("abc7f8ee-cf07-4aa8-98a1-0de35db35b9e"))
ksIntersectionResult : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    long GetIntersectionType (
        long index );
};

struct __declspec(uuid("cc5e3539-5b35-46fc-afe1-19bb0168d52f"))
ksPlaneMiddleDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getposition,put=Putposition))
    VARIANT_BOOL position;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetObject (
        long number,
        IDispatch * val );
    IDispatchPtr GetObject (
        long number );
    IDispatchPtr GetSurface ( );

    // Properties:
    VARIANT_BOOL Getposition ( );
    void Putposition ( VARIANT_BOOL _val );
};

struct __declspec(uuid("bc4c15a4-16e9-4cfa-a33e-cc86ba2fb546"))
ksControlPointDefinition : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetVertex (
        IDispatch * val );
    IDispatchPtr GetVertex ( );
    VARIANT_BOOL GetPoint (
        double * x,
        double * y,
        double * z );
};

struct __declspec(uuid("177cbaf3-87e6-4376-b6a9-669c0e661bff"))
ksConjunctivePointDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getdirection,put=Putdirection))
    VARIANT_BOOL direction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL SetVertex (
        IDispatch * val );
    IDispatchPtr GetVertex ( );
    VARIANT_BOOL SetEdge (
        IDispatch * val );
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL GetPoint (
        double * x,
        double * y,
        double * z );

    // Properties:
    VARIANT_BOOL Getdirection ( );
    void Putdirection ( VARIANT_BOOL _val );
};

struct __declspec(uuid("e06b18bf-d2af-4201-99be-b7fa9eecf7a8"))
ksChooseBodies : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChooseBodiesType,put=PutChooseBodiesType))
    long ChooseBodiesType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr BodyCollection ( );

    // Properties:
    long GetChooseBodiesType ( );
    void PutChooseBodiesType ( long _val );
};

struct __declspec(uuid("44277b89-eeb4-456c-8ef9-2dc48d61ec91"))
ksAggregateDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBooleanType,put=PutBooleanType))
    long BooleanType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr BodyCollection ( );

    // Properties:
    long GetBooleanType ( );
    void PutBooleanType ( long _val );
};

struct __declspec(uuid("391938ae-79b6-4e3b-9815-ac1a31d9ea9d"))
ksChangeLeaderParam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetsignType,put=PutsignType))
    short signType;
    __declspec(property(get=GetsignHeight,put=PutsignHeight))
    double signHeight;
    __declspec(property(get=GetleaderLength,put=PutleaderLength))
    double leaderLength;
    __declspec(property(get=Getstyle,put=Putstyle))
    long style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetpTextline ( );
    VARIANT_BOOL SetpTextline (
        IDispatch * pTextLine );
    IDispatchPtr GetpPolyline ( );
    VARIANT_BOOL SetpPolyline (
        IDispatch * pPolyline );
    VARIANT_BOOL Init ( );

    // Properties:
    double Getx ( );
    void Putx ( double _val );
    double Gety ( );
    void Puty ( double _val );
    short GetsignType ( );
    void PutsignType ( short _val );
    double GetsignHeight ( );
    void PutsignHeight ( double _val );
    double GetleaderLength ( );
    void PutleaderLength ( double _val );
    long Getstyle ( );
    void Putstyle ( long _val );
};

struct __declspec(uuid("6b0b5194-4acd-4095-9bc1-11179fbbb05a"))
Application;
    // [ default ] dispinterface KompasObject
    // [ default, source ] dispinterface ksKompasObjectNotify

struct __declspec(uuid("fbe002a6-1e06-4703-aec5-9ad8a10fa1fa"))
KompasInvisible5;
    // [ default ] dispinterface KompasObject
    // [ default, source ] dispinterface ksKompasObjectNotify

struct __declspec(uuid("de8219ec-0a9f-44e1-ac2b-f17269484fff"))
Object2DNotifyResult;
    // [ default ] dispinterface ksObject2DNotifyResult

struct __declspec(uuid("87cd4f95-083c-4514-b8b4-025c8907d8f1"))
FeatureCollection;
    // [ default ] dispinterface ksFeatureCollection

struct __declspec(uuid("2dfacc66-c4a4-11d6-8734-00c0262cdd2c"))
placement;
    // [ default ] dispinterface ksPlacement

struct __declspec(uuid("600f12df-d8b8-4ca8-a476-d2a7e425c740"))
Object3DNotifyResult;
    // [ default ] dispinterface ksObject3DNotifyResult

struct __declspec(uuid("129e9083-e4d2-4991-b69f-70b696ad1a55"))
Document3DNotifyResult;
    // [ default ] dispinterface ksDocument3DNotifyResult

struct __declspec(uuid("14fd27f5-b7fd-4276-ac2c-2804edc3944f"))
Document2D;
    // [ default ] dispinterface ksDocument2D
    // [ default, source ] dispinterface ksDocumentFileNotify

struct __declspec(uuid("364521a5-94b5-11d6-8732-00c0262cdd2c"))
SpecRoughParam;
    // [ default ] dispinterface ksSpecRoughParam

struct __declspec(uuid("364521a8-94b5-11d6-8732-00c0262cdd2c"))
EllipseParam;
    // [ default ] dispinterface ksEllipseParam

struct __declspec(uuid("364521ab-94b5-11d6-8732-00c0262cdd2c"))
EllipseArcParam;
    // [ default ] dispinterface ksEllipseArcParam

struct __declspec(uuid("364521ae-94b5-11d6-8732-00c0262cdd2c"))
EllipseArcParam1;
    // [ default ] dispinterface ksEllipseArcParam1

struct __declspec(uuid("364521b1-94b5-11d6-8732-00c0262cdd2c"))
EquidistantParam;
    // [ default ] dispinterface ksEquidistantParam

struct __declspec(uuid("364521b4-94b5-11d6-8732-00c0262cdd2c"))
ParagraphParam;
    // [ default ] dispinterface ksParagraphParam

struct __declspec(uuid("364521b9-94b5-11d6-8732-00c0262cdd2c"))
TextItemParam;
    // [ default ] dispinterface ksTextItemParam

struct __declspec(uuid("364521bc-94b5-11d6-8732-00c0262cdd2c"))
TextLineParam;
    // [ default ] dispinterface ksTextLineParam

struct __declspec(uuid("364521bf-94b5-11d6-8732-00c0262cdd2c"))
TextItemFont;
    // [ default ] dispinterface ksTextItemFont

struct __declspec(uuid("e79c2503-9584-11d6-8732-00c0262cdd2c"))
CornerParam;
    // [ default ] dispinterface ksCornerParam

struct __declspec(uuid("e79c2506-9584-11d6-8732-00c0262cdd2c"))
ContourParam;
    // [ default ] dispinterface ksContourParam

struct __declspec(uuid("e79c2509-9584-11d6-8732-00c0262cdd2c"))
LayerParam;
    // [ default ] dispinterface ksLayerParam

struct __declspec(uuid("e79c250c-9584-11d6-8732-00c0262cdd2c"))
LineParam;
    // [ default ] dispinterface ksLineParam

struct __declspec(uuid("e79c250f-9584-11d6-8732-00c0262cdd2c"))
RegularPolygonParam;
    // [ default ] dispinterface ksRegularPolygonParam

struct __declspec(uuid("e79c2512-9584-11d6-8732-00c0262cdd2c"))
RectangleParam;
    // [ default ] dispinterface ksRectangleParam

struct __declspec(uuid("e79c2515-9584-11d6-8732-00c0262cdd2c"))
BaseParam;
    // [ default ] dispinterface ksBaseParam

struct __declspec(uuid("e79c2518-9584-11d6-8732-00c0262cdd2c"))
LtVariant;
    // [ default ] dispinterface ksLtVariant

struct __declspec(uuid("e79c251b-9584-11d6-8732-00c0262cdd2c"))
UserParam;
    // [ default ] dispinterface ksUserParam

struct __declspec(uuid("3198e123-9585-11d6-95ce-00c0262d30e3"))
MathPointParam;
    // [ default ] dispinterface ksMathPointParam

struct __declspec(uuid("910ec543-958d-11d6-95ce-00c0262d30e3"))
CurvePicture;
    // [ default ] dispinterface ksCurvePicture

struct __declspec(uuid("910ec546-958d-11d6-95ce-00c0262d30e3"))
CurvePattern;
    // [ default ] dispinterface ksCurvePattern

struct __declspec(uuid("9f8ca523-173c-4206-8f2a-ab221138692e"))
TAN;
    // [ default ] dispinterface ksTAN

struct __declspec(uuid("9cc1a2e2-29a8-49bb-abf6-792fa2d38014"))
CON;
    // [ default ] dispinterface ksCON

struct __declspec(uuid("7b8b632e-5bdd-4ee5-b623-df2880be0ee4"))
InertiaParam;
    // [ default ] dispinterface ksInertiaParam

struct __declspec(uuid("4693323b-42a7-42cc-902e-7123dd916fb4"))
MassInertiaParam;
    // [ default ] dispinterface ksMassInertiaParam

struct __declspec(uuid("c77421d3-13ec-4595-a198-677efb45aef3"))
Mathematic2D;
    // [ default ] dispinterface ksMathematic2D

struct __declspec(uuid("fd30b325-9e27-42ca-adcf-c30eebe0bbb8"))
DynamicArray;
    // [ default ] dispinterface ksDynamicArray

struct __declspec(uuid("2a4d4544-95b3-11d6-8732-00c0262cdd2c"))
RDimDrawingParam;
    // [ default ] dispinterface ksRDimDrawingParam

struct __declspec(uuid("2a4d4547-95b3-11d6-8732-00c0262cdd2c"))
RDimSourceParam;
    // [ default ] dispinterface ksRDimSourceParam

struct __declspec(uuid("7f7d6f83-97da-11d6-8732-00c0262cdd2c"))
RDimParam;
    // [ default ] dispinterface ksRDimParam

struct __declspec(uuid("7f7d6f86-97da-11d6-8732-00c0262cdd2c"))
LineSegParam;
    // [ default ] dispinterface ksLineSegParam

struct __declspec(uuid("7f7d6f89-97da-11d6-8732-00c0262cdd2c"))
CircleParam;
    // [ default ] dispinterface ksCircleParam

struct __declspec(uuid("7f7d6f8c-97da-11d6-8732-00c0262cdd2c"))
ArcByAngleParam;
    // [ default ] dispinterface ksArcByAngleParam

struct __declspec(uuid("7f7d6f8f-97da-11d6-8732-00c0262cdd2c"))
ArcByPointParam;
    // [ default ] dispinterface ksArcByPointParam

struct __declspec(uuid("7f7d6f92-97da-11d6-8732-00c0262cdd2c"))
PointParam;
    // [ default ] dispinterface ksPointParam

struct __declspec(uuid("7f7d6f95-97da-11d6-8732-00c0262cdd2c"))
HatchParam;
    // [ default ] dispinterface ksHatchParam

struct __declspec(uuid("7f7d6f98-97da-11d6-8732-00c0262cdd2c"))
TextParam;
    // [ default ] dispinterface ksTextParam

struct __declspec(uuid("7f7d6f9b-97da-11d6-8732-00c0262cdd2c"))
NurbsPointParam;
    // [ default ] dispinterface ksNurbsPointParam

struct __declspec(uuid("7f7d6f9e-97da-11d6-8732-00c0262cdd2c"))
DoubleValue;
    // [ default ] dispinterface ksDoubleValue

struct __declspec(uuid("7f7d6fa1-97da-11d6-8732-00c0262cdd2c"))
NurbsParam;
    // [ default ] dispinterface ksNurbsParam

struct __declspec(uuid("7f7d6fa4-97da-11d6-8732-00c0262cdd2c"))
ConicArcParam;
    // [ default ] dispinterface ksConicArcParam

struct __declspec(uuid("7f7d6fa7-97da-11d6-8732-00c0262cdd2c"))
CentreParam;
    // [ default ] dispinterface ksCentreParam

struct __declspec(uuid("7f7d6faa-97da-11d6-8732-00c0262cdd2c"))
PlacementParam;
    // [ default ] dispinterface ksPlacementParam

struct __declspec(uuid("7f7d6fad-97da-11d6-8732-00c0262cdd2c"))
RasterParam;
    // [ default ] dispinterface ksRasterParam

struct __declspec(uuid("7f7d6fb0-97da-11d6-8732-00c0262cdd2c"))
PolylineParam;
    // [ default ] dispinterface ksPolylineParam

struct __declspec(uuid("7f7d6fb3-97da-11d6-8732-00c0262cdd2c"))
InsertFragmentParam;
    // [ default ] dispinterface ksInsertFragmentParam

struct __declspec(uuid("7f7d6fb6-97da-11d6-8732-00c0262cdd2c"))
ViewParam;
    // [ default ] dispinterface ksViewParam

struct __declspec(uuid("7f7d6fb9-97da-11d6-8732-00c0262cdd2c"))
LBreakDimSource;
    // [ default ] dispinterface ksLBreakDimSource

struct __declspec(uuid("7f7d6fbc-97da-11d6-8732-00c0262cdd2c"))
BreakDimDrawing;
    // [ default ] dispinterface ksBreakDimDrawing

struct __declspec(uuid("7f7d6fbf-97da-11d6-8732-00c0262cdd2c"))
LBreakDimParam;
    // [ default ] dispinterface ksLBreakDimParam

struct __declspec(uuid("7f7d6fc2-97da-11d6-8732-00c0262cdd2c"))
ABreakDimParam;
    // [ default ] dispinterface ksABreakDimParam

struct __declspec(uuid("7f7d6fc5-97da-11d6-8732-00c0262cdd2c"))
InsertFragmentParamEx;
    // [ default ] dispinterface ksInsertFragmentParamEx

struct __declspec(uuid("7f7d6fc8-97da-11d6-8732-00c0262cdd2c"))
BezierParam;
    // [ default ] dispinterface ksBezierParam

struct __declspec(uuid("7f7d6fcb-97da-11d6-8732-00c0262cdd2c"))
BezierPointParam;
    // [ default ] dispinterface ksBezierPointParam

struct __declspec(uuid("7f7d6fce-97da-11d6-8732-00c0262cdd2c"))
DimTextParam;
    // [ default ] dispinterface ksDimTextParam

struct __declspec(uuid("7f7d6fd1-97da-11d6-8732-00c0262cdd2c"))
LDimSourceParam;
    // [ default ] dispinterface ksLDimSourceParam

struct __declspec(uuid("7f7d6fd4-97da-11d6-8732-00c0262cdd2c"))
DimDrawingParam;
    // [ default ] dispinterface ksDimDrawingParam

struct __declspec(uuid("7f7d6fd7-97da-11d6-8732-00c0262cdd2c"))
LDimParam;
    // [ default ] dispinterface ksLDimParam

struct __declspec(uuid("7f7d6fda-97da-11d6-8732-00c0262cdd2c"))
ADimSourceParam;
    // [ default ] dispinterface ksADimSourceParam

struct __declspec(uuid("7f7d6fdd-97da-11d6-8732-00c0262cdd2c"))
DimensionPartsParam;
    // [ default ] dispinterface ksDimensionPartsParam

struct __declspec(uuid("7f7d6fe0-97da-11d6-8732-00c0262cdd2c"))
ADimParam;
    // [ default ] dispinterface ksADimParam

struct __declspec(uuid("7f7d6fe3-97da-11d6-8732-00c0262cdd2c"))
RBreakDrawingParam;
    // [ default ] dispinterface ksRBreakDrawingParam

struct __declspec(uuid("7f7d6fe6-97da-11d6-8732-00c0262cdd2c"))
RBreakDimParam;
    // [ default ] dispinterface ksRBreakDimParam

struct __declspec(uuid("7f7d6fe9-97da-11d6-8732-00c0262cdd2c"))
QualityItemParam;
    // [ default ] dispinterface ksQualityItemParam

struct __declspec(uuid("7f7d6fec-97da-11d6-8732-00c0262cdd2c"))
QualityContensParam;
    // [ default ] dispinterface ksQualityContensParam

struct __declspec(uuid("d06c9103-98ca-11d6-8732-00c0262cdd2c"))
Iterator;
    // [ default ] dispinterface ksIterator

struct __declspec(uuid("d06c9106-98ca-11d6-8732-00c0262cdd2c"))
Fragment;
    // [ default ] dispinterface ksFragment

struct __declspec(uuid("d06c910c-98ca-11d6-8732-00c0262cdd2c"))
FragmentLib;
    // [ default ] dispinterface ksFragmentLibrary

struct __declspec(uuid("fbcc5b83-996c-11d6-8732-00c0262cdd2c"))
TechnicalDemandParam;
    // [ default ] dispinterface ksTechnicalDemandParam

struct __declspec(uuid("fbcc5b86-996c-11d6-8732-00c0262cdd2c"))
OrdinatedSourceParam;
    // [ default ] dispinterface ksOrdinatedSourceParam

struct __declspec(uuid("fbcc5b89-996c-11d6-8732-00c0262cdd2c"))
OrdinatedDimParam;
    // [ default ] dispinterface ksOrdinatedDimParam

struct __declspec(uuid("fbcc5b8c-996c-11d6-8732-00c0262cdd2c"))
OrdinatedDrawingParam;
    // [ default ] dispinterface ksOrdinatedDrawingParam

struct __declspec(uuid("fbcc5b8f-996c-11d6-8732-00c0262cdd2c"))
SheetSize;
    // [ default ] dispinterface ksSheetSize

struct __declspec(uuid("fbcc5b92-996c-11d6-8732-00c0262cdd2c"))
StandartSheet;
    // [ default ] dispinterface ksStandartSheet

struct __declspec(uuid("fbcc5b95-996c-11d6-8732-00c0262cdd2c"))
SheetPar;
    // [ default ] dispinterface ksSheetPar

struct __declspec(uuid("fbcc5b98-996c-11d6-8732-00c0262cdd2c"))
DocumentParam;
    // [ default ] dispinterface ksDocumentParam

struct __declspec(uuid("fbcc5b9b-996c-11d6-8732-00c0262cdd2c"))
DimensionsOptions;
    // [ default ] dispinterface ksDimensionsOptions

struct __declspec(uuid("fbcc5b9e-996c-11d6-8732-00c0262cdd2c"))
SnapOptions;
    // [ default ] dispinterface ksSnapOptions

struct __declspec(uuid("fbcc5ba1-996c-11d6-8732-00c0262cdd2c"))
LibraryStyleParam;
    // [ default ] dispinterface ksLibraryStyleParam

struct __declspec(uuid("fbcc5ba7-996c-11d6-8732-00c0262cdd2c"))
Stamp;
    // [ default ] dispinterface ksStamp
    // [ default, source ] dispinterface ksStampNotify

struct __declspec(uuid("fbcc5baa-996c-11d6-8732-00c0262cdd2c"))
SheetOptions;
    // [ default ] dispinterface ksSheetOptions

struct __declspec(uuid("910ec54b-958d-11d6-95ce-00c0262d30e3"))
CurvePatternEx;
    // [ default ] dispinterface ksCurvePatternEx

struct __declspec(uuid("910ec54e-958d-11d6-95ce-00c0262d30e3"))
CurveStyleParam;
    // [ default ] dispinterface ksCurveStyleParam

struct __declspec(uuid("3f715e26-97d9-11d6-95ce-00c0262d30e3"))
TextStyleParam;
    // [ default ] dispinterface ksTextStyleParam

struct __declspec(uuid("3f715e29-97d9-11d6-95ce-00c0262d30e3"))
HatchLineParam;
    // [ default ] dispinterface ksHatchLineParam

struct __declspec(uuid("3f715e2c-97d9-11d6-95ce-00c0262d30e3"))
HatchStyleParam;
    // [ default ] dispinterface ksHatchStyleParam

struct __declspec(uuid("3f715e2f-97d9-11d6-95ce-00c0262d30e3"))
RectParam;
    // [ default ] dispinterface ksRectParam

struct __declspec(uuid("3f715e32-97d9-11d6-95ce-00c0262d30e3"))
ShelfPar;
    // [ default ] dispinterface ksShelfPar

struct __declspec(uuid("3f715e35-97d9-11d6-95ce-00c0262d30e3"))
roughPar;
    // [ default ] dispinterface ksRoughPar

struct __declspec(uuid("3f715e38-97d9-11d6-95ce-00c0262d30e3"))
RoughParam;
    // [ default ] dispinterface ksRoughParam

struct __declspec(uuid("3f715e3b-97d9-11d6-95ce-00c0262d30e3"))
Char255;
    // [ default ] dispinterface ksChar255

struct __declspec(uuid("3f715e42-97d9-11d6-95ce-00c0262d30e3"))
leaderParam;
    // [ default ] dispinterface ksLeaderParam

struct __declspec(uuid("3f715e45-97d9-11d6-95ce-00c0262d30e3"))
posLeaderParam;
    // [ default ] dispinterface ksPosLeaderParam

struct __declspec(uuid("3f715e48-97d9-11d6-95ce-00c0262d30e3"))
brandLeaderParam;
    // [ default ] dispinterface ksBrandLeaderParam

struct __declspec(uuid("9af8e343-98a0-11d6-95ce-00c0262d30e3"))
markerLeaderParam;
    // [ default ] dispinterface ksMarkerLeaderParam

struct __declspec(uuid("9af8e346-98a0-11d6-95ce-00c0262d30e3"))
Type1;
    // [ default ] dispinterface ksType1

struct __declspec(uuid("9af8e349-98a0-11d6-95ce-00c0262d30e3"))
Type2;
    // [ default ] dispinterface ksType2

struct __declspec(uuid("9af8e34c-98a0-11d6-95ce-00c0262d30e3"))
Type3;
    // [ default ] dispinterface ksType3

struct __declspec(uuid("9af8e34f-98a0-11d6-95ce-00c0262d30e3"))
Type5;
    // [ default ] dispinterface ksType5

struct __declspec(uuid("9af8e352-98a0-11d6-95ce-00c0262d30e3"))
Type6;
    // [ default ] dispinterface ksType6

struct __declspec(uuid("9af8e355-98a0-11d6-95ce-00c0262d30e3"))
phantom;
    // [ default ] dispinterface ksPhantom

struct __declspec(uuid("9af8e358-98a0-11d6-95ce-00c0262d30e3"))
RequestInfo;
    // [ default ] dispinterface ksRequestInfo

struct __declspec(uuid("cd1c0146-98dc-11d6-95ce-00c0262d30e3"))
ViewPointerParam;
    // [ default ] dispinterface ksViewPointerParam

struct __declspec(uuid("4fd7ce83-9968-11d6-95ce-00c0262d30e3"))
CutLineParam;
    // [ default ] dispinterface ksCutLineParam

struct __declspec(uuid("4fd7ce86-9968-11d6-95ce-00c0262d30e3"))
ToleranceBranch;
    // [ default ] dispinterface ksToleranceBranch

struct __declspec(uuid("4fd7ce89-9968-11d6-95ce-00c0262d30e3"))
ToleranceParam;
    // [ default ] dispinterface ksToleranceParam

struct __declspec(uuid("4fd7ce8c-9968-11d6-95ce-00c0262d30e3"))
SpcColumnParam;
    // [ default ] dispinterface ksSpcColumnParam

struct __declspec(uuid("4fd7ce8f-9968-11d6-95ce-00c0262d30e3"))
RecordTypeAttrParam;
    // [ default ] dispinterface ksRecordTypeAttrParam

struct __declspec(uuid("4fd7ce92-9968-11d6-95ce-00c0262d30e3"))
NumberTypeAttrParam;
    // [ default ] dispinterface ksNumberTypeAttrParam

struct __declspec(uuid("4fd7ce95-9968-11d6-95ce-00c0262d30e3"))
SpcStyleColumnParam;
    // [ default ] dispinterface ksSpcStyleColumnParam

struct __declspec(uuid("4fd7ce98-9968-11d6-95ce-00c0262d30e3"))
SpcStyleSectionParam;
    // [ default ] dispinterface ksSpcStyleSectionParam

struct __declspec(uuid("4fd7ce9b-9968-11d6-95ce-00c0262d30e3"))
SpcSubSectionParam;
    // [ default ] dispinterface ksSpcSubSectionParam

struct __declspec(uuid("4fd7ce9e-9968-11d6-95ce-00c0262d30e3"))
SpcTuningSectionParam;
    // [ default ] dispinterface ksSpcTuningSectionParam

struct __declspec(uuid("4fd7cea1-9968-11d6-95ce-00c0262d30e3"))
SpcTuningStyleParam;
    // [ default ] dispinterface ksSpcTuningStyleParam

struct __declspec(uuid("4fd7cea4-9968-11d6-95ce-00c0262d30e3"))
SpcStyleParam;
    // [ default ] dispinterface ksSpcStyleParam

struct __declspec(uuid("4fd7cea7-9968-11d6-95ce-00c0262d30e3"))
SpcDescrParam;
    // [ default ] dispinterface ksSpcDescrParam

struct __declspec(uuid("4fd7ceaa-9968-11d6-95ce-00c0262d30e3"))
DocAttachedSpcParam;
    // [ default ] dispinterface ksDocAttachedSpcParam

struct __declspec(uuid("4fd7cead-9968-11d6-95ce-00c0262d30e3"))
SpcObjParam;
    // [ default ] dispinterface ksSpcObjParam

struct __declspec(uuid("4fd7ceb0-9968-11d6-95ce-00c0262d30e3"))
LibStyle;
    // [ default ] dispinterface ksLibStyle

struct __declspec(uuid("0981cd03-9a49-11d6-8732-00c0262cdd2c"))
DataBaseObject;
    // [ default ] dispinterface ksDataBaseObject

struct __declspec(uuid("51e74523-9a3a-11d6-95ce-00c0262d30e3"))
SpcDocument;
    // [ default ] dispinterface ksSpcDocument
    // [ default, source ] dispinterface ksDocumentFileNotify

struct __declspec(uuid("51e74526-9a3a-11d6-95ce-00c0262d30e3"))
Specification;
    // [ default ] dispinterface ksSpecification
    // [ default, source ] dispinterface ksSpecificationNotify

struct __declspec(uuid("74d745f3-9a3a-11d6-95ce-00c0262d30e3"))
DocumentTxt;
    // [ default ] dispinterface ksDocumentTxt
    // [ default, source ] dispinterface ksDocumentFileNotify

struct __declspec(uuid("cc26da63-9b22-11d6-95ce-00c0262d30e3"))
AttributeTypeParam;
    // [ default ] dispinterface ksAttributeTypeParam

struct __declspec(uuid("ce0d05e3-9b2a-11d6-95ce-00c0262d30e3"))
ColumnInfoParam;
    // [ default ] dispinterface ksColumnInfoParam

struct __declspec(uuid("ce0d05e6-9b2a-11d6-95ce-00c0262d30e3"))
AttributeParam;
    // [ default ] dispinterface ksAttributeParam

struct __declspec(uuid("508a0cc3-9d74-11d6-95ce-00c0262d30e3"))
Variable;
    // [ default ] dispinterface ksVariable

struct __declspec(uuid("fa93aa23-9b3d-11d6-95ce-00c0262d30e3"))
LibraryAttrTypeParam;
    // [ default ] dispinterface ksLibraryAttrTypeParam

struct __declspec(uuid("fa93aa26-9b3d-11d6-95ce-00c0262d30e3"))
AttributeObject;
    // [ default ] dispinterface ksAttributeObject

struct __declspec(uuid("e9807826-9d55-11d6-95ce-00c0262d30e3"))
RequestInfo3D;
    // [ default ] dispinterface ksRequestInfo3D

struct __declspec(uuid("508a0cc6-9d74-11d6-95ce-00c0262d30e3"))
MateConstraint;
    // [ default ] dispinterface ksMateConstraint

struct __declspec(uuid("508a0cc9-9d74-11d6-95ce-00c0262d30e3"))
DefaultObject;
    // [ default ] dispinterface ksDefaultObject

struct __declspec(uuid("508a0ccc-9d74-11d6-95ce-00c0262d30e3"))
entity;
    // [ default ] dispinterface ksEntity

struct __declspec(uuid("508a0ccf-9d74-11d6-95ce-00c0262d30e3"))
part;
    // [ default ] dispinterface ksPart

struct __declspec(uuid("111cefe3-a0a7-11d6-95ce-00c0262d30e3"))
Document3D;
    // [ default ] dispinterface ksDocument3D
    // [ default, source ] dispinterface ksDocumentFileNotify

struct __declspec(uuid("111cefe6-a0a7-11d6-95ce-00c0262d30e3"))
ModelLibrary;
    // [ default ] dispinterface ksModelLibrary

struct __declspec(uuid("b0170143-c02c-11d6-8734-00c0262cdd2c"))
EntityCollection;
    // [ default ] dispinterface ksEntityCollection

struct __declspec(uuid("03ceac83-c0b8-11d6-8734-00c0262cdd2c"))
VariableCollection;
    // [ default ] dispinterface ksVariableCollection

struct __declspec(uuid("03ceac86-c0b8-11d6-8734-00c0262cdd2c"))
MateConstraintCollection;
    // [ default ] dispinterface ksMateConstraintCollection

struct __declspec(uuid("03ceac89-c0b8-11d6-8734-00c0262cdd2c"))
PartCollection;
    // [ default ] dispinterface ksPartCollection

struct __declspec(uuid("e6e78d63-c0fa-11d6-8734-00c0262cdd2c"))
MeshPartArrayDefinition;
    // [ default ] dispinterface ksMeshPartArrayDefinition

struct __declspec(uuid("ddd05145-c180-11d6-8734-00c0262cdd2c"))
CircularPartArrayDefinition;
    // [ default ] dispinterface ksCircularPartArrayDefinition

struct __declspec(uuid("ddd05148-c180-11d6-8734-00c0262cdd2c"))
CurvePartArrayDefinition;
    // [ default ] dispinterface ksCurvePartArrayDefinition

struct __declspec(uuid("ddd0514b-c180-11d6-8734-00c0262cdd2c"))
DerivativePartArrayDefinition;
    // [ default ] dispinterface ksDerivativePartArrayDefinition

struct __declspec(uuid("0307bb83-c193-11d6-8734-00c0262cdd2c"))
Axis2PlanesDefinition;
    // [ default ] dispinterface ksAxis2PlanesDefinition

struct __declspec(uuid("0307bb86-c193-11d6-8734-00c0262cdd2c"))
AxisOperationsDefinition;
    // [ default ] dispinterface ksAxisOperationsDefinition

struct __declspec(uuid("0307bb89-c193-11d6-8734-00c0262cdd2c"))
Axis2PointsDefinition;
    // [ default ] dispinterface ksAxis2PointsDefinition

struct __declspec(uuid("0307bb8c-c193-11d6-8734-00c0262cdd2c"))
AxisEdgeDefinition;
    // [ default ] dispinterface ksAxisEdgeDefinition

struct __declspec(uuid("0307bb8f-c193-11d6-8734-00c0262cdd2c"))
MeshCopyDefinition;
    // [ default ] dispinterface ksMeshCopyDefinition

struct __declspec(uuid("0307bb92-c193-11d6-8734-00c0262cdd2c"))
CircularCopyDefinition;
    // [ default ] dispinterface ksCircularCopyDefinition

struct __declspec(uuid("0307bb95-c193-11d6-8734-00c0262cdd2c"))
CurveCopyDefinition;
    // [ default ] dispinterface ksCurveCopyDefinition

struct __declspec(uuid("0307bb98-c193-11d6-8734-00c0262cdd2c"))
MirrorCopyDefinition;
    // [ default ] dispinterface ksMirrorCopyDefinition

struct __declspec(uuid("0307bb9b-c193-11d6-8734-00c0262cdd2c"))
MirrorCopyAllDefinition;
    // [ default ] dispinterface ksMirrorCopyAllDefinition

struct __declspec(uuid("0307bb9e-c193-11d6-8734-00c0262cdd2c"))
ConicSpiralDefinition;
    // [ default ] dispinterface ksConicSpiralDefinition

struct __declspec(uuid("0307bba1-c193-11d6-8734-00c0262cdd2c"))
CylindricSpiralDefinition;
    // [ default ] dispinterface ksCylindricSpiralDefinition

struct __declspec(uuid("0307bba4-c193-11d6-8734-00c0262cdd2c"))
PolyLineDefinition;
    // [ default ] dispinterface ksPolyLineDefinition

struct __declspec(uuid("0307bba7-c193-11d6-8734-00c0262cdd2c"))
SplineDefinition;
    // [ default ] dispinterface ksSplineDefinition

struct __declspec(uuid("0307bbaa-c193-11d6-8734-00c0262cdd2c"))
faceDefinition;
    // [ default ] dispinterface ksFaceDefinition

struct __declspec(uuid("0307bbad-c193-11d6-8734-00c0262cdd2c"))
EdgeDefinition;
    // [ default ] dispinterface ksEdgeDefinition

struct __declspec(uuid("0307bbb0-c193-11d6-8734-00c0262cdd2c"))
ChamferDefinition;
    // [ default ] dispinterface ksChamferDefinition

struct __declspec(uuid("0307bbb3-c193-11d6-8734-00c0262cdd2c"))
FilletDefinition;
    // [ default ] dispinterface ksFilletDefinition

struct __declspec(uuid("deefefe3-c3e2-11d6-8734-00c0262cdd2c"))
BaseExtrusionDefinition;
    // [ default ] dispinterface ksBaseExtrusionDefinition

struct __declspec(uuid("deefefe6-c3e2-11d6-8734-00c0262cdd2c"))
BossExtrusionDefinition;
    // [ default ] dispinterface ksBossExtrusionDefinition

struct __declspec(uuid("deefefe9-c3e2-11d6-8734-00c0262cdd2c"))
CutExtrusionDefinition;
    // [ default ] dispinterface ksCutExtrusionDefinition

struct __declspec(uuid("31e66f64-b93d-4196-b3fe-b6ccb679610f"))
ExtrusionSurfaceDefinition;
    // [ default ] dispinterface ksExtrusionSurfaceDefinition

struct __declspec(uuid("deefefec-c3e2-11d6-8734-00c0262cdd2c"))
BaseLoftDefinition;
    // [ default ] dispinterface ksBaseLoftDefinition

struct __declspec(uuid("deefefef-c3e2-11d6-8734-00c0262cdd2c"))
BossLoftDefinition;
    // [ default ] dispinterface ksBossLoftDefinition

struct __declspec(uuid("deefeff2-c3e2-11d6-8734-00c0262cdd2c"))
CutLoftDefinition;
    // [ default ] dispinterface ksCutLoftDefinition

struct __declspec(uuid("5e1eb940-4cae-43de-b56d-8733ff6707df"))
LoftSurfaceDefinition;
    // [ default ] dispinterface ksLoftSurfaceDefinition

struct __declspec(uuid("deefeff5-c3e2-11d6-8734-00c0262cdd2c"))
InclineDefinition;
    // [ default ] dispinterface ksInclineDefinition

struct __declspec(uuid("deefeff8-c3e2-11d6-8734-00c0262cdd2c"))
ShellDefinition;
    // [ default ] dispinterface ksShellDefinition

struct __declspec(uuid("deefeffb-c3e2-11d6-8734-00c0262cdd2c"))
BaseEvolutionDefinition;
    // [ default ] dispinterface ksBaseEvolutionDefinition

struct __declspec(uuid("deefeffe-c3e2-11d6-8734-00c0262cdd2c"))
BossEvolutionDefinition;
    // [ default ] dispinterface ksBossEvolutionDefinition

struct __declspec(uuid("deeff001-c3e2-11d6-8734-00c0262cdd2c"))
CutEvolutionDefinition;
    // [ default ] dispinterface ksCutEvolutionDefinition

struct __declspec(uuid("db947005-aa19-4ed2-9775-e7bd80be872e"))
EvolutionSurfaceDefinition;
    // [ default ] dispinterface ksEvolutionSurfaceDefinition

struct __declspec(uuid("deeff004-c3e2-11d6-8734-00c0262cdd2c"))
RibDefinition;
    // [ default ] dispinterface ksRibDefinition

struct __declspec(uuid("deeff007-c3e2-11d6-8734-00c0262cdd2c"))
CutByPlaneDefinition;
    // [ default ] dispinterface ksCutByPlaneDefinition

struct __declspec(uuid("deeff00a-c3e2-11d6-8734-00c0262cdd2c"))
CutBySketchDefinition;
    // [ default ] dispinterface ksCutBySketchDefinition

struct __declspec(uuid("deeff00d-c3e2-11d6-8734-00c0262cdd2c"))
PlaneOffsetDefinition;
    // [ default ] dispinterface ksPlaneOffsetDefinition

struct __declspec(uuid("deeff010-c3e2-11d6-8734-00c0262cdd2c"))
PlaneAngleDefinition;
    // [ default ] dispinterface ksPlaneAngleDefinition

struct __declspec(uuid("deeff013-c3e2-11d6-8734-00c0262cdd2c"))
Plane3PointsDefinition;
    // [ default ] dispinterface ksPlane3PointsDefinition

struct __declspec(uuid("deeff016-c3e2-11d6-8734-00c0262cdd2c"))
PlaneNormalToSurfaceDefinition;
    // [ default ] dispinterface ksPlaneNormalToSurfaceDefinition

struct __declspec(uuid("deeff019-c3e2-11d6-8734-00c0262cdd2c"))
PlaneTangentToSurfaceDefinition;
    // [ default ] dispinterface ksPlaneTangentToSurfaceDefinition

struct __declspec(uuid("deeff01c-c3e2-11d6-8734-00c0262cdd2c"))
PlaneEdgePointDefinition;
    // [ default ] dispinterface ksPlaneEdgePointDefinition

struct __declspec(uuid("deeff01f-c3e2-11d6-8734-00c0262cdd2c"))
PlaneParallelDefinition;
    // [ default ] dispinterface ksPlaneParallelDefinition

struct __declspec(uuid("deeff022-c3e2-11d6-8734-00c0262cdd2c"))
PlanePerpendicularDefinition;
    // [ default ] dispinterface ksPlanePerpendicularDefinition

struct __declspec(uuid("deeff025-c3e2-11d6-8734-00c0262cdd2c"))
PlaneLineToEdgeDefinition;
    // [ default ] dispinterface ksPlaneLineToEdgeDefinition

struct __declspec(uuid("deeff028-c3e2-11d6-8734-00c0262cdd2c"))
PlaneLineToPlaneDefinition;
    // [ default ] dispinterface ksPlaneLineToPlaneDefinition

struct __declspec(uuid("deeff02b-c3e2-11d6-8734-00c0262cdd2c"))
ThinParam;
    // [ default ] dispinterface ksThinParam

struct __declspec(uuid("deeff02e-c3e2-11d6-8734-00c0262cdd2c"))
ExtrusionParam;
    // [ default ] dispinterface ksExtrusionParam

struct __declspec(uuid("deeff031-c3e2-11d6-8734-00c0262cdd2c"))
RotatedParam;
    // [ default ] dispinterface ksRotatedParam

struct __declspec(uuid("2dfacc63-c4a4-11d6-8734-00c0262cdd2c"))
ColorParam;
    // [ default ] dispinterface ksColorParam

struct __declspec(uuid("2dfacc69-c4a4-11d6-8734-00c0262cdd2c"))
BaseRotatedDefinition;
    // [ default ] dispinterface ksBaseRotatedDefinition

struct __declspec(uuid("2dfacc6c-c4a4-11d6-8734-00c0262cdd2c"))
BossRotatedDefinition;
    // [ default ] dispinterface ksBossRotatedDefinition

struct __declspec(uuid("2dfacc6f-c4a4-11d6-8734-00c0262cdd2c"))
CutRotatedDefinition;
    // [ default ] dispinterface ksCutRotatedDefinition

struct __declspec(uuid("8b9ecaf3-172d-4f4b-bf51-33c177b87ff2"))
RotatedSurfaceDefinition;
    // [ default ] dispinterface ksRotatedSurfaceDefinition

struct __declspec(uuid("2dfacc72-c4a4-11d6-8734-00c0262cdd2c"))
SketchDefinition;
    // [ default ] dispinterface ksSketchDefinition

struct __declspec(uuid("cd6054fc-d754-4139-8cd9-381f7488a6c7"))
RasterFormatParam;
    // [ default ] dispinterface ksRasterFormatParam

struct __declspec(uuid("13df9cca-122c-4cec-87fa-cf16818e013a"))
AdditionFormatParam;
    // [ default ] dispinterface ksAdditionFormatParam

struct __declspec(uuid("77c095f7-3abc-4292-b9e1-c112620afc56"))
ConstraintParam;
    // [ default ] dispinterface ksConstraintParam

struct __declspec(uuid("102fa83c-e0d6-4db5-937a-fc149526899a"))
ImportedSurfaceDefinition;
    // [ default ] dispinterface ksImportedSurfaceDefinition

struct __declspec(uuid("cb7b9677-9f62-473e-9663-ad516b5f37b5"))
FaceCollection;
    // [ default ] dispinterface ksFaceCollection

struct __declspec(uuid("5ce6e053-3ec8-427b-bcb5-82b01d4bcbf3"))
VertexDefinition;
    // [ default ] dispinterface ksVertexDefinition

struct __declspec(uuid("1978ba1c-ee2f-48ed-86d7-b15065b36e4a"))
Feature;
    // [ default ] dispinterface ksFeature

struct __declspec(uuid("923a48a1-c159-4959-b13e-e8c558534c89"))
Tessellation;
    // [ default ] dispinterface ksTessellation

struct __declspec(uuid("f7f45063-0b37-40b1-b3ad-bb0a545ec2c8"))
facet;
    // [ default ] dispinterface ksFacet

struct __declspec(uuid("e07c6920-e361-4a4d-9140-95969c26a9ed"))
Measurer;
    // [ default ] dispinterface ksMeasurer

struct __declspec(uuid("eeeab203-43d8-4f04-a7ce-010d9ba419c2"))
BodyCollection;
    // [ default ] dispinterface ksBodyCollection

struct __declspec(uuid("a99ffd41-aa46-4bfc-b6f2-32e1a956e0b1"))
body;
    // [ default ] dispinterface ksBody

struct __declspec(uuid("b1c40242-cd49-4207-b728-b67057bec339"))
Surface;
    // [ default ] dispinterface ksSurface

struct __declspec(uuid("7519bf63-27b3-415f-ac25-904910cb27b5"))
EdgeCollection;
    // [ default ] dispinterface ksEdgeCollection

struct __declspec(uuid("c66fb80f-97be-4437-a8a0-aedcfcbcf982"))
OrientedEdge;
    // [ default ] dispinterface ksOrientedEdge

struct __declspec(uuid("6ef08dcb-a1d4-43a2-acaf-af32fde5f338"))
OrientedEdgeCollection;
    // [ default ] dispinterface ksOrientedEdgeCollection

struct __declspec(uuid("38386e28-c404-431e-9f30-5be44b0f283f"))
Loop;
    // [ default ] dispinterface ksLoop

struct __declspec(uuid("3ea3b143-96a5-408a-897e-27d852e6ee9b"))
LoopCollection;
    // [ default ] dispinterface ksLoopCollection

struct __declspec(uuid("54152184-0b08-4dfb-8249-4579a7368bf4"))
Curve3D;
    // [ default ] dispinterface ksCurve3D

struct __declspec(uuid("4d295a34-4f20-4231-8806-78e40213fa72"))
LineSeg3dParam;
    // [ default ] dispinterface ksLineSeg3dParam

struct __declspec(uuid("4e96b6c2-bf75-4b32-a4e7-7267f60a2593"))
Circle3dParam;
    // [ default ] dispinterface ksCircle3dParam

struct __declspec(uuid("33583282-14fb-4975-b040-9267a639e340"))
Ellipse3dParam;
    // [ default ] dispinterface ksEllipse3dParam

struct __declspec(uuid("94a91d78-30ae-4b04-aee2-b098d3270602"))
PlaneParam;
    // [ default ] dispinterface ksPlaneParam

struct __declspec(uuid("3940c963-446d-4701-883c-a93bbdac5469"))
ConeParam;
    // [ default ] dispinterface ksConeParam

struct __declspec(uuid("379d658e-47bb-414f-a952-fb41037f17ac"))
CylinderParam;
    // [ default ] dispinterface ksCylinderParam

struct __declspec(uuid("c82a3d03-4bee-467f-9240-c1c58fdb144e"))
SphereParam;
    // [ default ] dispinterface ksSphereParam

struct __declspec(uuid("b7833cca-936d-4689-bd90-90b5209d94e8"))
TorusParam;
    // [ default ] dispinterface ksTorusParam

struct __declspec(uuid("4f3c6d95-fbdc-4c53-ae82-9af9c05093ff"))
NurbsPoint3dParam;
    // [ default ] dispinterface ksNurbsPoint3dParam

struct __declspec(uuid("ba13be42-059b-4eeb-9c39-673732763ee3"))
NurbsSurfaceParam;
    // [ default ] dispinterface ksNurbsSurfaceParam

struct __declspec(uuid("f829344f-b49f-43a3-ac93-e817ef8d3319"))
Nurbs3dParam;
    // [ default ] dispinterface ksNurbs3dParam

struct __declspec(uuid("81317653-9bba-46fe-9877-aeee62bd8aa4"))
NurbsKnotCollection;
    // [ default ] dispinterface ksNurbsKnotCollection

struct __declspec(uuid("a2bd36e2-c99b-40fe-a6a7-e5a9ccdcf63d"))
NurbsPoint3dCollCollection;
    // [ default ] dispinterface ksNurbsPoint3dCollCollection

struct __declspec(uuid("25ae92ba-055f-431e-ac3e-ea2e793d446c"))
NurbsPoint3dCollection;
    // [ default ] dispinterface ksNurbsPoint3dCollection

struct __declspec(uuid("0ca54edf-bc8c-4a6a-94cf-edba74a6fa00"))
ViewProjection;
    // [ default ] dispinterface ksViewProjection

struct __declspec(uuid("9a3e39c6-b6ab-42cf-9fbd-ac05f0b4b161"))
ViewProjectionCollection;
    // [ default ] dispinterface ksViewProjectionCollection

struct __declspec(uuid("39ee8e9d-c228-4f61-9f66-dd58f20cd224"))
SelectionMng;
    // [ default ] dispinterface ksSelectionMng
    // [ default, source ] dispinterface ksSelectionMngNotify

struct __declspec(uuid("2280df87-5688-4082-8fae-6e4c84249352"))
ChooseMng;
    // [ default ] dispinterface ksChooseMng

struct __declspec(uuid("4ca2655e-ec4e-433c-9706-8e3864d5dbd2"))
Arc3dParam;
    // [ default ] dispinterface ksArc3dParam

struct __declspec(uuid("05a4578f-a41f-48f2-92f9-a0f0856bcbc0"))
TreeNodeParam;
    // [ default ] dispinterface ksTreeNodeParam

struct __declspec(uuid("7a86e2ba-6de3-4db3-aeb6-9738daa69cfc"))
AssociationViewParam;
    // [ default ] dispinterface ksAssociationViewParam

struct __declspec(uuid("34afc10f-4fbb-40f0-8a23-74b1250f42ef"))
ViewColorParam;
    // [ default ] dispinterface ksViewColorParam

struct __declspec(uuid("705962e9-5e9b-4379-8504-fa754d11fc66"))
AxisLineParam;
    // [ default ] dispinterface ksAxisLineParam

struct __declspec(uuid("02286db8-98d4-4d0b-97d7-e2eed32eebd6"))
TextDocumentParam;
    // [ default ] dispinterface ksTextDocumentParam

struct __declspec(uuid("f37a40f6-4e15-4e01-b4f0-25c49175227a"))
RemoteElementParam;
    // [ default ] dispinterface ksRemoteElementParam

struct __declspec(uuid("9807e658-53c5-4445-a389-3f800fb3bb8a"))
DeletedCopyCollection;
    // [ default ] dispinterface ksDeletedCopyCollection

struct __declspec(uuid("8867deac-c699-41b6-bd3d-c470a52b1b9c"))
CopyObjectParam;
    // [ default ] dispinterface ksCopyObjectParam

struct __declspec(uuid("2a8ae692-45a3-4c22-88b5-76b4830f2235"))
ThreadDefinition;
    // [ default ] dispinterface ksThreadDefinition

struct __declspec(uuid("e41d019c-2d40-452d-8f7b-3fb5fe2d3e8e"))
OverlapObjectOptions;
    // [ default ] dispinterface ksOverlapObjectOptions

struct __declspec(uuid("620bfe17-2f66-4102-a8ea-4dd33c081061"))
Attribute3D;
    // [ default ] dispinterface ksAttribute3D

struct __declspec(uuid("17cab61a-770a-4fce-8fc5-f291cdadf80a"))
Attribute3DCollection;
    // [ default ] dispinterface ksAttribute3DCollection

struct __declspec(uuid("7dab018d-9ef9-4d0f-84bb-54b3dc0558d3"))
ComponentPositioner;
    // [ default ] dispinterface ksComponentPositioner

struct __declspec(uuid("abba6ce1-cb4c-4a32-98b4-b639352c75ba"))
ObjectsFilter3D;
    // [ default ] dispinterface ksObjectsFilter3D

struct __declspec(uuid("abba6ce1-cb4c-4a32-98b4-b639352c75bb"))
ParametrizationParam;
    // [ default ] dispinterface ksParametrizationParam

struct __declspec(uuid("dc7d3edf-80ee-4baf-930f-f221ac7e5a7a"))
Macro3DDefinition;
    // [ default ] dispinterface ksMacro3DDefinition

struct __declspec(uuid("c6bd0d90-c8be-4378-9a71-835597a7d1e9"))
AxisConefaceDefinition;
    // [ default ] dispinterface ksAxisConefaceDefinition

struct __declspec(uuid("ba53b169-1dc8-4cca-baa4-27b0fb87ae26"))
UnionComponentsDefinition;
    // [ default ] dispinterface ksUnionComponentsDefinition

struct __declspec(uuid("fc4d7c29-c608-44d5-b927-1ec9fc147b18"))
MoldCavityDefinition;
    // [ default ] dispinterface ksMoldCavityDefinition

struct __declspec(uuid("17150452-8320-4721-9765-13353f08ae7e"))
Coordinate3dCollection;
    // [ default ] dispinterface ksCoordinate3dCollection

struct __declspec(uuid("ed41e352-e8a8-4b12-893f-17f064985cee"))
IntersectionResult;
    // [ default ] dispinterface ksIntersectionResult

struct __declspec(uuid("d7844afc-91b0-4c08-8622-0e4595ba6551"))
PlaneMiddleDefinition;
    // [ default ] dispinterface ksPlaneMiddleDefinition

struct __declspec(uuid("3da1922b-1fab-4990-8d9a-8f03afdb18d9"))
ControlPointDefinition;
    // [ default ] dispinterface ksControlPointDefinition

struct __declspec(uuid("88bd7f23-21a6-4c90-b784-0b38fb7fd0f3"))
ConjunctivePointDefinition;
    // [ default ] dispinterface ksConjunctivePointDefinition

struct __declspec(uuid("9b59d68b-3502-4fe9-9e09-ac691443bf3e"))
ChooseBodies;
    // [ default ] dispinterface ksChooseBodies

struct __declspec(uuid("8e8a474c-5ed5-4c72-aed6-eb04c317c7de"))
AggregateDefinition;
    // [ default ] dispinterface ksAggregateDefinition

struct __declspec(uuid("bc662523-43e2-41ff-a04b-3d92f8097df9"))
ChangeLeaderParam;
    // [ default ] dispinterface ksChangeLeaderParam

struct __declspec(uuid("08b7a093-d829-44a9-a238-2bff31770112"))
ksChooseParts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChoosePartsType,put=PutChoosePartsType))
    long ChoosePartsType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr PartCollection ( );

    // Properties:
    long GetChoosePartsType ( );
    void PutChoosePartsType ( long _val );
};

struct __declspec(uuid("9fd4e52c-5b9b-4d07-b788-8d188ef940fd"))
ChooseParts;
    // [ default ] dispinterface ksChooseParts

struct __declspec(uuid("1e3e9348-db9b-4967-a62a-b412df95146a"))
ksBodyParts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;
    __declspec(property(get=GetAllSelected,put=PutAllSelected))
    VARIANT_BOOL AllSelected;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL UserBodyPartsChoice ( );
    long Getcount ( );
    VARIANT_BOOL SetPartSelected (
        long index,
        VARIANT_BOOL Select );
    VARIANT_BOOL GetPartSelected (
        long index );
    VARIANT_BOOL SetGreatPartsSelected ( );

    // Properties:
    VARIANT_BOOL GetAllSelected ( );
    void PutAllSelected ( VARIANT_BOOL _val );
};

struct __declspec(uuid("4f6a3404-8f06-4363-af66-4cdcc4e09462"))
ksEmbodiment3D : IDispatch
{};

struct __declspec(uuid("fec5ff26-3f47-49b2-abae-5563a4d7ad94"))
ksSnapInfo : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetSnapType1 ( );
    long GetObject1 ( );
    long GetSnapType2 ( );
    long GetObject2 ( );
    VARIANT_BOOL GetPoint (
        double * x,
        double * y );
};

struct __declspec(uuid("cf0e948c-5a9d-49a3-bc86-eea3050193e0"))
ksSaveToPreviusParam : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL AddWarning (
        _bstr_t uniqueID,
        _bstr_t optionName,
        _bstr_t text );
    VARIANT_BOOL AddOption (
        _bstr_t uniqueID,
        _bstr_t optionName,
        const _variant_t & options,
        _bstr_t defaultValue );
    _bstr_t GetCurrentOptionValue (
        _bstr_t uniqueID );
};

//
// Function implementation mapping
//

#pragma start_map_region("C:\Users\minch\Desktop\Курсовой проект\CourseProject\CourseProject\x64\Debug\kAPI5.tli")
__declspec(implementation_key(1)) IDispatchPtr KompasObject::Document3D ( );
__declspec(implementation_key(2)) IDispatchPtr KompasObject::ActiveDocument3D ( );
__declspec(implementation_key(3)) IDispatchPtr KompasObject::Document2D ( );
__declspec(implementation_key(4)) IDispatchPtr KompasObject::ActiveDocument2D ( );
__declspec(implementation_key(5)) IDispatchPtr KompasObject::DataBaseObject ( );
__declspec(implementation_key(6)) IDispatchPtr KompasObject::GetIterator ( );
__declspec(implementation_key(7)) IDispatchPtr KompasObject::GetMathematic2D ( );
__declspec(implementation_key(8)) IDispatchPtr KompasObject::GetParamStruct ( short structType );
__declspec(implementation_key(9)) IDispatchPtr KompasObject::SpcDocument ( );
__declspec(implementation_key(10)) IDispatchPtr KompasObject::SpcActiveDocument ( );
__declspec(implementation_key(11)) VARIANT_BOOL KompasObject::ksMessage ( _bstr_t s );
__declspec(implementation_key(12)) VARIANT_BOOL KompasObject::ksError ( _bstr_t s );
__declspec(implementation_key(13)) VARIANT_BOOL KompasObject::ksEnableTaskAccess ( long enabl );
__declspec(implementation_key(14)) long KompasObject::ksReturnResult ( );
__declspec(implementation_key(15)) long KompasObject::ksResultNULL ( );
__declspec(implementation_key(16)) long KompasObject::ksIsEnableTaskAccess ( );
__declspec(implementation_key(17)) VARIANT_BOOL KompasObject::ksMessageBoxResult ( );
__declspec(implementation_key(18)) long KompasObject::ksDrawSlide ( long HWindow, long sldID );
__declspec(implementation_key(19)) _bstr_t KompasObject::ksStrResult ( );
__declspec(implementation_key(20)) long KompasObject::ksGetHWindow ( );
__declspec(implementation_key(21)) long KompasObject::ksGetWorkWindowColor ( );
__declspec(implementation_key(22)) VARIANT_BOOL KompasObject::ksPumpWaitingMessages ( );
__declspec(implementation_key(23)) long KompasObject::ksSetCriticalProcess ( );
__declspec(implementation_key(24)) _bstr_t KompasObject::ksChoiceFile ( _bstr_t ext, _bstr_t filter, VARIANT_BOOL preview );
__declspec(implementation_key(25)) long KompasObject::ksDrawBitmap ( long HWindow, long sldID );
__declspec(implementation_key(26)) long KompasObject::ksYesNo ( _bstr_t s );
__declspec(implementation_key(27)) long KompasObject::ksDrawSlideFromFile ( long HWindow, _bstr_t fileName );
__declspec(implementation_key(28)) long KompasObject::ksWriteSlide ( _bstr_t fileName, long iD, double x, double y );
__declspec(implementation_key(29)) VARIANT_BOOL KompasObject::ksSlideBackground ( long color );
__declspec(implementation_key(30)) long KompasObject::ksReadDouble ( _bstr_t mess, double defValue, double min, double max, double * value );
__declspec(implementation_key(31)) long KompasObject::ksReadInt ( _bstr_t mess, long defValue, long min, long max, long * value );
__declspec(implementation_key(32)) _bstr_t KompasObject::ksReadString ( _bstr_t mess, _bstr_t value );
__declspec(implementation_key(33)) _bstr_t KompasObject::ksFullFileName ( _bstr_t oldName );
__declspec(implementation_key(34)) _bstr_t KompasObject::ksUniqueFileName ( );
__declspec(implementation_key(35)) VARIANT_BOOL KompasObject::ksRemoveUniqueFile ( _bstr_t fileName );
__declspec(implementation_key(36)) VARIANT_BOOL KompasObject::ksSystemControlStop ( );
__declspec(implementation_key(37)) long KompasObject::ksSystemControlStart ( _bstr_t menuCommand );
__declspec(implementation_key(38)) IDispatchPtr KompasObject::GetDynamicArray ( long type );
__declspec(implementation_key(39)) _bstr_t KompasObject::ksChoiceFileAppointedDir ( _bstr_t ext, _bstr_t filter, VARIANT_BOOL preview, long typeDir );
__declspec(implementation_key(40)) long KompasObject::ksChoiceFiles ( _bstr_t ext, _bstr_t filter, IDispatch * p, VARIANT_BOOL preview );
__declspec(implementation_key(41)) _bstr_t KompasObject::ksSaveFile ( _bstr_t ext, _bstr_t oldName, _bstr_t filter, VARIANT_BOOL preview );
__declspec(implementation_key(42)) IDispatchPtr KompasObject::GetAttributeObject ( );
__declspec(implementation_key(43)) long KompasObject::ksRefreshActiveWindow ( );
__declspec(implementation_key(44)) _bstr_t KompasObject::ksSystemPath ( long pathType );
__declspec(implementation_key(45)) _bstr_t KompasObject::ksGetRelativePathFromSystemPath ( _bstr_t sourcePath, long pathType );
__declspec(implementation_key(46)) _bstr_t KompasObject::ksGetFullPathFromSystemPath ( _bstr_t relativePath, long pathType );
__declspec(implementation_key(47)) _bstr_t KompasObject::ksGetRelativePathFromFullPath ( _bstr_t mainFilePath, _bstr_t sourcePath );
__declspec(implementation_key(48)) _bstr_t KompasObject::ksGetFullPathFromRelativePath ( _bstr_t mainFilePath, _bstr_t relativePath );
__declspec(implementation_key(49)) long KompasObject::ksGetSystemVersion ( long * iMajor, long * iMinor, long * iRelease, long * iBuild );
__declspec(implementation_key(50)) _bstr_t KompasObject::ksGetSystemProfileString ( _bstr_t lpSection, _bstr_t lpKey );
__declspec(implementation_key(51)) VARIANT_BOOL KompasObject::ksOpenHelpFile ( _bstr_t file, long command, long iD );
__declspec(implementation_key(52)) long KompasObject::ksSetSysOptions ( long optionsType, IDispatch * param );
__declspec(implementation_key(53)) long KompasObject::ksGetSysOptions ( long optionsType, IDispatch * param );
__declspec(implementation_key(54)) long KompasObject::ksPrintPreviewWindow ( IDispatch * docsArr, long inquiry );
__declspec(implementation_key(55)) IDispatchPtr KompasObject::ksGetLibraryStylesArray ( _bstr_t libraryName, short libraryType );
__declspec(implementation_key(56)) double KompasObject::ksViewGetDensity ( long HWindow );
__declspec(implementation_key(57)) long KompasObject::ksCalculate ( _bstr_t s, double * rez );
__declspec(implementation_key(58)) long KompasObject::ksCalculateReset ( );
__declspec(implementation_key(59)) long KompasObject::ksExecuteLibraryCommand ( _bstr_t fileName, long command );
__declspec(implementation_key(60)) long KompasObject::ksGetQualityNames ( IDispatch * names, double dimValue, double high, double low, short system, short withLimitation );
__declspec(implementation_key(61)) long KompasObject::ksGetQualityDefects ( _bstr_t name, double dimValue, double * high, double * low, short inMM );
__declspec(implementation_key(62)) long KompasObject::ksGetQualityContensParam ( _bstr_t name, IDispatch * param, short inMM );
__declspec(implementation_key(63)) IDispatchPtr KompasObject::ksGet3dDocumentFromRef ( long doc );
__declspec(implementation_key(64)) IDispatchPtr KompasObject::GetModelLibrary ( );
__declspec(implementation_key(65)) IDispatchPtr KompasObject::GetFragmentLibrary ( );
__declspec(implementation_key(66)) long KompasObject::ksIsLibraryEnabled ( _bstr_t libName );
__declspec(implementation_key(67)) long KompasObject::ksIsModuleSpecificationActive ( );
__declspec(implementation_key(68)) long KompasObject::ksModuleSpecification ( VARIANT_BOOL attach );
__declspec(implementation_key(69)) _bstr_t KompasObject::ksMaterialDlg ( long HWindow, long * res, double * plt, double * kod_size_1, double * kod_size_2, double * kod_size_3, double * kod_size_4, _bstr_t kod_tip );
__declspec(implementation_key(70)) _bstr_t KompasObject::ksExecDialPredefinedText ( long HWindow, long * res );
__declspec(implementation_key(71)) long KompasObject::ksDrawSlideEx ( long HWindow, long sldID, long hInst );
__declspec(implementation_key(72)) _bstr_t KompasObject::ksViewGetDensityAndMaterial ( double * density, long HWindow );
__declspec(implementation_key(73)) _bstr_t KompasObject::ksConvertLangStr ( _bstr_t src );
__declspec(implementation_key(74)) VARIANT_BOOL KompasObject::ksConvertLangWindow ( long hWnd );
__declspec(implementation_key(75)) long KompasObject::ksConvertLangMenu ( long hMenu );
__declspec(implementation_key(76)) _bstr_t KompasObject::ksEditTextLine ( long HWindow, long * res, _bstr_t str );
__declspec(implementation_key(77)) long KompasObject::ksGetDocOptions ( long optionsType, IDispatch * param );
__declspec(implementation_key(78)) long KompasObject::ksAttachKompasLibrary ( _bstr_t libName );
__declspec(implementation_key(79)) long KompasObject::ksDetachKompasLibrary ( long libId );
__declspec(implementation_key(80)) long KompasObject::ksExecuteKompasLibraryCommand ( long libId, long command );
__declspec(implementation_key(81)) HRESULT KompasObject::Quit ( );
__declspec(implementation_key(82)) long KompasObject::ksPrintKompasDocument ( _bstr_t fileName, _bstr_t toFile, double scale );
__declspec(implementation_key(83)) long KompasObject::ksDrawKompasDocument ( long HWindow, _bstr_t docFileName );
__declspec(implementation_key(84)) VARIANT_BOOL KompasObject::ksSetFlagDisableLockApp ( VARIANT_BOOL setDisableLockApp );
__declspec(implementation_key(85)) VARIANT_BOOL KompasObject::ActivateControllerAPI ( );
__declspec(implementation_key(86)) IDispatchPtr KompasObject::DocumentTxt ( );
__declspec(implementation_key(87)) IDispatchPtr KompasObject::ActiveDocumentTxt ( );
__declspec(implementation_key(88)) VARIANT_BOOL KompasObject::ksGetLibraryTreeStruct ( _bstr_t libName, IDispatch * p );
__declspec(implementation_key(89)) long KompasObject::ksSetDocOptions ( long optionsType, IDispatch * param );
__declspec(implementation_key(90)) long KompasObject::ksGetDocumentType ( long doc );
__declspec(implementation_key(91)) long KompasObject::ksDrawKompasDocumentByReference ( long HWindow, long pDoc );
__declspec(implementation_key(92)) IDispatchPtr KompasObject::ksExecDialPredefinedTextEx ( long HWindow );
__declspec(implementation_key(93)) long KompasObject::ksGetDocumentTypeByName ( _bstr_t fileName );
__declspec(implementation_key(94)) IDispatchPtr KompasObject::ksGetDocumentByReference ( long docRef );
__declspec(implementation_key(95)) _bstr_t KompasObject::ksConvertLangStrEx ( long hInstance, long strID );
__declspec(implementation_key(96)) VARIANT_BOOL KompasObject::ksConvertLangWindowEx ( long hWnd, long hInstance, _bstr_t dlgID );
__declspec(implementation_key(97)) VARIANT_BOOL KompasObject::LoadDSK ( );
__declspec(implementation_key(98)) IDispatchPtr KompasObject::GetObjectsFilter3D ( );
__declspec(implementation_key(99)) long KompasObject::ksExecuteKompasLibraryCommandEx ( long libId, long command, IDispatch * external );
__declspec(implementation_key(100)) IDispatchPtr KompasObject::ksGetExternaldispinterface ( );
__declspec(implementation_key(101)) IDispatchPtr KompasObject::ksGetApplication7 ( );
__declspec(implementation_key(102)) long KompasObject::ksDrawBitmapEx ( long HWindow, long bmpID, long hInst );
__declspec(implementation_key(103)) long KompasObject::ksGetSystemControlStartResult ( );
__declspec(implementation_key(104)) long KompasObject::ksIsModule3DActive ( );
__declspec(implementation_key(105)) long KompasObject::ksModule3D ( VARIANT_BOOL attach );
__declspec(implementation_key(106)) IUnknownPtr KompasObject::TransferInterface ( IUnknown * obj, long apiNewType, long objNewType );
__declspec(implementation_key(107)) VARIANT_BOOL KompasObject::ksExecuteKompasCommand ( long commandID, VARIANT_BOOL post );
__declspec(implementation_key(108)) VARIANT_BOOL KompasObject::ksIsKompasCommandEnable ( long commandID );
__declspec(implementation_key(109)) long KompasObject::ksIsKompasCommandCheck ( long commandID );
__declspec(implementation_key(110)) IUnknownPtr KompasObject::TransferReference ( long obj, long docRef );
__declspec(implementation_key(111)) long KompasObject::ksDrawKompasText ( long HWindow, _bstr_t text );
__declspec(implementation_key(112)) long KompasObject::ksPrintKompasDocumentEx ( _bstr_t fileName, _bstr_t toFile, double scale, VARIANT_BOOL FKompasPrinter );
__declspec(implementation_key(113)) int KompasObject::ksExecDialSpecialSymbol ( long HWindow );
__declspec(implementation_key(114)) _bstr_t KompasObject::ksExecDialSymbol ( long HWindow, long * symb, _bstr_t font );
__declspec(implementation_key(115)) VARIANT_BOOL KompasObject::ksSetDebugMessagesMode ( VARIANT_BOOL debugMode );
__declspec(implementation_key(116)) VARIANT_BOOL KompasObject::ksClearFileCache ( );
__declspec(implementation_key(117)) VARIANT_BOOL KompasObject::ksLockFileCache ( VARIANT_BOOL lock );
__declspec(implementation_key(118)) VARIANT_BOOL KompasObject::ksIsHomeVersion ( );
__declspec(implementation_key(119)) VARIANT_BOOL KompasObject::ksIsModule2DActive ( );
__declspec(implementation_key(120)) long KompasObject::ksExecDialPointStyleSelect ( long HWindow, long style );
__declspec(implementation_key(121)) long KompasObject::ksExecDialLineStyleSelect ( long HWindow, _bstr_t caption, long style );
__declspec(implementation_key(122)) VARIANT_BOOL KompasObject::ksExecQualityDialog ( long HWindow, _bstr_t curQual, double * dimValue, long inMM, IDispatch * param );
__declspec(implementation_key(123)) VARIANT_BOOL KompasObject::ksLockPumpMessages ( VARIANT_BOOL lock );
__declspec(implementation_key(124)) VARIANT_BOOL KompasObject::ksIsStudyVersion ( );
__declspec(implementation_key(125)) VARIANT_BOOL KompasObject::ksIsSpdsVersion ( );
__declspec(implementation_key(126)) long KompasObject::ksKompasVariant ( );
__declspec(implementation_key(127)) long KompasObject::ksDrawBitmapEx2 ( long HWindow, long bmpID, const _variant_t & hInst );
__declspec(implementation_key(128)) long KompasObject::ksDrawSlideEx2 ( long HWindow, long sldID, const _variant_t & hInst );
__declspec(implementation_key(129)) _bstr_t KompasObject::ksConvertLangStrEx2 ( const _variant_t & hInstance, long strID );
__declspec(implementation_key(130)) VARIANT_BOOL KompasObject::ksConvertLangWindowEx2 ( long hWnd, const _variant_t & hInstance, _bstr_t dlgID );
__declspec(implementation_key(131)) _bstr_t KompasObject::ksSelectD3Model ( VARIANT_BOOL onlyDetail, VARIANT_BOOL showAddNum );
__declspec(implementation_key(132)) _bstr_t KompasObject::ksGetSelectedEmbodimentMarking ( );
__declspec(implementation_key(133)) _bstr_t KompasObject::ksGetSelectedEmbodimentAdditionalNumber ( );
__declspec(implementation_key(134)) VARIANT_BOOL KompasObject::ksEnableKompasInvisible ( _bstr_t key, _bstr_t signature );
__declspec(implementation_key(135)) _bstr_t KompasObject::ksGetDocumentTypeByNameEx ( _bstr_t fileName, long * docType, long * errorId );
__declspec(implementation_key(136)) VARIANT_BOOL KompasObject::GetVisible ( );
__declspec(implementation_key(137)) void KompasObject::PutVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(138)) long KompasObject::GetlookStyle ( );
__declspec(implementation_key(139)) void KompasObject::PutlookStyle ( long _val );
__declspec(implementation_key(140)) _bstr_t KompasObject::GetcurrentDirectory ( );
__declspec(implementation_key(141)) void KompasObject::PutcurrentDirectory ( _bstr_t _val );
__declspec(implementation_key(142)) long ksDocument2D::ksLineSeg ( double x1, double y1, double x2, double y2, long style );
__declspec(implementation_key(143)) long ksDocument2D::ksRectangle ( IDispatch * par, short centre );
__declspec(implementation_key(144)) long ksDocument2D::ksCircle ( double xc, double yc, double rad, long style );
__declspec(implementation_key(145)) long ksDocument2D::ksArcByAngle ( double xc, double yc, double rad, double f1, double f2, short direction, long style );
__declspec(implementation_key(146)) long ksDocument2D::ksArcByPoint ( double xc, double yc, double rad, double x1, double y1, double x2, double y2, short direction, long style );
__declspec(implementation_key(147)) long ksDocument2D::ksArcBy3Points ( double x1, double y1, double x2, double y2, double x3, double y3, long style );
__declspec(implementation_key(148)) long ksDocument2D::ksGetObjParam ( long ref, IDispatch * param, long parType );
__declspec(implementation_key(149)) long ksDocument2D::ksSetObjParam ( long referObj, IDispatch * param, long parType );
__declspec(implementation_key(150)) long ksDocument2D::ksContour ( long style );
__declspec(implementation_key(151)) long ksDocument2D::ksMacro ( short type );
__declspec(implementation_key(152)) long ksDocument2D::ksParagraph ( IDispatch * par );
__declspec(implementation_key(153)) long ksDocument2D::ksTextLine ( IDispatch * textItem );
__declspec(implementation_key(154)) long ksDocument2D::ksUpdateMacro ( long macro, long gr );
__declspec(implementation_key(155)) long ksDocument2D::ksLine ( double x, double y, double angle );
__declspec(implementation_key(156)) long ksDocument2D::ksPoint ( double x, double y, long style );
__declspec(implementation_key(157)) long ksDocument2D::ksText ( double x, double y, double ang, double hStr, double ksuStr, long bitVector, _bstr_t s );
__declspec(implementation_key(158)) long ksDocument2D::ksHatchByParam ( IDispatch * param );
__declspec(implementation_key(159)) long ksDocument2D::ksEndObj ( );
__declspec(implementation_key(160)) long ksDocument2D::ksLayer ( long n );
__declspec(implementation_key(161)) long ksDocument2D::ksGetLayerNumber ( long p );
__declspec(implementation_key(162)) long ksDocument2D::ksGetLayerReference ( long number );
__declspec(implementation_key(163)) long ksDocument2D::ksChangeObjectLayer ( long obj, long number );
__declspec(implementation_key(164)) long ksDocument2D::ksNewGroup ( short type );
__declspec(implementation_key(165)) long ksDocument2D::ksEndGroup ( );
__declspec(implementation_key(166)) long ksDocument2D::ksMakeEncloseContours ( long gr, double x, double y );
__declspec(implementation_key(167)) long ksDocument2D::ksIsCursorOrPlacementDocument ( );
__declspec(implementation_key(168)) long ksDocument2D::ksIsActiveProcessRunnig ( );
__declspec(implementation_key(169)) long ksDocument2D::ksPhantomShowHide ( _bstr_t show );
__declspec(implementation_key(170)) long ksDocument2D::ksGetCursorPosition ( double * x, double * y, long type );
__declspec(implementation_key(171)) long ksDocument2D::ksKeepReference ( long r );
__declspec(implementation_key(172)) long ksDocument2D::ksGetMacroParamSize ( long ref );
__declspec(implementation_key(173)) long ksDocument2D::ksEditMacroMode ( );
__declspec(implementation_key(174)) long ksDocument2D::ksDeleteObj ( long ref );
__declspec(implementation_key(175)) long ksDocument2D::ksMoveObj ( long ref, double x, double y );
__declspec(implementation_key(176)) long ksDocument2D::ksRotateObj ( long ref, double x, double y, double angle );
__declspec(implementation_key(177)) long ksDocument2D::ksTransformObj ( long ref );
__declspec(implementation_key(178)) long ksDocument2D::ksLightObj ( long ref, short light );
__declspec(implementation_key(179)) long ksDocument2D::ksFindObj ( double x, double y, double limit );
__declspec(implementation_key(180)) long ksDocument2D::ksSymmetryObj ( long ref, double x1, double y1, double x2, double y2, _bstr_t copy );
__declspec(implementation_key(181)) long ksDocument2D::ksCopyObj ( long ref, double xOld, double yOld, double xNew, double yNew, double scale, double angle );
__declspec(implementation_key(182)) long ksDocument2D::ksCreateViewObject ( long type );
__declspec(implementation_key(183)) long ksDocument2D::ksEditViewObject ( long ref );
__declspec(implementation_key(184)) long ksDocument2D::ksAnnLineSeg ( double x1, double y1, double x2, double y2, short term1, short term2, long style );
__declspec(implementation_key(185)) long ksDocument2D::ksPointArraw ( double x, double y, double ang, short term );
__declspec(implementation_key(186)) long ksDocument2D::ksAnnArcByPoint ( double xc, double yc, double rad, double x1, double y1, double x2, double y2, short direction, short term1, short term2, long style );
__declspec(implementation_key(187)) long ksDocument2D::ksEllipse ( IDispatch * par );
__declspec(implementation_key(188)) long ksDocument2D::ksEllipseArc ( IDispatch * par );
__declspec(implementation_key(189)) long ksDocument2D::ksParEllipseArc ( IDispatch * par );
__declspec(implementation_key(190)) long ksDocument2D::ksEquidistant ( IDispatch * par );
__declspec(implementation_key(191)) long ksDocument2D::ksIsPointInsideContour ( long p, double x, double y, double precision );
__declspec(implementation_key(192)) long ksDocument2D::ksConvertTextToCurve ( long text );
__declspec(implementation_key(193)) long ksDocument2D::ksStoreTmpGroup ( long g );
__declspec(implementation_key(194)) long ksDocument2D::ksOpenMacro ( long macro );
__declspec(implementation_key(195)) long ksDocument2D::ksAddObjectToMacro ( long macro, long obj );
__declspec(implementation_key(196)) long ksDocument2D::ksHatch ( long style, double angle, double step, double width, double x0, double y0 );
__declspec(implementation_key(197)) long ksDocument2D::ksColouring ( long color );
__declspec(implementation_key(198)) long ksDocument2D::ksDuplicateBoundaries ( long p );
__declspec(implementation_key(199)) long ksDocument2D::ksNurbsPoint ( IDispatch * par );
__declspec(implementation_key(200)) long ksDocument2D::ksNurbsKnot ( double knot );
__declspec(implementation_key(201)) long ksDocument2D::ksNurbs ( short degree, VARIANT_BOOL close, long style );
__declspec(implementation_key(202)) long ksDocument2D::ksRegularPolygon ( IDispatch * par, short centre );
__declspec(implementation_key(203)) long ksDocument2D::ksClearGroup ( long g, VARIANT_BOOL deleteTmp );
__declspec(implementation_key(204)) long ksDocument2D::ksExcludeObjGroup ( long g, long p );
__declspec(implementation_key(205)) long ksDocument2D::ksAddObjGroup ( long g, long p );
__declspec(implementation_key(206)) long ksDocument2D::ksSaveGroup ( long g, _bstr_t name );
__declspec(implementation_key(207)) long ksDocument2D::ksSelectGroup ( long g, short selectMode, double xmin, double ymin, double xmax, double ymax );
__declspec(implementation_key(208)) long ksDocument2D::ksExistGroupObj ( long g );
__declspec(implementation_key(209)) long ksDocument2D::ksWriteGroupToClip ( long g, VARIANT_BOOL copy );
__declspec(implementation_key(210)) long ksDocument2D::ksGetGroup ( _bstr_t name );
__declspec(implementation_key(211)) long ksDocument2D::ksReadGroupFromClip ( );
__declspec(implementation_key(212)) long ksDocument2D::ksConicArc ( IDispatch * par );
__declspec(implementation_key(213)) long ksDocument2D::ksCentreMarker ( IDispatch * par );
__declspec(implementation_key(214)) long ksDocument2D::ksBezier ( short closed, long style );
__declspec(implementation_key(215)) long ksDocument2D::ksBezierPoint ( IDispatch * par );
__declspec(implementation_key(216)) long ksDocument2D::ksGetStyleParam ( short type, short styleId, IDispatch * param );
__declspec(implementation_key(217)) long ksDocument2D::ksInsertRaster ( IDispatch * par );
__declspec(implementation_key(218)) long ksDocument2D::ksLinDimension ( IDispatch * linPar );
__declspec(implementation_key(219)) long ksDocument2D::ksAngDimension ( IDispatch * angPar );
__declspec(implementation_key(220)) long ksDocument2D::ksDiamDimension ( IDispatch * par );
__declspec(implementation_key(221)) long ksDocument2D::ksRadDimension ( IDispatch * par );
__declspec(implementation_key(222)) long ksDocument2D::ksRadBreakDimension ( IDispatch * par );
__declspec(implementation_key(223)) long ksDocument2D::ksOrdinatedDimension ( IDispatch * ordPar );
__declspec(implementation_key(224)) long ksDocument2D::ksAddStyle ( short type, IDispatch * param, short copy );
__declspec(implementation_key(225)) long ksDocument2D::ksIsStyleInDocument ( short type, IDispatch * param, short copy );
__declspec(implementation_key(226)) long ksDocument2D::ksDeleteStyleFromDocument ( short type, IDispatch * param, short copy );
__declspec(implementation_key(227)) long ksDocument2D::ksExistObj ( long ref );
__declspec(implementation_key(228)) long ksDocument2D::ksGetObjGabaritRect ( long p, IDispatch * par );
__declspec(implementation_key(229)) long ksDocument2D::ksSheetToView ( double x, double y, double * outX, double * outY );
__declspec(implementation_key(230)) long ksDocument2D::ksViewToSheet ( double x, double y, double * outX, double * outY );
__declspec(implementation_key(231)) long ksDocument2D::ksPolyline ( long style );
__declspec(implementation_key(232)) long ksDocument2D::ksPolylineByParam ( IDispatch * par );
__declspec(implementation_key(233)) long ksDocument2D::ksGetReferenceDocumentPart ( short t );
__declspec(implementation_key(234)) long ksDocument2D::ksGetViewReference ( long number );
__declspec(implementation_key(235)) long ksDocument2D::ksGetViewNumber ( long p );
__declspec(implementation_key(236)) long ksDocument2D::ksOpenView ( long number );
__declspec(implementation_key(237)) long ksDocument2D::ksNewViewNumber ( );
__declspec(implementation_key(238)) long ksDocument2D::ksCreateSheetView ( IDispatch * par, long * number );
__declspec(implementation_key(239)) long ksDocument2D::ksDecomposeObj ( long p, short level, double arrow, short type );
__declspec(implementation_key(240)) long ksDocument2D::ksGetViewObjCount ( long p );
__declspec(implementation_key(241)) long ksDocument2D::ksLinBreakDimension ( IDispatch * linPar );
__declspec(implementation_key(242)) long ksDocument2D::ksAngBreakDimension ( IDispatch * angPar );
__declspec(implementation_key(243)) long ksDocument2D::ksIsCurveClosed ( long p );
__declspec(implementation_key(244)) long ksDocument2D::ksBase ( IDispatch * par );
__declspec(implementation_key(245)) long ksDocument2D::ksRough ( IDispatch * roughPar );
__declspec(implementation_key(246)) _bstr_t ksDocument2D::ksGetGroupName ( long gr, long * group, long size );
__declspec(implementation_key(247)) long ksDocument2D::ksMtr ( double x, double y, double angle, double scaleX, double scaleY );
__declspec(implementation_key(248)) long ksDocument2D::ksDeleteMtr ( );
__declspec(implementation_key(249)) long ksDocument2D::ksPointIntoMtr ( double x, double y, double * xn, double * yn );
__declspec(implementation_key(250)) long ksDocument2D::ksPointFromMtr ( double x, double y, double * xn, double * yn );
__declspec(implementation_key(251)) long ksDocument2D::ksLengthIntoMtr ( double * len );
__declspec(implementation_key(252)) long ksDocument2D::ksLengthFromMtr ( double * len );
__declspec(implementation_key(253)) long ksDocument2D::ksLeader ( IDispatch * leaderPar );
__declspec(implementation_key(254)) long ksDocument2D::ksPositionLeader ( IDispatch * posLeaderParam );
__declspec(implementation_key(255)) long ksDocument2D::ksBrandLeader ( IDispatch * brandLeaderParam );
__declspec(implementation_key(256)) long ksDocument2D::ksMarkerLeader ( IDispatch * markerLeaderParam );
__declspec(implementation_key(257)) long ksDocument2D::ksCursor ( IDispatch * info, double * x, double * y, IDispatch * phantom );
__declspec(implementation_key(258)) long ksDocument2D::ksPlacement ( IDispatch * info, double * x, double * y, double * angle, IDispatch * phantom );
__declspec(implementation_key(259)) long ksDocument2D::ksCommandWindow ( IDispatch * info );
__declspec(implementation_key(260)) long ksDocument2D::ksChangeObjectInLibRequest ( IDispatch * info, IDispatch * phantom );
__declspec(implementation_key(261)) long ksDocument2D::ksReleaseReference ( long p );
__declspec(implementation_key(262)) IDispatchPtr ksDocument2D::GetFragment ( );
__declspec(implementation_key(263)) long ksDocument2D::ksInitFilePreviewFunc ( _bstr_t funcName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(264)) long ksDocument2D::ksTable ( );
__declspec(implementation_key(265)) long ksDocument2D::ksRebuildTableVirtualGrid ( );
__declspec(implementation_key(266)) long ksDocument2D::ksGetTableItemsCount ( long type );
__declspec(implementation_key(267)) long ksDocument2D::ksGetTableColumnText ( long * numb, IDispatch * par );
__declspec(implementation_key(268)) long ksDocument2D::ksSetTableColumnText ( long numb, IDispatch * par );
__declspec(implementation_key(269)) long ksDocument2D::ksClearTableColumnText ( long numb );
__declspec(implementation_key(270)) long ksDocument2D::ksCombineTwoTableItems ( long index1, long index2 );
__declspec(implementation_key(271)) long ksDocument2D::ksDivideTableItem ( long index, VARIANT_BOOL vertical, long style );
__declspec(implementation_key(272)) long ksDocument2D::ksSetTableBorderStyle ( long index, short typeBorder, long style );
__declspec(implementation_key(273)) long ksDocument2D::ksGetTableBorderStyle ( long index, short typeBorder );
__declspec(implementation_key(274)) long ksDocument2D::ksOpenTable ( long table );
__declspec(implementation_key(275)) long ksDocument2D::ksColumnNumber ( long numb );
__declspec(implementation_key(276)) long ksDocument2D::ksSetMacroParam ( long ref, IDispatch * userPars, VARIANT_BOOL dblClickOff, VARIANT_BOOL hotpoints, VARIANT_BOOL externEdit );
__declspec(implementation_key(277)) long ksDocument2D::ksGetMacroParam ( long ref, IDispatch * userPars );
__declspec(implementation_key(278)) long ksDocument2D::ksOpenTechnicalDemand ( IDispatch * pGab, long style );
__declspec(implementation_key(279)) long ksDocument2D::ksCloseTechnicalDemand ( );
__declspec(implementation_key(280)) long ksDocument2D::ksSpecRough ( IDispatch * par );
__declspec(implementation_key(281)) long ksDocument2D::ksViewPointer ( IDispatch * par );
__declspec(implementation_key(282)) long ksDocument2D::ksCutLine ( IDispatch * par );
__declspec(implementation_key(283)) long ksDocument2D::ksApproximationCurve ( long p, double eps, VARIANT_BOOL curentLayer, double maxRad, VARIANT_BOOL smooth );
__declspec(implementation_key(284)) long ksDocument2D::ksTolerance ( IDispatch * par );
__declspec(implementation_key(285)) long ksDocument2D::ksOpenTolerance ( long tolerance );
__declspec(implementation_key(286)) long ksDocument2D::ksGetToleranceColumnText ( long * numb, IDispatch * par );
__declspec(implementation_key(287)) long ksDocument2D::ksSetToleranceColumnText ( long numb, IDispatch * par );
__declspec(implementation_key(288)) long ksDocument2D::ksGetPointOnToleranceTable ( long tolerance, short entry, IDispatch * point );
__declspec(implementation_key(289)) VARIANT_BOOL ksDocument2D::ksOpenDocument ( _bstr_t nameDoc, VARIANT_BOOL regim );
__declspec(implementation_key(290)) VARIANT_BOOL ksDocument2D::ksSaveDocument ( _bstr_t fileName );
__declspec(implementation_key(291)) VARIANT_BOOL ksDocument2D::ksCloseDocument ( );
__declspec(implementation_key(292)) VARIANT_BOOL ksDocument2D::ksCreateDocument ( IDispatch * par );
__declspec(implementation_key(293)) VARIANT_BOOL ksDocument2D::ksMovePoint ( double * x, double * y, double ang, double len );
__declspec(implementation_key(294)) long ksDocument2D::ksReadTableFromFile ( _bstr_t tblFileName );
__declspec(implementation_key(295)) long ksDocument2D::ksDrawKompasDocument ( long HWindow, _bstr_t docFileName );
__declspec(implementation_key(296)) long ksDocument2D::ksViewGetObjectArea ( );
__declspec(implementation_key(297)) long ksDocument2D::ksGetMacroPlacement ( long macro, double * x, double * y, double * angl );
__declspec(implementation_key(298)) long ksDocument2D::ksSetMacroPlacement ( long macro, double x, double y, double angl, long relativ );
__declspec(implementation_key(299)) long ksDocument2D::ksDrawKompasGroup ( long HWindow, long gr );
__declspec(implementation_key(300)) IDispatchPtr ksDocument2D::ksGetDocVariableArray ( long p );
__declspec(implementation_key(301)) long ksDocument2D::ksSetDocVariableArray ( long obj, IDispatch * arr, VARIANT_BOOL setNote );
__declspec(implementation_key(302)) long ksDocument2D::ksGetDocOptions ( long optionsType, IDispatch * param );
__declspec(implementation_key(303)) long ksDocument2D::ksSetObjConstraint ( long obj, IDispatch * par );
__declspec(implementation_key(304)) IDispatchPtr ksDocument2D::ksGetObjConstraints ( long obj );
__declspec(implementation_key(305)) long ksDocument2D::ksDestroyObjConstraint ( long obj, IDispatch * par );
__declspec(implementation_key(306)) _bstr_t ksDocument2D::ksGetZona ( double x, double y, long * result_ );
__declspec(implementation_key(307)) long ksDocument2D::ksClearRegion ( long grClear, long grRegion, VARIANT_BOOL inside );
__declspec(implementation_key(308)) long ksDocument2D::ksNurbsForConicCurve ( IDispatch * xArr, IDispatch * yArr, short style );
__declspec(implementation_key(309)) IDispatchPtr ksDocument2D::GetStamp ( );
__declspec(implementation_key(310)) double ksDocument2D::ksGetTextLength ( _bstr_t text, long style );
__declspec(implementation_key(311)) double ksDocument2D::ksGetTextLengthFromReference ( long pText );
__declspec(implementation_key(312)) long ksDocument2D::ksZoom ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(313)) long ksDocument2D::ksZoomScale ( double x, double y, double scale );
__declspec(implementation_key(314)) long ksDocument2D::ksZoomPrevNextOrAll ( short type );
__declspec(implementation_key(315)) long ksDocument2D::ksGetZoomScale ( double * x, double * y, double * scale );
__declspec(implementation_key(316)) long ksDocument2D::ksSpecificationOnSheet ( short onSheet );
__declspec(implementation_key(317)) IDispatchPtr ksDocument2D::GetSpecification ( );
__declspec(implementation_key(318)) long ksDocument2D::ksReDrawDocPart ( IDispatch * rect, long view );
__declspec(implementation_key(319)) double ksDocument2D::ksGetCursorLimit ( );
__declspec(implementation_key(320)) long ksDocument2D::ksGetTextAlign ( long pText );
__declspec(implementation_key(321)) long ksDocument2D::ksSetTextAlign ( long pText, long align );
__declspec(implementation_key(322)) long ksDocument2D::ksSetTextLineAlign ( short align );
__declspec(implementation_key(323)) long ksDocument2D::ksDestroyObjects ( long gr );
__declspec(implementation_key(324)) VARIANT_BOOL ksDocument2D::ksEnableUndo ( VARIANT_BOOL enabl );
__declspec(implementation_key(325)) long ksDocument2D::ksAddPowerForm ( double x, double y );
__declspec(implementation_key(326)) long ksDocument2D::ksCreatePowerArc ( );
__declspec(implementation_key(327)) long ksDocument2D::ksTrimNurbs ( long pObj, double tMin, double tMax );
__declspec(implementation_key(328)) _bstr_t ksDocument2D::ksGetDimensionVariableName ( long dimObj );
__declspec(implementation_key(329)) long ksDocument2D::ksTrimmCurve ( long curve, double x1, double y1, double x2, double y2, double x3, double y3, short deleteOldCurve );
__declspec(implementation_key(330)) VARIANT_BOOL ksDocument2D::SaveAsToRasterFormat ( _bstr_t fileName, IDispatch * rasterPar );
__declspec(implementation_key(331)) IDispatchPtr ksDocument2D::RasterFormatParam ( );
__declspec(implementation_key(332)) double ksDocument2D::ksGetLeaderShelfLength ( long leader, double * x, double * y );
__declspec(implementation_key(333)) long ksDocument2D::ksSetDocOptions ( long optionsType, IDispatch * param );
__declspec(implementation_key(334)) long ksDocument2D::ksAxisLine ( IDispatch * param );
__declspec(implementation_key(335)) VARIANT_BOOL ksDocument2D::SaveAsToUncompressedRasterFormat ( _bstr_t fileName, IDispatch * rasterPar );
__declspec(implementation_key(336)) long ksDocument2D::ksCreateSheetArbitraryView ( IDispatch * par, long * number );
__declspec(implementation_key(337)) VARIANT_BOOL ksDocument2D::ksCreateSheetStandartViews ( IDispatch * par, long bitVector, double dx, double dy );
__declspec(implementation_key(338)) long ksDocument2D::ksCreateSheetProjectionView ( IDispatch * par, long * number, long view );
__declspec(implementation_key(339)) long ksDocument2D::ksCreateSheetArrowView ( IDispatch * par, long * number, long obj );
__declspec(implementation_key(340)) long ksDocument2D::ksCreateSheetSectionView ( IDispatch * par, long * number, long obj );
__declspec(implementation_key(341)) long ksDocument2D::ksCreateSheetRemoteView ( IDispatch * par, long * number, long obj );
__declspec(implementation_key(342)) VARIANT_BOOL ksDocument2D::ksRebuildDocument ( );
__declspec(implementation_key(343)) long ksDocument2D::ksRemoteElement ( IDispatch * par );
__declspec(implementation_key(344)) long ksDocument2D::ksCopyObjEx ( IDispatch * param );
__declspec(implementation_key(345)) IUnknownPtr ksDocument2D::GetObject2DNotify ( long objType );
__declspec(implementation_key(346)) IUnknownPtr ksDocument2D::GetSelectionMngNotify ( );
__declspec(implementation_key(347)) ksObject2DNotifyResultPtr ksDocument2D::GetObject2DNotifyResult ( );
__declspec(implementation_key(348)) IUnknownPtr ksDocument2D::GetDocument2DNotify ( );
__declspec(implementation_key(349)) long ksDocument2D::ksSetMaterialParam ( IDispatch * material, double density );
__declspec(implementation_key(350)) long ksDocument2D::ksChangeObjectsOrder ( long group, long obj, int type );
__declspec(implementation_key(351)) long ksDocument2D::ksIsSlaveSpcOpened ( );
__declspec(implementation_key(352)) long ksDocument2D::ksGetMacroWaitDblClickEdit ( long ref );
__declspec(implementation_key(353)) long ksDocument2D::ksSetMacroWaitDblClickEdit ( long ref, long waitDblClick );
__declspec(implementation_key(354)) long ksDocument2D::ksParametrizeObjects ( long obj, IDispatch * par );
__declspec(implementation_key(355)) long ksDocument2D::ksCursorEx ( IDispatch * info, double * x, double * y, IDispatch * phantom, IDispatch * processParam );
__declspec(implementation_key(356)) long ksDocument2D::ksPlacementEx ( IDispatch * info, double * x, double * y, double * angle, IDispatch * phantom, IDispatch * processParam );
__declspec(implementation_key(357)) double ksDocument2D::ksCalcRasterScale ( _bstr_t fileName, double w, double h );
__declspec(implementation_key(358)) long ksDocument2D::ksTextEx ( IDispatch * txtParam, long align );
__declspec(implementation_key(359)) long ksDocument2D::ksColouringEx ( long color, long group );
__declspec(implementation_key(360)) VARIANT_BOOL ksDocument2D::ksSaveDocumentEx ( _bstr_t fileName, long SaveMode );
__declspec(implementation_key(361)) _variant_t ksDocument2D::ksAssociationViewMatrix3D ( long ViewRef );
__declspec(implementation_key(362)) VARIANT_BOOL ksDocument2D::ksPoint3DToAssociationView ( long view, double x3D, double y3D, double z3D, double * x2D, double * y2D );
__declspec(implementation_key(363)) long ksDocument2D::ksGetReferenceDocumentPartEx ( short t, long SheetNumb );
__declspec(implementation_key(364)) IDispatchPtr ksDocument2D::GetStampEx ( long SheetNumb );
__declspec(implementation_key(365)) long ksDocument2D::ksGetDocumentPagesCount ( );
__declspec(implementation_key(366)) VARIANT_BOOL ksDocument2D::ksSaveToDXF ( _bstr_t DXFFileName );
__declspec(implementation_key(367)) long ksDocument2D::ksInitFilePreviewFuncW ( _bstr_t funcName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(368)) long ksDocument2D::ksChangeLeader ( IDispatch * leaderParam );
__declspec(implementation_key(369)) VARIANT_BOOL ksDocument2D::ksGetShelfPoint ( long p, long index, double * x, double * y, long paramType );
__declspec(implementation_key(370)) long ksDocument2D::ksMakeEncloseContoursEx ( long gr, double x, double y, VARIANT_BOOL forHatch );
__declspec(implementation_key(371)) long ksDocument2D::ksAnnPolylineEx ( IDispatch * par, short term1, short term2 );
__declspec(implementation_key(372)) long ksDocument2D::ksAnnEllipseArc ( IDispatch * par, short term1, short term2 );
__declspec(implementation_key(373)) long ksDocument2D::ksAnnParEllipseArc ( IDispatch * par, short term1, short term2 );
__declspec(implementation_key(374)) long ksDocument2D::ksAnnCircle ( double xc, double yc, double rad, long style );
__declspec(implementation_key(375)) long ksDocument2D::ksAnnEllipse ( IDispatch * par );
__declspec(implementation_key(376)) long ksDocument2D::ksAnnPolyline ( long style, short term1, short term2 );
__declspec(implementation_key(377)) long ksDocument2D::ksAnnTextEx ( IDispatch * txtParam, long align );
__declspec(implementation_key(378)) long ksDocument2D::ksAnnPoint ( double x, double y, long style );
__declspec(implementation_key(379)) VARIANT_BOOL ksDocument2D::ksGetAnnObjTerminators ( long annObj, short * term1, short * term2 );
__declspec(implementation_key(380)) long ksDocument2D::ksGetObjectStyle ( long obj );
__declspec(implementation_key(381)) VARIANT_BOOL ksDocument2D::ksSetObjectStyle ( long obj, long style );
__declspec(implementation_key(382)) long ksDocument2D::ksGetMacroPlacementEx ( long macro, double * x, double * y, double * angl, long sheetParam, long * mirrorSymmetry );
__declspec(implementation_key(383)) long ksDocument2D::ksSetMacroPlacementEx ( long macro, double x, double y, double angl, long relativ, long mirrorSymmetry );
__declspec(implementation_key(384)) VARIANT_BOOL ksDocument2D::ksUndoContainer ( VARIANT_BOOL Add );
__declspec(implementation_key(385)) VARIANT_BOOL ksDocument2D::ksGetEditMacroVisibleRegime ( long p );
__declspec(implementation_key(386)) long ksDocument2D::ksCopyGroupToDocument ( long gr, long from );
__declspec(implementation_key(387)) IDispatchPtr ksDocument2D::ksGetSnapInfo ( );
__declspec(implementation_key(388)) long ksDocument2D::ksReDrawDocPartEx ( IDispatch * rect, long view, long paramType );
__declspec(implementation_key(389)) long ksDocument2D::ksShowHideTmpObj ( long ref, long show );
__declspec(implementation_key(390)) long ksDocument2D::ksSetLightObjType ( long ref, long light );
__declspec(implementation_key(391)) _bstr_t ksDocument2D::ksGetObjectNameByType ( long type );
__declspec(implementation_key(392)) _bstr_t ksDocument2D::ksGetObjectsNameByType ( long type );
__declspec(implementation_key(393)) long ksDocument2D::ksSetMixDlgMaterialParam ( _bstr_t material, double density );
__declspec(implementation_key(394)) long ksDocument2D::Getreference ( );
__declspec(implementation_key(395)) void ksDocument2D::Putreference ( long _val );
__declspec(implementation_key(396)) VARIANT_BOOL ksDocument2D::GetorthoMode ( );
__declspec(implementation_key(397)) void ksDocument2D::PutorthoMode ( VARIANT_BOOL _val );
__declspec(implementation_key(398)) VARIANT_BOOL ksObject2DNotify::ChangeActive ( long objRef );
__declspec(implementation_key(399)) VARIANT_BOOL ksObject2DNotify::BeginDelete ( long objRef );
__declspec(implementation_key(400)) VARIANT_BOOL ksObject2DNotify::Delete ( long objRef );
__declspec(implementation_key(401)) VARIANT_BOOL ksObject2DNotify::BeginMove ( long objRef );
__declspec(implementation_key(402)) VARIANT_BOOL ksObject2DNotify::Move ( long objRef );
__declspec(implementation_key(403)) VARIANT_BOOL ksObject2DNotify::BeginRotate ( long objRef );
__declspec(implementation_key(404)) VARIANT_BOOL ksObject2DNotify::Rotate ( long objRef );
__declspec(implementation_key(405)) VARIANT_BOOL ksObject2DNotify::BeginScale ( long objRef );
__declspec(implementation_key(406)) VARIANT_BOOL ksObject2DNotify::scale ( long objRef );
__declspec(implementation_key(407)) VARIANT_BOOL ksObject2DNotify::BeginTransform ( long objRef );
__declspec(implementation_key(408)) VARIANT_BOOL ksObject2DNotify::Transform ( long objRef );
__declspec(implementation_key(409)) VARIANT_BOOL ksObject2DNotify::BeginCopy ( long objRef );
__declspec(implementation_key(410)) VARIANT_BOOL ksObject2DNotify::copy ( long objRef );
__declspec(implementation_key(411)) VARIANT_BOOL ksObject2DNotify::BeginSymmetry ( long objRef );
__declspec(implementation_key(412)) VARIANT_BOOL ksObject2DNotify::Symmetry ( long objRef );
__declspec(implementation_key(413)) VARIANT_BOOL ksObject2DNotify::BeginProcess ( long pType, long objRef );
__declspec(implementation_key(414)) VARIANT_BOOL ksObject2DNotify::EndProcess ( long pType );
__declspec(implementation_key(415)) VARIANT_BOOL ksObject2DNotify::CreateObject ( long objRef );
__declspec(implementation_key(416)) VARIANT_BOOL ksObject2DNotify::UpdateObject ( long objRef );
__declspec(implementation_key(417)) VARIANT_BOOL ksObject2DNotify::BeginDestroyObject ( long objRef );
__declspec(implementation_key(418)) VARIANT_BOOL ksObject2DNotify::DestroyObject ( long objRef );
__declspec(implementation_key(419)) VARIANT_BOOL ksObject2DNotify::BeginPropertyChanged ( long objRef );
__declspec(implementation_key(420)) VARIANT_BOOL ksObject2DNotify::PropertyChanged ( long objRef );
__declspec(implementation_key(421)) VARIANT_BOOL ksSelectionMngNotify::Select ( const _variant_t & obj );
__declspec(implementation_key(422)) VARIANT_BOOL ksSelectionMngNotify::Unselect ( const _variant_t & obj );
__declspec(implementation_key(423)) VARIANT_BOOL ksSelectionMngNotify::UnselectAll ( );
__declspec(implementation_key(424)) long ksObject2DNotifyResult::GetNotifyType ( );
__declspec(implementation_key(425)) VARIANT_BOOL ksObject2DNotifyResult::IsCopy ( );
__declspec(implementation_key(426)) VARIANT_BOOL ksObject2DNotifyResult::GetSheetPoint ( VARIANT_BOOL from, double * x, double * y );
__declspec(implementation_key(427)) long ksObject2DNotifyResult::GetCopyObject ( );
__declspec(implementation_key(428)) double ksObject2DNotifyResult::GetAngle ( );
__declspec(implementation_key(429)) VARIANT_BOOL ksObject2DNotifyResult::GetScale ( double * sx, double * sy );
__declspec(implementation_key(430)) long ksObject2DNotifyResult::GetProcessType ( );
__declspec(implementation_key(431)) VARIANT_BOOL ksObject2DNotifyResult::IsUndoMode ( );
__declspec(implementation_key(432)) VARIANT_BOOL ksObject2DNotifyResult::IsRedoMode ( );
__declspec(implementation_key(433)) VARIANT_BOOL ksDocument2DNotify::BeginRebuild ( );
__declspec(implementation_key(434)) VARIANT_BOOL ksDocument2DNotify::Rebuild ( );
__declspec(implementation_key(435)) VARIANT_BOOL ksDocument2DNotify::BeginChoiceMaterial ( );
__declspec(implementation_key(436)) VARIANT_BOOL ksDocument2DNotify::ChoiceMaterial ( _bstr_t material, double density );
__declspec(implementation_key(437)) VARIANT_BOOL ksDocument2DNotify::BeginInsertFragment ( );
__declspec(implementation_key(438)) VARIANT_BOOL ksDocument2DNotify::LocalFragmentEdit ( IDispatch * newDoc, VARIANT_BOOL newFrw );
__declspec(implementation_key(439)) VARIANT_BOOL ksDocument2DNotify::BeginChoiceProperty ( long objRef, double propID );
__declspec(implementation_key(440)) VARIANT_BOOL ksDocument2DNotify::ChoiceProperty ( long objRef, double propID );
__declspec(implementation_key(441)) VARIANT_BOOL ksDocument2DNotify::BeginDeleteProperty ( long objRef, double propID );
__declspec(implementation_key(442)) VARIANT_BOOL ksDocument2DNotify::DeleteProperty ( long objRef, double propID );
__declspec(implementation_key(443)) VARIANT_BOOL ksDocument3D::GetinvisibleMode ( );
__declspec(implementation_key(444)) VARIANT_BOOL ksDocument3D::Create ( VARIANT_BOOL invisible, VARIANT_BOOL typeDoc );
__declspec(implementation_key(445)) VARIANT_BOOL ksDocument3D::IsDetail ( );
__declspec(implementation_key(446)) IDispatchPtr ksDocument3D::GetPart ( long type );
__declspec(implementation_key(447)) IDispatchPtr ksDocument3D::MateConstraintCollection ( );
__declspec(implementation_key(448)) VARIANT_BOOL ksDocument3D::UpdateDocumentParam ( );
__declspec(implementation_key(449)) VARIANT_BOOL ksDocument3D::IsEditMode ( );
__declspec(implementation_key(450)) VARIANT_BOOL ksDocument3D::ChangeObjectInLibRequest ( );
__declspec(implementation_key(451)) VARIANT_BOOL ksDocument3D::StopLibRequest ( );
__declspec(implementation_key(452)) IDispatchPtr ksDocument3D::GetSpecification ( );
__declspec(implementation_key(453)) IDispatchPtr ksDocument3D::GetRequestInfo ( IDispatch * part );
__declspec(implementation_key(454)) VARIANT_BOOL ksDocument3D::UserGetPlacementAndEntity ( long entityCount );
__declspec(implementation_key(455)) VARIANT_BOOL ksDocument3D::SetActive ( );
__declspec(implementation_key(456)) VARIANT_BOOL ksDocument3D::IsActive ( );
__declspec(implementation_key(457)) VARIANT_BOOL ksDocument3D::Open ( _bstr_t fileName, VARIANT_BOOL invisible );
__declspec(implementation_key(458)) VARIANT_BOOL ksDocument3D::Save ( );
__declspec(implementation_key(459)) VARIANT_BOOL ksDocument3D::SaveAs ( _bstr_t fileName );
__declspec(implementation_key(460)) VARIANT_BOOL ksDocument3D::close ( );
__declspec(implementation_key(461)) VARIANT_BOOL ksDocument3D::UserGetCursor ( _bstr_t prompt, double * x, double * y, double * z );
__declspec(implementation_key(462)) VARIANT_BOOL ksDocument3D::SetPartFromFile ( _bstr_t fileName, IDispatch * part, VARIANT_BOOL externalFile );
__declspec(implementation_key(463)) IDispatchPtr ksDocument3D::EntityCollection ( short objType, VARIANT_BOOL checkEntity );
__declspec(implementation_key(464)) IDispatchPtr ksDocument3D::UserSelectEntity ( IDispatch * filterObject, _bstr_t methodName, _bstr_t prompt, long hInst, IDispatch * val );
__declspec(implementation_key(465)) VARIANT_BOOL ksDocument3D::RemoveMateConstraint ( long constraintType, IDispatch * obj1, IDispatch * obj2 );
__declspec(implementation_key(466)) VARIANT_BOOL ksDocument3D::AddMateConstraint ( long constraintType, IDispatch * obj1, IDispatch * obj2, short direction, short fixed, double val );
__declspec(implementation_key(467)) long ksDocument3D::ksDeleteObj ( long ref );
__declspec(implementation_key(468)) IDispatchPtr ksDocument3D::PartCollection ( VARIANT_BOOL refresh );
__declspec(implementation_key(469)) VARIANT_BOOL ksDocument3D::CreatePartFromFile ( _bstr_t fileName, IDispatch * part, IDispatch * plane );
__declspec(implementation_key(470)) IDispatchPtr ksDocument3D::CreatePartInAssembly ( _bstr_t fileName, IDispatch * plane );
__declspec(implementation_key(471)) VARIANT_BOOL ksDocument3D::RebuildDocument ( );
__declspec(implementation_key(472)) VARIANT_BOOL ksDocument3D::ZoomPrevNextOrAll ( short type );
__declspec(implementation_key(473)) IDispatchPtr ksDocument3D::GetMateConstraint ( );
__declspec(implementation_key(474)) VARIANT_BOOL ksDocument3D::SaveAsToRasterFormat ( _bstr_t fileName, IDispatch * rasterPar );
__declspec(implementation_key(475)) IDispatchPtr ksDocument3D::RasterFormatParam ( );
__declspec(implementation_key(476)) VARIANT_BOOL ksDocument3D::SaveAsToAdditionFormat ( _bstr_t fileName, IDispatch * additionPar );
__declspec(implementation_key(477)) IDispatchPtr ksDocument3D::AdditionFormatParam ( );
__declspec(implementation_key(478)) IDispatchPtr ksDocument3D::GetViewProjectionCollection ( );
__declspec(implementation_key(479)) VARIANT_BOOL ksDocument3D::DeleteObject ( IDispatch * obj );
__declspec(implementation_key(480)) IDispatchPtr ksDocument3D::GetSelectionMng ( );
__declspec(implementation_key(481)) IDispatchPtr ksDocument3D::GetChooseMng ( );
__declspec(implementation_key(482)) long ksDocument3D::GetObjectType ( IDispatch * obj );
__declspec(implementation_key(483)) long ksDocument3D::ksGetObjParam ( long ref, IDispatch * param, long parType );
__declspec(implementation_key(484)) long ksDocument3D::ksSetObjParam ( long referObj, IDispatch * param, long parType );
__declspec(implementation_key(485)) VARIANT_BOOL ksDocument3D::SaveAsToUncompressedRasterFormat ( _bstr_t fileName, IDispatch * rasterPar );
__declspec(implementation_key(486)) IDispatchPtr ksDocument3D::AddImportedSurfaces ( _bstr_t fileName, VARIANT_BOOL together );
__declspec(implementation_key(487)) IUnknownPtr ksDocument3D::GetDocument3DNotify ( );
__declspec(implementation_key(488)) ksAttribute3DCollectionPtr ksDocument3D::AttributeCollection ( long key1, long key2, long key3, long key4, double numb, IDispatch * pObj );
__declspec(implementation_key(489)) ksFeatureCollectionPtr ksDocument3D::FeatureCollection ( long key1, long key2, long key3, long key4, double numb, int objType );
__declspec(implementation_key(490)) VARIANT_BOOL ksDocument3D::SetPartFromFileEx ( _bstr_t fileName, IDispatch * part, VARIANT_BOOL externalFile, VARIANT_BOOL redraw );
__declspec(implementation_key(491)) ksComponentPositionerPtr ksDocument3D::ComponentPositioner ( );
__declspec(implementation_key(492)) ksPlacementPtr ksDocument3D::DefaultPlacement ( );
__declspec(implementation_key(493)) long ksDocument3D::ksIsSlaveSpcOpened ( );
__declspec(implementation_key(494)) IDispatchPtr ksDocument3D::GetEditMacroObject ( );
__declspec(implementation_key(495)) VARIANT_BOOL ksDocument3D::SaveAsEx ( _bstr_t fileName, long SaveMode );
__declspec(implementation_key(496)) IDispatchPtr ksDocument3D::GetInterface ( long o3dType );
__declspec(implementation_key(497)) IDispatchPtr ksDocument3D::CopyPart ( IDispatch * sourcePart, IDispatch * newPlacement );
__declspec(implementation_key(498)) IDispatchPtr ksDocument3D::UserSelectEntityEx ( IDispatch * filterObject, _bstr_t methodName, _bstr_t prompt, long hInst, IDispatch * val, IUnknown * processParam );
__declspec(implementation_key(499)) VARIANT_BOOL ksDocument3D::PlaceFeatureAfter ( IDispatch * obj, IDispatch * afterObj );
__declspec(implementation_key(500)) VARIANT_BOOL ksDocument3D::SetRollBackFeature ( IDispatch * obj );
__declspec(implementation_key(501)) IDispatchPtr ksDocument3D::GetRollBackFeature ( );
__declspec(implementation_key(502)) VARIANT_BOOL ksDocument3D::ExcludeFeaturesAfter ( IDispatch * obj, VARIANT_BOOL exclude );
__declspec(implementation_key(503)) IDispatchPtr ksDocument3D::GetDocument3DNotifyResult ( );
__declspec(implementation_key(504)) IDispatchPtr ksDocument3D::UserSelectEntityEx2 ( IDispatch * filterObject, _bstr_t methodName, _bstr_t prompt, const _variant_t & hInst, IDispatch * val, IUnknown * processParam );
__declspec(implementation_key(505)) VARIANT_BOOL ksDocument3D::RunTakeCreateObjectProc ( long processType, IDispatch * takeObject, VARIANT_BOOL needCreateTakeObj, VARIANT_BOOL lostTakeObj );
__declspec(implementation_key(506)) VARIANT_BOOL ksDocument3D::LoadFromAdditionFormat ( _bstr_t fileName, IDispatch * additionPar );
__declspec(implementation_key(507)) IDispatchPtr ksDocument3D::GetLastFeature ( );
__declspec(implementation_key(508)) _bstr_t ksDocument3D::GetfileName ( );
__declspec(implementation_key(509)) void ksDocument3D::PutfileName ( _bstr_t _val );
__declspec(implementation_key(510)) _bstr_t ksDocument3D::Getcomment ( );
__declspec(implementation_key(511)) void ksDocument3D::Putcomment ( _bstr_t _val );
__declspec(implementation_key(512)) _bstr_t ksDocument3D::Getauthor ( );
__declspec(implementation_key(513)) void ksDocument3D::Putauthor ( _bstr_t _val );
__declspec(implementation_key(514)) long ksDocument3D::Getreference ( );
__declspec(implementation_key(515)) void ksDocument3D::Putreference ( long _val );
__declspec(implementation_key(516)) VARIANT_BOOL ksDocument3D::Getperspective ( );
__declspec(implementation_key(517)) void ksDocument3D::Putperspective ( VARIANT_BOOL _val );
__declspec(implementation_key(518)) int ksDocument3D::GetdrawMode ( );
__declspec(implementation_key(519)) void ksDocument3D::PutdrawMode ( int _val );
__declspec(implementation_key(520)) VARIANT_BOOL ksDocument3D::GethideAllPlanes ( );
__declspec(implementation_key(521)) void ksDocument3D::PuthideAllPlanes ( VARIANT_BOOL _val );
__declspec(implementation_key(522)) VARIANT_BOOL ksDocument3D::GethideAllAxis ( );
__declspec(implementation_key(523)) void ksDocument3D::PuthideAllAxis ( VARIANT_BOOL _val );
__declspec(implementation_key(524)) VARIANT_BOOL ksDocument3D::GethideAllSketches ( );
__declspec(implementation_key(525)) void ksDocument3D::PuthideAllSketches ( VARIANT_BOOL _val );
__declspec(implementation_key(526)) VARIANT_BOOL ksDocument3D::GethideAllPlaces ( );
__declspec(implementation_key(527)) void ksDocument3D::PuthideAllPlaces ( VARIANT_BOOL _val );
__declspec(implementation_key(528)) VARIANT_BOOL ksDocument3D::GethideAllSurfaces ( );
__declspec(implementation_key(529)) void ksDocument3D::PuthideAllSurfaces ( VARIANT_BOOL _val );
__declspec(implementation_key(530)) VARIANT_BOOL ksDocument3D::GethideAllThreads ( );
__declspec(implementation_key(531)) void ksDocument3D::PuthideAllThreads ( VARIANT_BOOL _val );
__declspec(implementation_key(532)) VARIANT_BOOL ksDocument3D::GetshadedWireframe ( );
__declspec(implementation_key(533)) void ksDocument3D::PutshadedWireframe ( VARIANT_BOOL _val );
__declspec(implementation_key(534)) VARIANT_BOOL ksDocument3D::GetdismantleMode ( );
__declspec(implementation_key(535)) void ksDocument3D::PutdismantleMode ( VARIANT_BOOL _val );
__declspec(implementation_key(536)) VARIANT_BOOL ksDocument3D::GettreeNeedRebuild ( );
__declspec(implementation_key(537)) void ksDocument3D::PuttreeNeedRebuild ( VARIANT_BOOL _val );
__declspec(implementation_key(538)) VARIANT_BOOL ksDocument3D::GetenableRollBackFeaturesInCollections ( );
__declspec(implementation_key(539)) void ksDocument3D::PutenableRollBackFeaturesInCollections ( VARIANT_BOOL _val );
__declspec(implementation_key(540)) VARIANT_BOOL ksDocument3D::GethideAllCurves ( );
__declspec(implementation_key(541)) void ksDocument3D::PuthideAllCurves ( VARIANT_BOOL _val );
__declspec(implementation_key(542)) VARIANT_BOOL ksDocument3D::GethideAllControlPoints ( );
__declspec(implementation_key(543)) void ksDocument3D::PuthideAllControlPoints ( VARIANT_BOOL _val );
__declspec(implementation_key(544)) VARIANT_BOOL ksDocument3D::GethideAllDimensions ( );
__declspec(implementation_key(545)) void ksDocument3D::PuthideAllDimensions ( VARIANT_BOOL _val );
__declspec(implementation_key(546)) VARIANT_BOOL ksDocument3D::GethideAllDesignations ( );
__declspec(implementation_key(547)) void ksDocument3D::PuthideAllDesignations ( VARIANT_BOOL _val );
__declspec(implementation_key(548)) VARIANT_BOOL ksDocument3D::GethideAllAuxiliaryGeom ( );
__declspec(implementation_key(549)) void ksDocument3D::PuthideAllAuxiliaryGeom ( VARIANT_BOOL _val );
__declspec(implementation_key(550)) VARIANT_BOOL ksDocument3D::GethideInComponentsMode ( );
__declspec(implementation_key(551)) void ksDocument3D::PuthideInComponentsMode ( VARIANT_BOOL _val );
__declspec(implementation_key(552)) VARIANT_BOOL ksDocument3D::GetwindowNeedRebuild ( );
__declspec(implementation_key(553)) void ksDocument3D::PutwindowNeedRebuild ( VARIANT_BOOL _val );
__declspec(implementation_key(554)) VARIANT_BOOL ksDocument3D::GethideLayoutGeometry ( );
__declspec(implementation_key(555)) void ksDocument3D::PuthideLayoutGeometry ( VARIANT_BOOL _val );
__declspec(implementation_key(556)) VARIANT_BOOL ksDocument3D::GetmatesMultiCreatedMode ( );
__declspec(implementation_key(557)) void ksDocument3D::PutmatesMultiCreatedMode ( VARIANT_BOOL _val );
__declspec(implementation_key(558)) VARIANT_BOOL ksDocument3DNotify::BeginRebuild ( );
__declspec(implementation_key(559)) VARIANT_BOOL ksDocument3DNotify::Rebuild ( );
__declspec(implementation_key(560)) VARIANT_BOOL ksDocument3DNotify::BeginChoiceMaterial ( );
__declspec(implementation_key(561)) VARIANT_BOOL ksDocument3DNotify::ChoiceMaterial ( _bstr_t material, double density );
__declspec(implementation_key(562)) VARIANT_BOOL ksDocument3DNotify::BeginChoiceMarking ( );
__declspec(implementation_key(563)) VARIANT_BOOL ksDocument3DNotify::ChoiceMarking ( _bstr_t marking );
__declspec(implementation_key(564)) VARIANT_BOOL ksDocument3DNotify::BeginSetPartFromFile ( );
__declspec(implementation_key(565)) VARIANT_BOOL ksDocument3DNotify::BeginCreatePartFromFile ( VARIANT_BOOL typeDoc, struct ksEntity * plane );
__declspec(implementation_key(566)) VARIANT_BOOL ksDocument3DNotify::CreateEmbodiment ( _bstr_t marking );
__declspec(implementation_key(567)) VARIANT_BOOL ksDocument3DNotify::DeleteEmbodiment ( _bstr_t marking );
__declspec(implementation_key(568)) VARIANT_BOOL ksDocument3DNotify::ChangeCurrentEmbodiment ( _bstr_t marking );
__declspec(implementation_key(569)) VARIANT_BOOL ksDocument3DNotify::BeginChoiceProperty ( IDispatch * obj, double propID );
__declspec(implementation_key(570)) VARIANT_BOOL ksDocument3DNotify::ChoiceProperty ( IDispatch * obj, double propID );
__declspec(implementation_key(571)) VARIANT_BOOL ksDocument3DNotify::BeginRollbackFeatures ( );
__declspec(implementation_key(572)) VARIANT_BOOL ksDocument3DNotify::RollbackFeatures ( );
__declspec(implementation_key(573)) VARIANT_BOOL ksDocument3DNotify::BedinLoadCombinationChange ( long index );
__declspec(implementation_key(574)) VARIANT_BOOL ksDocument3DNotify::LoadCombinationChange ( long index );
__declspec(implementation_key(575)) VARIANT_BOOL ksDocument3DNotify::BeginDeleteMaterial ( );
__declspec(implementation_key(576)) VARIANT_BOOL ksDocument3DNotify::DeleteMaterial ( );
__declspec(implementation_key(577)) VARIANT_BOOL ksDocument3DNotify::BeginDeleteProperty ( IDispatch * obj, double propID );
__declspec(implementation_key(578)) VARIANT_BOOL ksDocument3DNotify::DeleteProperty ( IDispatch * obj, double propID );
__declspec(implementation_key(579)) short ksEntity::Gettype ( );
__declspec(implementation_key(580)) IDispatchPtr ksEntity::GetDefinition ( );
__declspec(implementation_key(581)) IDispatchPtr ksEntity::GetParent ( );
__declspec(implementation_key(582)) VARIANT_BOOL ksEntity::IsCreated ( );
__declspec(implementation_key(583)) VARIANT_BOOL ksEntity::IsIt ( long objType );
__declspec(implementation_key(584)) VARIANT_BOOL ksEntity::Create ( );
__declspec(implementation_key(585)) VARIANT_BOOL ksEntity::Update ( );
__declspec(implementation_key(586)) IDispatchPtr ksEntity::ColorParam ( );
__declspec(implementation_key(587)) VARIANT_BOOL ksEntity::GetAdvancedColor ( long * color, double * ambient, double * diffuse, double * specularity, double * shininess, double * transparency, double * emission );
__declspec(implementation_key(588)) VARIANT_BOOL ksEntity::SetAdvancedColor ( long color, double ambient, double diffuse, double specularity, double shininess, double transparency, double emission );
__declspec(implementation_key(589)) IDispatchPtr ksEntity::GetFeature ( );
__declspec(implementation_key(590)) IDispatchPtr ksEntity::BodyCollection ( );
__declspec(implementation_key(591)) VARIANT_BOOL ksEntity::GetMultiBodyParts ( );
__declspec(implementation_key(592)) IDispatchPtr ksEntity::GetBodyParts ( );
__declspec(implementation_key(593)) VARIANT_BOOL ksEntity::Gethidden ( );
__declspec(implementation_key(594)) void ksEntity::Puthidden ( VARIANT_BOOL _val );
__declspec(implementation_key(595)) _bstr_t ksEntity::Getname ( );
__declspec(implementation_key(596)) void ksEntity::Putname ( _bstr_t _val );
__declspec(implementation_key(597)) VARIANT_BOOL ksEntity::Getexcluded ( );
__declspec(implementation_key(598)) void ksEntity::Putexcluded ( VARIANT_BOOL _val );
__declspec(implementation_key(599)) long ksEntity::GetuseColor ( );
__declspec(implementation_key(600)) void ksEntity::PutuseColor ( long _val );
__declspec(implementation_key(601)) VARIANT_BOOL ksAttribute3DCollection::refresh ( );
__declspec(implementation_key(602)) long ksAttribute3DCollection::GetCount ( );
__declspec(implementation_key(603)) ksAttribute3DPtr ksAttribute3DCollection::First ( );
__declspec(implementation_key(604)) ksAttribute3DPtr ksAttribute3DCollection::Last ( );
__declspec(implementation_key(605)) ksAttribute3DPtr ksAttribute3DCollection::Next ( );
__declspec(implementation_key(606)) ksAttribute3DPtr ksAttribute3DCollection::Prev ( );
__declspec(implementation_key(607)) ksAttribute3DPtr ksAttribute3DCollection::GetByIndex ( long index );
__declspec(implementation_key(608)) long ksAttribute3DCollection::FindIt ( struct ksAttribute3D * obj );
__declspec(implementation_key(609)) VARIANT_BOOL ksAttribute3DCollection::Select ( long key1, long key2, long key3, long key4, double numb, long objType );
__declspec(implementation_key(610)) long ksAttribute3D::Getreference ( );
__declspec(implementation_key(611)) ksFeatureCollectionPtr ksAttribute3D::FeatureCollection ( long objType );
__declspec(implementation_key(612)) _bstr_t ksAttribute3D::GetnameType ( );
__declspec(implementation_key(613)) VARIANT_BOOL ksFeatureCollection::refresh ( );
__declspec(implementation_key(614)) long ksFeatureCollection::GetCount ( );
__declspec(implementation_key(615)) ksFeaturePtr ksFeatureCollection::First ( );
__declspec(implementation_key(616)) ksFeaturePtr ksFeatureCollection::Last ( );
__declspec(implementation_key(617)) ksFeaturePtr ksFeatureCollection::Next ( );
__declspec(implementation_key(618)) ksFeaturePtr ksFeatureCollection::Prev ( );
__declspec(implementation_key(619)) ksFeaturePtr ksFeatureCollection::GetByIndex ( long index );
__declspec(implementation_key(620)) ksFeaturePtr ksFeatureCollection::GetByName ( _bstr_t name, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(621)) long ksFeatureCollection::FindIt ( struct ksFeature * entity );
__declspec(implementation_key(622)) VARIANT_BOOL ksFeatureCollection::Add ( struct ksFeature * obj );
__declspec(implementation_key(623)) VARIANT_BOOL ksFeatureCollection::AddAt ( struct ksFeature * obj, long index );
__declspec(implementation_key(624)) VARIANT_BOOL ksFeatureCollection::AddBefore ( struct ksFeature * obj, struct ksFeature * base );
__declspec(implementation_key(625)) VARIANT_BOOL ksFeatureCollection::DetachByIndex ( long index );
__declspec(implementation_key(626)) VARIANT_BOOL ksFeatureCollection::DetachByBody ( struct ksFeature * obj );
__declspec(implementation_key(627)) VARIANT_BOOL ksFeatureCollection::Clear ( );
__declspec(implementation_key(628)) VARIANT_BOOL ksFeatureCollection::SetByIndex ( struct ksFeature * obj, long index );
__declspec(implementation_key(629)) ksAttribute3DCollectionPtr ksFeatureCollection::AttributeCollection ( long key1, long key2, long key3, long key4, double numb );
__declspec(implementation_key(630)) _bstr_t ksFeature::Getname ( );
__declspec(implementation_key(631)) unsigned long ksFeature::GetupdateStamp ( );
__declspec(implementation_key(632)) VARIANT_BOOL ksFeature::IsModified ( VARIANT_BOOL recursive );
__declspec(implementation_key(633)) IDispatchPtr ksFeature::SubFeatureCollection ( VARIANT_BOOL through, VARIANT_BOOL libObject );
__declspec(implementation_key(634)) IDispatchPtr ksFeature::GetOwnerFeature ( );
__declspec(implementation_key(635)) VARIANT_BOOL ksFeature::IsValid ( );
__declspec(implementation_key(636)) short ksFeature::Gettype ( );
__declspec(implementation_key(637)) IDispatchPtr ksFeature::GetObject ( );
__declspec(implementation_key(638)) ksAttribute3DCollectionPtr ksFeature::AttributeCollection ( long key1, long key2, long key3, long key4, double numb );
__declspec(implementation_key(639)) ksEntityCollectionPtr ksFeature::EntityCollection ( short objType );
__declspec(implementation_key(640)) IDispatchPtr ksFeature::GetVariableCollection ( );
__declspec(implementation_key(641)) IDispatchPtr ksFeature::BodyCollection ( );
__declspec(implementation_key(642)) ksAttribute3DCollectionPtr ksFeature::GetAttributeCollectionInSource ( long key1, long key2, long key3, long key4, double numb, struct ksPart * sourcePart );
__declspec(implementation_key(643)) VARIANT_BOOL ksFeature::IsRollBacked ( );
__declspec(implementation_key(644)) IDispatchPtr ksFeature::VariableCollectionEx ( VARIANT_BOOL sourse );
__declspec(implementation_key(645)) long ksFeature::GetobjectError ( );
__declspec(implementation_key(646)) VARIANT_BOOL ksFeature::Getexcluded ( );
__declspec(implementation_key(647)) void ksFeature::Putexcluded ( VARIANT_BOOL _val );
__declspec(implementation_key(648)) VARIANT_BOOL ksEntityCollection::refresh ( );
__declspec(implementation_key(649)) long ksEntityCollection::GetCount ( );
__declspec(implementation_key(650)) IDispatchPtr ksEntityCollection::First ( );
__declspec(implementation_key(651)) IDispatchPtr ksEntityCollection::Last ( );
__declspec(implementation_key(652)) IDispatchPtr ksEntityCollection::Next ( );
__declspec(implementation_key(653)) IDispatchPtr ksEntityCollection::Prev ( );
__declspec(implementation_key(654)) IDispatchPtr ksEntityCollection::GetByIndex ( long index );
__declspec(implementation_key(655)) VARIANT_BOOL ksEntityCollection::SelectByPoint ( double x, double y, double z );
__declspec(implementation_key(656)) IDispatchPtr ksEntityCollection::GetByName ( _bstr_t name, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(657)) VARIANT_BOOL ksEntityCollection::Add ( IDispatch * entity );
__declspec(implementation_key(658)) VARIANT_BOOL ksEntityCollection::AddAt ( IDispatch * entity, long index );
__declspec(implementation_key(659)) VARIANT_BOOL ksEntityCollection::AddBefore ( IDispatch * entity, IDispatch * base );
__declspec(implementation_key(660)) VARIANT_BOOL ksEntityCollection::DetachByIndex ( long index );
__declspec(implementation_key(661)) VARIANT_BOOL ksEntityCollection::DetachByBody ( IDispatch * entity );
__declspec(implementation_key(662)) VARIANT_BOOL ksEntityCollection::Clear ( );
__declspec(implementation_key(663)) VARIANT_BOOL ksEntityCollection::SetByIndex ( IDispatch * entity, long index );
__declspec(implementation_key(664)) long ksEntityCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(665)) _bstr_t ksPart::Getmaterial ( );
__declspec(implementation_key(666)) VARIANT_BOOL ksPart::SetPlacement ( IDispatch * placement );
__declspec(implementation_key(667)) IDispatchPtr ksPart::GetPlacement ( );
__declspec(implementation_key(668)) IDispatchPtr ksPart::ColorParam ( );
__declspec(implementation_key(669)) IDispatchPtr ksPart::VariableCollection ( );
__declspec(implementation_key(670)) VARIANT_BOOL ksPart::Update ( );
__declspec(implementation_key(671)) long ksPart::GetUserParamSize ( );
__declspec(implementation_key(672)) VARIANT_BOOL ksPart::UpdatePlacement ( );
__declspec(implementation_key(673)) VARIANT_BOOL ksPart::RebuildModel ( );
__declspec(implementation_key(674)) IDispatchPtr ksPart::GetDefaultEntity ( short objType );
__declspec(implementation_key(675)) IDispatchPtr ksPart::NewEntity ( short objType );
__declspec(implementation_key(676)) IDispatchPtr ksPart::EntityCollection ( short objType );
__declspec(implementation_key(677)) VARIANT_BOOL ksPart::GetAdvancedColor ( long * color, double * ambient, double * diffuse, double * specularity, double * shininess, double * transparency, double * emission );
__declspec(implementation_key(678)) VARIANT_BOOL ksPart::SetAdvancedColor ( long color, double ambient, double diffuse, double specularity, double shininess, double transparency, double emission );
__declspec(implementation_key(679)) VARIANT_BOOL ksPart::SetUserParam ( IDispatch * userPars );
__declspec(implementation_key(680)) VARIANT_BOOL ksPart::IsDetail ( );
__declspec(implementation_key(681)) IDispatchPtr ksPart::BeginEdit ( );
__declspec(implementation_key(682)) VARIANT_BOOL ksPart::EndEdit ( VARIANT_BOOL Rebuild );
__declspec(implementation_key(683)) IDispatchPtr ksPart::GetPart ( short type );
__declspec(implementation_key(684)) double ksPart::GetMass ( );
__declspec(implementation_key(685)) VARIANT_BOOL ksPart::PutStorage ( _bstr_t fileName, long type, VARIANT_BOOL mirror );
__declspec(implementation_key(686)) VARIANT_BOOL ksPart::SetMateConstraintObjects ( IDispatch * collection );
__declspec(implementation_key(687)) IDispatchPtr ksPart::GetMateConstraintObjects ( );
__declspec(implementation_key(688)) VARIANT_BOOL ksPart::GetUserParam ( IDispatch * userPars );
__declspec(implementation_key(689)) double ksPart::Getdensity ( );
__declspec(implementation_key(690)) VARIANT_BOOL ksPart::SetMaterial ( _bstr_t material, double density );
__declspec(implementation_key(691)) IDispatchPtr ksPart::BodyCollection ( );
__declspec(implementation_key(692)) IDispatchPtr ksPart::GetFeature ( );
__declspec(implementation_key(693)) IDispatchPtr ksPart::CalcMassInertiaProperties ( unsigned long bitVector );
__declspec(implementation_key(694)) IDispatchPtr ksPart::GetMeasurer ( );
__declspec(implementation_key(695)) IDispatchPtr ksPart::GetMainBody ( );
__declspec(implementation_key(696)) IUnknownPtr ksPart::GetObject3DNotify ( long objType, IDispatch * obj );
__declspec(implementation_key(697)) ksObject3DNotifyResultPtr ksPart::GetObject3DNotifyResult ( );
__declspec(implementation_key(698)) VARIANT_BOOL ksPart::UpdatePlacementEx ( VARIANT_BOOL redraw );
__declspec(implementation_key(699)) VARIANT_BOOL ksPart::RebuildModelEx ( VARIANT_BOOL redraw );
__declspec(implementation_key(700)) VARIANT_BOOL ksPart::CurveIntersection ( IDispatch * curve, IDispatch * parts, IDispatch * fases, IDispatch * points );
__declspec(implementation_key(701)) VARIANT_BOOL ksPart::TransformPoint ( double * x, double * y, double * z, IDispatch * part1 );
__declspec(implementation_key(702)) VARIANT_BOOL ksPart::SetObject ( long index, IDispatch * obj );
__declspec(implementation_key(703)) IDispatchPtr ksPart::GetObject ( long index );
__declspec(implementation_key(704)) long ksPart::GetCountObj ( );
__declspec(implementation_key(705)) VARIANT_BOOL ksPart::ClearAllObj ( );
__declspec(implementation_key(706)) IDispatchPtr ksPart::CreateOrEditObject ( short objType, IDispatch * editObj );
__declspec(implementation_key(707)) VARIANT_BOOL ksPart::TransformPoints ( VARIANT * points, IDispatch * part1 );
__declspec(implementation_key(708)) _variant_t ksPart::GetSummMatrix ( IDispatch * part1 );
__declspec(implementation_key(709)) VARIANT_BOOL ksPart::GetMultiBodyParts ( );
__declspec(implementation_key(710)) VARIANT_BOOL ksPart::SetSourceVariables ( VARIANT_BOOL Rebuild );
__declspec(implementation_key(711)) IDispatchPtr ksPart::GetObjectByName ( _bstr_t name, short objType, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(712)) VARIANT_BOOL ksPart::GetGabarit ( VARIANT_BOOL full, VARIANT_BOOL customizable, double * x1, double * y1, double * z1, double * x2, double * y2, double * z2 );
__declspec(implementation_key(713)) _bstr_t ksPart::Getname ( );
__declspec(implementation_key(714)) void ksPart::Putname ( _bstr_t _val );
__declspec(implementation_key(715)) _bstr_t ksPart::Getmarking ( );
__declspec(implementation_key(716)) void ksPart::Putmarking ( _bstr_t _val );
__declspec(implementation_key(717)) VARIANT_BOOL ksPart::GetfixedComponent ( );
__declspec(implementation_key(718)) void ksPart::PutfixedComponent ( VARIANT_BOOL _val );
__declspec(implementation_key(719)) VARIANT_BOOL ksPart::GetstandardComponent ( );
__declspec(implementation_key(720)) void ksPart::PutstandardComponent ( VARIANT_BOOL _val );
__declspec(implementation_key(721)) _bstr_t ksPart::GetfileName ( );
__declspec(implementation_key(722)) void ksPart::PutfileName ( _bstr_t _val );
__declspec(implementation_key(723)) VARIANT_BOOL ksPart::Getexcluded ( );
__declspec(implementation_key(724)) void ksPart::Putexcluded ( VARIANT_BOOL _val );
__declspec(implementation_key(725)) long ksPart::GetuseColor ( );
__declspec(implementation_key(726)) void ksPart::PutuseColor ( long _val );
__declspec(implementation_key(727)) VARIANT_BOOL ksPart::GetneedRebuild ( );
__declspec(implementation_key(728)) void ksPart::PutneedRebuild ( VARIANT_BOOL _val );
__declspec(implementation_key(729)) VARIANT_BOOL ksPart::Gethidden ( );
__declspec(implementation_key(730)) void ksPart::Puthidden ( VARIANT_BOOL _val );
__declspec(implementation_key(731)) VARIANT_BOOL ksPart::GetDoubleClickEditOff ( );
__declspec(implementation_key(732)) void ksPart::PutDoubleClickEditOff ( VARIANT_BOOL _val );
__declspec(implementation_key(733)) VARIANT_BOOL ksPart::GetPropertyObjectEditable ( );
__declspec(implementation_key(734)) void ksPart::PutPropertyObjectEditable ( VARIANT_BOOL _val );
__declspec(implementation_key(735)) VARIANT_BOOL ksObject3DNotify::BeginDelete ( IDispatch * obj );
__declspec(implementation_key(736)) VARIANT_BOOL ksObject3DNotify::Delete ( IDispatch * obj );
__declspec(implementation_key(737)) VARIANT_BOOL ksObject3DNotify::excluded ( IDispatch * obj, VARIANT_BOOL excluded );
__declspec(implementation_key(738)) VARIANT_BOOL ksObject3DNotify::hidden ( IDispatch * obj, VARIANT_BOOL _hidden );
__declspec(implementation_key(739)) VARIANT_BOOL ksObject3DNotify::BeginPropertyChanged ( IDispatch * obj );
__declspec(implementation_key(740)) VARIANT_BOOL ksObject3DNotify::PropertyChanged ( IDispatch * obj );
__declspec(implementation_key(741)) VARIANT_BOOL ksObject3DNotify::BeginPlacementChanged ( IDispatch * obj );
__declspec(implementation_key(742)) VARIANT_BOOL ksObject3DNotify::PlacementChanged ( IDispatch * obj );
__declspec(implementation_key(743)) VARIANT_BOOL ksObject3DNotify::BeginProcess ( long pType, IDispatch * obj );
__declspec(implementation_key(744)) VARIANT_BOOL ksObject3DNotify::EndProcess ( long pType );
__declspec(implementation_key(745)) VARIANT_BOOL ksObject3DNotify::CreateObject ( IDispatch * obj );
__declspec(implementation_key(746)) VARIANT_BOOL ksObject3DNotify::UpdateObject ( IDispatch * obj );
__declspec(implementation_key(747)) VARIANT_BOOL ksObject3DNotify::BeginLoadStateChange ( IDispatch * obj, long loadState );
__declspec(implementation_key(748)) VARIANT_BOOL ksObject3DNotify::LoadStateChange ( IDispatch * obj, long loadState );
__declspec(implementation_key(749)) long ksObject3DNotifyResult::GetNotifyType ( );
__declspec(implementation_key(750)) ksFeatureCollectionPtr ksObject3DNotifyResult::GetFeatureCollection ( );
__declspec(implementation_key(751)) ksPlacementPtr ksObject3DNotifyResult::GetPlacement ( );
__declspec(implementation_key(752)) long ksObject3DNotifyResult::GetProcessType ( );
__declspec(implementation_key(753)) VARIANT_BOOL ksObject3DNotifyResult::IsUndoMode ( );
__declspec(implementation_key(754)) VARIANT_BOOL ksObject3DNotifyResult::IsRedoMode ( );
__declspec(implementation_key(755)) VARIANT_BOOL ksPlacement::GetOrigin ( double * x, double * y, double * z );
__declspec(implementation_key(756)) VARIANT_BOOL ksPlacement::SetOrigin ( double x, double y, double z );
__declspec(implementation_key(757)) VARIANT_BOOL ksPlacement::GetAxis ( double * x, double * y, double * z, long type );
__declspec(implementation_key(758)) VARIANT_BOOL ksPlacement::SetAxis ( double x, double y, double z, long type );
__declspec(implementation_key(759)) VARIANT_BOOL ksPlacement::SetPlacement ( IDispatch * placement );
__declspec(implementation_key(760)) VARIANT_BOOL ksPlacement::SetAxes ( double Xx, double Xy, double Xz, double Yx, double Yy, double Yz );
__declspec(implementation_key(761)) VARIANT_BOOL ksPlacement::PointProjection ( double XIn, double YIn, double ZIn, double * XOut, double * YOut );
__declspec(implementation_key(762)) VARIANT_BOOL ksPlacement::PointOn ( double XIn, double YIn, double * XOut, double * YOut, double * ZOut );
__declspec(implementation_key(763)) VARIANT_BOOL ksPlacement::GetVector ( long type, double * x, double * y, double * z );
__declspec(implementation_key(764)) VARIANT_BOOL ksPlacement::SetVector ( long type, double x, double y, double z );
__declspec(implementation_key(765)) VARIANT_BOOL ksPlacement::InitByMatrix3D ( const _variant_t & mtr );
__declspec(implementation_key(766)) VARIANT_BOOL ksPlacement::GetMatrix3D ( VARIANT * Result );
__declspec(implementation_key(767)) VARIANT_BOOL ksComponentPositioner::SetPlaneByPlacement ( struct ksPlacement * plane );
__declspec(implementation_key(768)) VARIANT_BOOL ksComponentPositioner::SetPlane ( IDispatch * plane );
__declspec(implementation_key(769)) VARIANT_BOOL ksComponentPositioner::SetPlaneByPoints ( double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3 );
__declspec(implementation_key(770)) VARIANT_BOOL ksComponentPositioner::SetDragPoint ( double x, double y, double z );
__declspec(implementation_key(771)) VARIANT_BOOL ksComponentPositioner::SetAxis ( IDispatch * axis );
__declspec(implementation_key(772)) VARIANT_BOOL ksComponentPositioner::SetAxisByPoints ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(773)) long ksComponentPositioner::Prepare ( struct ksPart * part, long positionerType );
__declspec(implementation_key(774)) VARIANT_BOOL ksComponentPositioner::MoveComponent ( double x, double y, double z );
__declspec(implementation_key(775)) VARIANT_BOOL ksComponentPositioner::RotateComponent ( double angl );
__declspec(implementation_key(776)) VARIANT_BOOL ksComponentPositioner::Finish ( );
__declspec(implementation_key(777)) VARIANT_BOOL ksKompasObjectNotify::CreateDocument ( IDispatch * newDoc, long docType );
__declspec(implementation_key(778)) VARIANT_BOOL ksKompasObjectNotify::BeginOpenDocument ( _bstr_t fileName );
__declspec(implementation_key(779)) VARIANT_BOOL ksKompasObjectNotify::OpenDocument ( IDispatch * newDoc, long docType );
__declspec(implementation_key(780)) VARIANT_BOOL ksKompasObjectNotify::ChangeActiveDocument ( IDispatch * newDoc, long docType );
__declspec(implementation_key(781)) VARIANT_BOOL ksKompasObjectNotify::ApplicationDestroy ( );
__declspec(implementation_key(782)) VARIANT_BOOL ksKompasObjectNotify::BeginCreate ( long docType );
__declspec(implementation_key(783)) VARIANT_BOOL ksKompasObjectNotify::BeginOpenFile ( );
__declspec(implementation_key(784)) VARIANT_BOOL ksKompasObjectNotify::BeginCloseAllDocument ( );
__declspec(implementation_key(785)) VARIANT_BOOL ksKompasObjectNotify::KeyDown ( long * key, long flags, VARIANT_BOOL systemKey );
__declspec(implementation_key(786)) VARIANT_BOOL ksKompasObjectNotify::KeyUp ( long * key, long flags, VARIANT_BOOL systemKey );
__declspec(implementation_key(787)) VARIANT_BOOL ksKompasObjectNotify::KeyPress ( long * key, VARIANT_BOOL systemKey );
__declspec(implementation_key(788)) VARIANT_BOOL ksKompasObjectNotify::BeginReguestFiles ( long requestID, VARIANT * files );
__declspec(implementation_key(789)) VARIANT_BOOL ksKompasObjectNotify::BeginChoiceMaterial ( long MaterialPropertyId );
__declspec(implementation_key(790)) VARIANT_BOOL ksKompasObjectNotify::ChoiceMaterial ( long MaterialPropertyId, _bstr_t material, double density );
__declspec(implementation_key(791)) VARIANT_BOOL ksKompasObjectNotify::IsNeedConvertToSavePrevious ( IDispatch * pDoc, long docType, long saveVersion, IDispatch * saveToPreviusParam, VARIANT_BOOL * needConvert );
__declspec(implementation_key(792)) VARIANT_BOOL ksKompasObjectNotify::BeginConvertToSavePrevious ( IDispatch * pDoc, long docType, long saveVersion, IDispatch * saveToPreviusParam );
__declspec(implementation_key(793)) VARIANT_BOOL ksKompasObjectNotify::EndConvertToSavePrevious ( IDispatch * pDoc, long docType, long saveVersion, IDispatch * saveToPreviusParam );
__declspec(implementation_key(794)) VARIANT_BOOL ksKompasObjectNotify::ChangeTheme ( long newTheme );
__declspec(implementation_key(795)) VARIANT_BOOL ksKompasObjectNotify::BeginDragOpenFiles ( VARIANT * filesList, VARIANT_BOOL insert, VARIANT_BOOL * filesListChanged );
__declspec(implementation_key(796)) VARIANT_BOOL ksDocumentFileNotify::BeginCloseDocument ( );
__declspec(implementation_key(797)) VARIANT_BOOL ksDocumentFileNotify::CloseDocument ( );
__declspec(implementation_key(798)) VARIANT_BOOL ksDocumentFileNotify::BeginSaveDocument ( _bstr_t fileName );
__declspec(implementation_key(799)) VARIANT_BOOL ksDocumentFileNotify::SaveDocument ( );
__declspec(implementation_key(800)) VARIANT_BOOL ksDocumentFileNotify::Activate ( );
__declspec(implementation_key(801)) VARIANT_BOOL ksDocumentFileNotify::Deactivate ( );
__declspec(implementation_key(802)) VARIANT_BOOL ksDocumentFileNotify::BeginSaveAsDocument ( );
__declspec(implementation_key(803)) VARIANT_BOOL ksDocumentFileNotify::DocumentFrameOpen ( IDispatch * v );
__declspec(implementation_key(804)) VARIANT_BOOL ksDocumentFileNotify::ProcessActivate ( long iD );
__declspec(implementation_key(805)) VARIANT_BOOL ksDocumentFileNotify::ProcessDeactivate ( long iD );
__declspec(implementation_key(806)) VARIANT_BOOL ksDocumentFileNotify::BeginProcess ( long iD );
__declspec(implementation_key(807)) VARIANT_BOOL ksDocumentFileNotify::EndProcess ( long iD, VARIANT_BOOL Success );
__declspec(implementation_key(808)) VARIANT_BOOL ksDocumentFileNotify::BeginAutoSaveDocument ( _bstr_t fileName );
__declspec(implementation_key(809)) VARIANT_BOOL ksDocumentFileNotify::AutoSaveDocument ( );
__declspec(implementation_key(810)) long ksDocument3DNotifyResult::GetNotifyType ( );
__declspec(implementation_key(811)) long ksDocument3DNotifyResult::GetNotifyObjectType ( );
__declspec(implementation_key(812)) IDispatchPtr ksDocument3DNotifyResult::GetNotifyObject ( );
__declspec(implementation_key(813)) long ksDocument3DNotifyResult::GetRequestFilesType ( );
__declspec(implementation_key(814)) VARIANT_BOOL ksSpecRoughParam::Init ( );
__declspec(implementation_key(815)) long ksSpecRoughParam::Getstyle ( );
__declspec(implementation_key(816)) void ksSpecRoughParam::Putstyle ( long _val );
__declspec(implementation_key(817)) short ksSpecRoughParam::Getsign ( );
__declspec(implementation_key(818)) void ksSpecRoughParam::Putsign ( short _val );
__declspec(implementation_key(819)) VARIANT_BOOL ksSpecRoughParam::Gett ( );
__declspec(implementation_key(820)) void ksSpecRoughParam::Putt ( VARIANT_BOOL _val );
__declspec(implementation_key(821)) _bstr_t ksSpecRoughParam::Gets ( );
__declspec(implementation_key(822)) void ksSpecRoughParam::Puts ( _bstr_t _val );
__declspec(implementation_key(823)) VARIANT_BOOL ksEllipseParam::Init ( );
__declspec(implementation_key(824)) double ksEllipseParam::Getxc ( );
__declspec(implementation_key(825)) void ksEllipseParam::Putxc ( double _val );
__declspec(implementation_key(826)) double ksEllipseParam::Getyc ( );
__declspec(implementation_key(827)) void ksEllipseParam::Putyc ( double _val );
__declspec(implementation_key(828)) double ksEllipseParam::GetA ( );
__declspec(implementation_key(829)) void ksEllipseParam::PutA ( double _val );
__declspec(implementation_key(830)) double ksEllipseParam::GetB ( );
__declspec(implementation_key(831)) void ksEllipseParam::PutB ( double _val );
__declspec(implementation_key(832)) double ksEllipseParam::Getangle ( );
__declspec(implementation_key(833)) void ksEllipseParam::Putangle ( double _val );
__declspec(implementation_key(834)) long ksEllipseParam::Getstyle ( );
__declspec(implementation_key(835)) void ksEllipseParam::Putstyle ( long _val );
__declspec(implementation_key(836)) VARIANT_BOOL ksEllipseArcParam::Init ( );
__declspec(implementation_key(837)) double ksEllipseArcParam::Getxc ( );
__declspec(implementation_key(838)) void ksEllipseArcParam::Putxc ( double _val );
__declspec(implementation_key(839)) double ksEllipseArcParam::Getyc ( );
__declspec(implementation_key(840)) void ksEllipseArcParam::Putyc ( double _val );
__declspec(implementation_key(841)) double ksEllipseArcParam::GetA ( );
__declspec(implementation_key(842)) void ksEllipseArcParam::PutA ( double _val );
__declspec(implementation_key(843)) double ksEllipseArcParam::GetB ( );
__declspec(implementation_key(844)) void ksEllipseArcParam::PutB ( double _val );
__declspec(implementation_key(845)) double ksEllipseArcParam::Getangle ( );
__declspec(implementation_key(846)) void ksEllipseArcParam::Putangle ( double _val );
__declspec(implementation_key(847)) double ksEllipseArcParam::GetangleFirst ( );
__declspec(implementation_key(848)) void ksEllipseArcParam::PutangleFirst ( double _val );
__declspec(implementation_key(849)) double ksEllipseArcParam::GetangleSecond ( );
__declspec(implementation_key(850)) void ksEllipseArcParam::PutangleSecond ( double _val );
__declspec(implementation_key(851)) double ksEllipseArcParam::Getdirection ( );
__declspec(implementation_key(852)) void ksEllipseArcParam::Putdirection ( double _val );
__declspec(implementation_key(853)) long ksEllipseArcParam::Getstyle ( );
__declspec(implementation_key(854)) void ksEllipseArcParam::Putstyle ( long _val );
__declspec(implementation_key(855)) VARIANT_BOOL ksEllipseArcParam1::Init ( );
__declspec(implementation_key(856)) double ksEllipseArcParam1::Getxc ( );
__declspec(implementation_key(857)) void ksEllipseArcParam1::Putxc ( double _val );
__declspec(implementation_key(858)) double ksEllipseArcParam1::Getyc ( );
__declspec(implementation_key(859)) void ksEllipseArcParam1::Putyc ( double _val );
__declspec(implementation_key(860)) double ksEllipseArcParam1::GetA ( );
__declspec(implementation_key(861)) void ksEllipseArcParam1::PutA ( double _val );
__declspec(implementation_key(862)) double ksEllipseArcParam1::GetB ( );
__declspec(implementation_key(863)) void ksEllipseArcParam1::PutB ( double _val );
__declspec(implementation_key(864)) double ksEllipseArcParam1::Getangle ( );
__declspec(implementation_key(865)) void ksEllipseArcParam1::Putangle ( double _val );
__declspec(implementation_key(866)) double ksEllipseArcParam1::GetparFirst ( );
__declspec(implementation_key(867)) void ksEllipseArcParam1::PutparFirst ( double _val );
__declspec(implementation_key(868)) double ksEllipseArcParam1::GetparSecond ( );
__declspec(implementation_key(869)) void ksEllipseArcParam1::PutparSecond ( double _val );
__declspec(implementation_key(870)) double ksEllipseArcParam1::Getdirection ( );
__declspec(implementation_key(871)) void ksEllipseArcParam1::Putdirection ( double _val );
__declspec(implementation_key(872)) long ksEllipseArcParam1::Getstyle ( );
__declspec(implementation_key(873)) void ksEllipseArcParam1::Putstyle ( long _val );
__declspec(implementation_key(874)) VARIANT_BOOL ksEquidistantParam::Init ( );
__declspec(implementation_key(875)) long ksEquidistantParam::GetgeoObj ( );
__declspec(implementation_key(876)) void ksEquidistantParam::PutgeoObj ( long _val );
__declspec(implementation_key(877)) short ksEquidistantParam::Getside ( );
__declspec(implementation_key(878)) void ksEquidistantParam::Putside ( short _val );
__declspec(implementation_key(879)) VARIANT_BOOL ksEquidistantParam::GetcutMode ( );
__declspec(implementation_key(880)) void ksEquidistantParam::PutcutMode ( VARIANT_BOOL _val );
__declspec(implementation_key(881)) VARIANT_BOOL ksEquidistantParam::GetdegState ( );
__declspec(implementation_key(882)) void ksEquidistantParam::PutdegState ( VARIANT_BOOL _val );
__declspec(implementation_key(883)) double ksEquidistantParam::GetradRight ( );
__declspec(implementation_key(884)) void ksEquidistantParam::PutradRight ( double _val );
__declspec(implementation_key(885)) double ksEquidistantParam::GetradLeft ( );
__declspec(implementation_key(886)) void ksEquidistantParam::PutradLeft ( double _val );
__declspec(implementation_key(887)) long ksEquidistantParam::Getstyle ( );
__declspec(implementation_key(888)) void ksEquidistantParam::Putstyle ( long _val );
__declspec(implementation_key(889)) VARIANT_BOOL ksParagraphParam::Init ( );
__declspec(implementation_key(890)) long ksParagraphParam::Getstyle ( );
__declspec(implementation_key(891)) void ksParagraphParam::Putstyle ( long _val );
__declspec(implementation_key(892)) double ksParagraphParam::Getx ( );
__declspec(implementation_key(893)) void ksParagraphParam::Putx ( double _val );
__declspec(implementation_key(894)) double ksParagraphParam::Gety ( );
__declspec(implementation_key(895)) void ksParagraphParam::Puty ( double _val );
__declspec(implementation_key(896)) double ksParagraphParam::Getang ( );
__declspec(implementation_key(897)) void ksParagraphParam::Putang ( double _val );
__declspec(implementation_key(898)) double ksParagraphParam::Getwidth ( );
__declspec(implementation_key(899)) void ksParagraphParam::Putwidth ( double _val );
__declspec(implementation_key(900)) double ksParagraphParam::Getheight ( );
__declspec(implementation_key(901)) void ksParagraphParam::Putheight ( double _val );
__declspec(implementation_key(902)) long ksParagraphParam::GetvFormat ( );
__declspec(implementation_key(903)) void ksParagraphParam::PutvFormat ( long _val );
__declspec(implementation_key(904)) long ksParagraphParam::GethFormat ( );
__declspec(implementation_key(905)) void ksParagraphParam::PuthFormat ( long _val );
__declspec(implementation_key(906)) VARIANT_BOOL ksTextItemParam::Init ( );
__declspec(implementation_key(907)) IDispatchPtr ksTextItemParam::GetItemFont ( );
__declspec(implementation_key(908)) VARIANT_BOOL ksTextItemParam::SetItemFont ( IDispatch * val );
__declspec(implementation_key(909)) long ksTextItemParam::Gettype ( );
__declspec(implementation_key(910)) void ksTextItemParam::Puttype ( long _val );
__declspec(implementation_key(911)) _bstr_t ksTextItemParam::Gets ( );
__declspec(implementation_key(912)) void ksTextItemParam::Puts ( _bstr_t _val );
__declspec(implementation_key(913)) long ksTextItemParam::GetiSNumb ( );
__declspec(implementation_key(914)) void ksTextItemParam::PutiSNumb ( long _val );
__declspec(implementation_key(915)) IDispatchPtr ksTextLineParam::GetTextItemArr ( );
__declspec(implementation_key(916)) VARIANT_BOOL ksTextLineParam::SetTextItemArr ( IDispatch * val );
__declspec(implementation_key(917)) VARIANT_BOOL ksTextLineParam::Init ( );
__declspec(implementation_key(918)) long ksTextLineParam::Getstyle ( );
__declspec(implementation_key(919)) void ksTextLineParam::Putstyle ( long _val );
__declspec(implementation_key(920)) VARIANT_BOOL ksTextItemFont::Init ( );
__declspec(implementation_key(921)) VARIANT_BOOL ksTextItemFont::GetBitVectorValue ( long val );
__declspec(implementation_key(922)) VARIANT_BOOL ksTextItemFont::SetBitVectorValue ( long val, VARIANT_BOOL state );
__declspec(implementation_key(923)) _bstr_t ksTextItemFont::GetfontName ( );
__declspec(implementation_key(924)) void ksTextItemFont::PutfontName ( _bstr_t _val );
__declspec(implementation_key(925)) double ksTextItemFont::Getheight ( );
__declspec(implementation_key(926)) void ksTextItemFont::Putheight ( double _val );
__declspec(implementation_key(927)) double ksTextItemFont::Getksu ( );
__declspec(implementation_key(928)) void ksTextItemFont::Putksu ( double _val );
__declspec(implementation_key(929)) long ksTextItemFont::Getcolor ( );
__declspec(implementation_key(930)) void ksTextItemFont::Putcolor ( long _val );
__declspec(implementation_key(931)) long ksTextItemFont::GetbitVector ( );
__declspec(implementation_key(932)) void ksTextItemFont::PutbitVector ( long _val );
__declspec(implementation_key(933)) VARIANT_BOOL ksCornerParam::Init ( );
__declspec(implementation_key(934)) long ksCornerParam::Getindex ( );
__declspec(implementation_key(935)) void ksCornerParam::Putindex ( long _val );
__declspec(implementation_key(936)) VARIANT_BOOL ksCornerParam::Getfillet ( );
__declspec(implementation_key(937)) void ksCornerParam::Putfillet ( VARIANT_BOOL _val );
__declspec(implementation_key(938)) double ksCornerParam::Getl1 ( );
__declspec(implementation_key(939)) void ksCornerParam::Putl1 ( double _val );
__declspec(implementation_key(940)) double ksCornerParam::Getl2 ( );
__declspec(implementation_key(941)) void ksCornerParam::Putl2 ( double _val );
__declspec(implementation_key(942)) VARIANT_BOOL ksContourParam::Init ( );
__declspec(implementation_key(943)) long ksContourParam::Getstyle ( );
__declspec(implementation_key(944)) void ksContourParam::Putstyle ( long _val );
__declspec(implementation_key(945)) VARIANT_BOOL ksLayerParam::Init ( );
__declspec(implementation_key(946)) short ksLayerParam::Getstate ( );
__declspec(implementation_key(947)) void ksLayerParam::Putstate ( short _val );
__declspec(implementation_key(948)) long ksLayerParam::Getcolor ( );
__declspec(implementation_key(949)) void ksLayerParam::Putcolor ( long _val );
__declspec(implementation_key(950)) _bstr_t ksLayerParam::Getname ( );
__declspec(implementation_key(951)) void ksLayerParam::Putname ( _bstr_t _val );
__declspec(implementation_key(952)) VARIANT_BOOL ksLineParam::Init ( );
__declspec(implementation_key(953)) double ksLineParam::Getx ( );
__declspec(implementation_key(954)) void ksLineParam::Putx ( double _val );
__declspec(implementation_key(955)) double ksLineParam::Gety ( );
__declspec(implementation_key(956)) void ksLineParam::Puty ( double _val );
__declspec(implementation_key(957)) double ksLineParam::Getangle ( );
__declspec(implementation_key(958)) void ksLineParam::Putangle ( double _val );
__declspec(implementation_key(959)) IDispatchPtr ksRegularPolygonParam::GetPCorner ( );
__declspec(implementation_key(960)) VARIANT_BOOL ksRegularPolygonParam::SetPCorner ( IDispatch * val );
__declspec(implementation_key(961)) VARIANT_BOOL ksRegularPolygonParam::Init ( );
__declspec(implementation_key(962)) long ksRegularPolygonParam::Getcount ( );
__declspec(implementation_key(963)) void ksRegularPolygonParam::Putcount ( long _val );
__declspec(implementation_key(964)) double ksRegularPolygonParam::Getxc ( );
__declspec(implementation_key(965)) void ksRegularPolygonParam::Putxc ( double _val );
__declspec(implementation_key(966)) double ksRegularPolygonParam::Getyc ( );
__declspec(implementation_key(967)) void ksRegularPolygonParam::Putyc ( double _val );
__declspec(implementation_key(968)) double ksRegularPolygonParam::Getang ( );
__declspec(implementation_key(969)) void ksRegularPolygonParam::Putang ( double _val );
__declspec(implementation_key(970)) double ksRegularPolygonParam::Getradius ( );
__declspec(implementation_key(971)) void ksRegularPolygonParam::Putradius ( double _val );
__declspec(implementation_key(972)) VARIANT_BOOL ksRegularPolygonParam::Getdescribe ( );
__declspec(implementation_key(973)) void ksRegularPolygonParam::Putdescribe ( VARIANT_BOOL _val );
__declspec(implementation_key(974)) long ksRegularPolygonParam::Getstyle ( );
__declspec(implementation_key(975)) void ksRegularPolygonParam::Putstyle ( long _val );
__declspec(implementation_key(976)) IDispatchPtr ksRectangleParam::GetPCorner ( );
__declspec(implementation_key(977)) VARIANT_BOOL ksRectangleParam::SetPCorner ( IDispatch * val );
__declspec(implementation_key(978)) VARIANT_BOOL ksRectangleParam::Init ( );
__declspec(implementation_key(979)) double ksRectangleParam::Getx ( );
__declspec(implementation_key(980)) void ksRectangleParam::Putx ( double _val );
__declspec(implementation_key(981)) double ksRectangleParam::Gety ( );
__declspec(implementation_key(982)) void ksRectangleParam::Puty ( double _val );
__declspec(implementation_key(983)) double ksRectangleParam::Getang ( );
__declspec(implementation_key(984)) void ksRectangleParam::Putang ( double _val );
__declspec(implementation_key(985)) double ksRectangleParam::Getheight ( );
__declspec(implementation_key(986)) void ksRectangleParam::Putheight ( double _val );
__declspec(implementation_key(987)) double ksRectangleParam::Getwidth ( );
__declspec(implementation_key(988)) void ksRectangleParam::Putwidth ( double _val );
__declspec(implementation_key(989)) long ksRectangleParam::Getstyle ( );
__declspec(implementation_key(990)) void ksRectangleParam::Putstyle ( long _val );
__declspec(implementation_key(991)) IDispatchPtr ksBaseParam::GetPTextItem ( );
__declspec(implementation_key(992)) VARIANT_BOOL ksBaseParam::SetPTextItem ( IDispatch * val );
__declspec(implementation_key(993)) VARIANT_BOOL ksBaseParam::Init ( );
__declspec(implementation_key(994)) long ksBaseParam::Getstyle ( );
__declspec(implementation_key(995)) void ksBaseParam::Putstyle ( long _val );
__declspec(implementation_key(996)) double ksBaseParam::Getx1 ( );
__declspec(implementation_key(997)) void ksBaseParam::Putx1 ( double _val );
__declspec(implementation_key(998)) double ksBaseParam::Gety1 ( );
__declspec(implementation_key(999)) void ksBaseParam::Puty1 ( double _val );
__declspec(implementation_key(1000)) double ksBaseParam::Getx2 ( );
__declspec(implementation_key(1001)) void ksBaseParam::Putx2 ( double _val );
__declspec(implementation_key(1002)) double ksBaseParam::Gety2 ( );
__declspec(implementation_key(1003)) void ksBaseParam::Puty2 ( double _val );
__declspec(implementation_key(1004)) VARIANT_BOOL ksBaseParam::Gettype ( );
__declspec(implementation_key(1005)) void ksBaseParam::Puttype ( VARIANT_BOOL _val );
__declspec(implementation_key(1006)) _bstr_t ksBaseParam::Getstr ( );
__declspec(implementation_key(1007)) void ksBaseParam::Putstr ( _bstr_t _val );
__declspec(implementation_key(1008)) short ksLtVariant::GetvalType ( );
__declspec(implementation_key(1009)) VARIANT_BOOL ksLtVariant::Init ( );
__declspec(implementation_key(1010)) _bstr_t ksLtVariant::GetstrVal ( );
__declspec(implementation_key(1011)) void ksLtVariant::PutstrVal ( _bstr_t _val );
__declspec(implementation_key(1012)) short ksLtVariant::GetshortVal ( );
__declspec(implementation_key(1013)) void ksLtVariant::PutshortVal ( short _val );
__declspec(implementation_key(1014)) long ksLtVariant::GetintVal ( );
__declspec(implementation_key(1015)) void ksLtVariant::PutintVal ( long _val );
__declspec(implementation_key(1016)) long ksLtVariant::GetlongVal ( );
__declspec(implementation_key(1017)) void ksLtVariant::PutlongVal ( long _val );
__declspec(implementation_key(1018)) float ksLtVariant::GetfloatVal ( );
__declspec(implementation_key(1019)) void ksLtVariant::PutfloatVal ( float _val );
__declspec(implementation_key(1020)) double ksLtVariant::GetdoubleVal ( );
__declspec(implementation_key(1021)) void ksLtVariant::PutdoubleVal ( double _val );
__declspec(implementation_key(1022)) short ksLtVariant::GetcharVal ( );
__declspec(implementation_key(1023)) void ksLtVariant::PutcharVal ( short _val );
__declspec(implementation_key(1024)) short ksLtVariant::GetuCharVal ( );
__declspec(implementation_key(1025)) void ksLtVariant::PutuCharVal ( short _val );
__declspec(implementation_key(1026)) long ksLtVariant::GetuIntVal ( );
__declspec(implementation_key(1027)) void ksLtVariant::PutuIntVal ( long _val );
__declspec(implementation_key(1028)) _bstr_t ksLtVariant::GetwstrVal ( );
__declspec(implementation_key(1029)) void ksLtVariant::PutwstrVal ( _bstr_t _val );
__declspec(implementation_key(1030)) IDispatchPtr ksUserParam::GetUserArray ( );
__declspec(implementation_key(1031)) VARIANT_BOOL ksUserParam::SetUserArray ( IDispatch * val );
__declspec(implementation_key(1032)) VARIANT_BOOL ksUserParam::Init ( );
__declspec(implementation_key(1033)) _bstr_t ksUserParam::GetfileName ( );
__declspec(implementation_key(1034)) void ksUserParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(1035)) _bstr_t ksUserParam::GetlibName ( );
__declspec(implementation_key(1036)) void ksUserParam::PutlibName ( _bstr_t _val );
__declspec(implementation_key(1037)) long ksUserParam::Getnumber ( );
__declspec(implementation_key(1038)) void ksUserParam::Putnumber ( long _val );
__declspec(implementation_key(1039)) _variant_t ksUserParam::GetUserParams ( );
__declspec(implementation_key(1040)) void ksUserParam::PutUserParams ( const _variant_t & _val );
__declspec(implementation_key(1041)) VARIANT_BOOL ksMathPointParam::Init ( );
__declspec(implementation_key(1042)) double ksMathPointParam::Getx ( );
__declspec(implementation_key(1043)) void ksMathPointParam::Putx ( double _val );
__declspec(implementation_key(1044)) double ksMathPointParam::Gety ( );
__declspec(implementation_key(1045)) void ksMathPointParam::Puty ( double _val );
__declspec(implementation_key(1046)) IDispatchPtr ksCurvePicture::GetPolygon ( );
__declspec(implementation_key(1047)) VARIANT_BOOL ksCurvePicture::SetPolygon ( IDispatch * polygon );
__declspec(implementation_key(1048)) IDispatchPtr ksCurvePicture::GetFill ( );
__declspec(implementation_key(1049)) VARIANT_BOOL ksCurvePicture::SetFill ( IDispatch * fill );
__declspec(implementation_key(1050)) VARIANT_BOOL ksCurvePicture::Init ( );
__declspec(implementation_key(1051)) VARIANT_BOOL ksCurvePattern::Init ( );
__declspec(implementation_key(1052)) double ksCurvePattern::GetvisibleSeg ( );
__declspec(implementation_key(1053)) void ksCurvePattern::PutvisibleSeg ( double _val );
__declspec(implementation_key(1054)) double ksCurvePattern::GetinvisibleSeg ( );
__declspec(implementation_key(1055)) void ksCurvePattern::PutinvisibleSeg ( double _val );
__declspec(implementation_key(1056)) double ksTAN::Getx1 ( long index );
__declspec(implementation_key(1057)) double ksTAN::Gety1 ( long index );
__declspec(implementation_key(1058)) double ksTAN::Getx2 ( long index );
__declspec(implementation_key(1059)) double ksTAN::Gety2 ( long index );
__declspec(implementation_key(1060)) long ksCON::GetCount ( );
__declspec(implementation_key(1061)) double ksCON::GetXc ( long index );
__declspec(implementation_key(1062)) double ksCON::GetYc ( long index );
__declspec(implementation_key(1063)) double ksCON::GetX1 ( long index );
__declspec(implementation_key(1064)) double ksCON::GetY1 ( long index );
__declspec(implementation_key(1065)) double ksCON::GetX2 ( long index );
__declspec(implementation_key(1066)) double ksCON::GetY2 ( long index );
__declspec(implementation_key(1067)) double ksInertiaParam::Getxc ( );
__declspec(implementation_key(1068)) double ksInertiaParam::Getyc ( );
__declspec(implementation_key(1069)) double ksInertiaParam::GetF ( );
__declspec(implementation_key(1070)) double ksInertiaParam::Getly ( );
__declspec(implementation_key(1071)) double ksInertiaParam::Getlx ( );
__declspec(implementation_key(1072)) double ksInertiaParam::Getlxy ( );
__declspec(implementation_key(1073)) double ksInertiaParam::Getmx ( );
__declspec(implementation_key(1074)) double ksInertiaParam::Getmy ( );
__declspec(implementation_key(1075)) double ksInertiaParam::Getmxy ( );
__declspec(implementation_key(1076)) double ksInertiaParam::Getjx ( );
__declspec(implementation_key(1077)) double ksInertiaParam::Getjy ( );
__declspec(implementation_key(1078)) double ksInertiaParam::GetA ( );
__declspec(implementation_key(1079)) double ksMassInertiaParam::Getxc ( );
__declspec(implementation_key(1080)) double ksMassInertiaParam::Getyc ( );
__declspec(implementation_key(1081)) double ksMassInertiaParam::Getzc ( );
__declspec(implementation_key(1082)) double ksMassInertiaParam::Getlx ( );
__declspec(implementation_key(1083)) double ksMassInertiaParam::Getly ( );
__declspec(implementation_key(1084)) double ksMassInertiaParam::Getlz ( );
__declspec(implementation_key(1085)) double ksMassInertiaParam::Getjx ( );
__declspec(implementation_key(1086)) double ksMassInertiaParam::Getjy ( );
__declspec(implementation_key(1087)) double ksMassInertiaParam::Getjz ( );
__declspec(implementation_key(1088)) double ksMassInertiaParam::Getjxy ( );
__declspec(implementation_key(1089)) double ksMassInertiaParam::Getjxz ( );
__declspec(implementation_key(1090)) double ksMassInertiaParam::Getjyz ( );
__declspec(implementation_key(1091)) double ksMassInertiaParam::Getjx0z ( );
__declspec(implementation_key(1092)) double ksMassInertiaParam::Getjy0z ( );
__declspec(implementation_key(1093)) double ksMassInertiaParam::Getjx0y ( );
__declspec(implementation_key(1094)) double ksMassInertiaParam::Getlxy ( );
__declspec(implementation_key(1095)) double ksMassInertiaParam::Getlxz ( );
__declspec(implementation_key(1096)) double ksMassInertiaParam::Getlyz ( );
__declspec(implementation_key(1097)) double ksMassInertiaParam::Getr ( );
__declspec(implementation_key(1098)) double ksMassInertiaParam::Getm ( );
__declspec(implementation_key(1099)) double ksMassInertiaParam::Getv ( );
__declspec(implementation_key(1100)) VARIANT_BOOL ksMassInertiaParam::SetBitVectorValue ( long val, VARIANT_BOOL setState );
__declspec(implementation_key(1101)) double ksMassInertiaParam::GetF ( );
__declspec(implementation_key(1102)) double ksMassInertiaParam::Getjx0 ( );
__declspec(implementation_key(1103)) double ksMassInertiaParam::Getjy0 ( );
__declspec(implementation_key(1104)) double ksMassInertiaParam::Getjz0 ( );
__declspec(implementation_key(1105)) VARIANT_BOOL ksMassInertiaParam::GetAxisX ( double * x, double * y, double * z );
__declspec(implementation_key(1106)) VARIANT_BOOL ksMassInertiaParam::GetAxisY ( double * x, double * y, double * z );
__declspec(implementation_key(1107)) VARIANT_BOOL ksMassInertiaParam::GetAxisZ ( double * x, double * y, double * z );
__declspec(implementation_key(1108)) double ksMathematic2D::ksCosD ( double x );
__declspec(implementation_key(1109)) double ksMathematic2D::ksSinD ( double x );
__declspec(implementation_key(1110)) double ksMathematic2D::ksTanD ( double x );
__declspec(implementation_key(1111)) double ksMathematic2D::ksAtanD ( double x );
__declspec(implementation_key(1112)) double ksMathematic2D::ksAngle ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1113)) long ksMathematic2D::ksEqualPoints ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1114)) VARIANT_BOOL ksMathematic2D::ksIntersectLinSLinS ( double x11, double y11, double x12, double y12, double x21, double y21, double x22, double y22, IDispatch * param );
__declspec(implementation_key(1115)) VARIANT_BOOL ksMathematic2D::ksIntersectLinSLine ( double x1, double y1, double x2, double y2, double x, double y, double ang, IDispatch * param );
__declspec(implementation_key(1116)) VARIANT_BOOL ksMathematic2D::ksIntersectArcLin ( double xc, double yc, double rad, double f1, double f2, long n, double x, double y, double ang, IDispatch * param );
__declspec(implementation_key(1117)) VARIANT_BOOL ksMathematic2D::ksIntersectLinLin ( double x1, double y1, double angle1, double x2, double y2, double angle2, IDispatch * param );
__declspec(implementation_key(1118)) VARIANT_BOOL ksMathematic2D::ksIntersectCirCir ( double xc1, double yc1, double radius1, double xc2, double yc2, double radius2, IDispatch * param );
__declspec(implementation_key(1119)) VARIANT_BOOL ksMathematic2D::ksIntersectArcArc ( double xac, double yac, double rada, double fa1, double fa2, short directa, double xbc, double ybc, double radb, double fb1, double fb2, long directb, IDispatch * param );
__declspec(implementation_key(1120)) VARIANT_BOOL ksMathematic2D::ksIntersectLinSArc ( double x1, double y1, double x2, double y2, double xc, double yc, double rad, double f1, double f2, short direct, IDispatch * param );
__declspec(implementation_key(1121)) VARIANT_BOOL ksMathematic2D::ksIntersectLinSCir ( double x1, double y1, double x2, double y2, double xc, double yc, double rad, IDispatch * param );
__declspec(implementation_key(1122)) VARIANT_BOOL ksMathematic2D::ksIntersectCirLin ( double xc, double yc, double rad, double xl, double yl, double angle, IDispatch * param );
__declspec(implementation_key(1123)) VARIANT_BOOL ksMathematic2D::ksIntersectCirArc ( double xcc, double ycc, double radc, double xac, double yac, double rada, double fa1, double fa2, short directa, IDispatch * param );
__declspec(implementation_key(1124)) long ksMathematic2D::ksIntersectCurvCurv ( long p1, long p2, IDispatch * param );
__declspec(implementation_key(1125)) VARIANT_BOOL ksMathematic2D::ksTanLinePointCircle ( double x, double y, double xc, double yc, double rad, IDispatch * param );
__declspec(implementation_key(1126)) VARIANT_BOOL ksMathematic2D::ksTanLineAngCircle ( double xc, double yc, double rad, double ang, IDispatch * param );
__declspec(implementation_key(1127)) VARIANT_BOOL ksMathematic2D::ksTanCircleCircle ( double xc1, double yc1, double radius1, double xc2, double yc2, double radius2, IDispatch * param );
__declspec(implementation_key(1128)) long ksMathematic2D::ksTanLinePointCurve ( double x, double y, long pCur, IDispatch * array );
__declspec(implementation_key(1129)) VARIANT_BOOL ksMathematic2D::ksCouplingLineLine ( double x1, double y1, double angle1, double x2, double y2, double angle2, double rad, IDispatch * param );
__declspec(implementation_key(1130)) VARIANT_BOOL ksMathematic2D::ksCouplingLineCircle ( double xc, double yc, double radc, double x1, double y1, double angle1, double rad, IDispatch * param );
__declspec(implementation_key(1131)) VARIANT_BOOL ksMathematic2D::ksCouplingCircleCircle ( double xc1, double yc1, double radc1, double xc2, double yc2, double radc2, double rad, IDispatch * param );
__declspec(implementation_key(1132)) VARIANT_BOOL ksMathematic2D::ksSymmetry ( double x, double y, double x1, double y1, double x2, double y2, double * xc, double * yc );
__declspec(implementation_key(1133)) VARIANT_BOOL ksMathematic2D::ksRotate ( double x, double y, double xc, double yc, double ang, double * xr, double * yr );
__declspec(implementation_key(1134)) double ksMathematic2D::ksDistancePntPnt ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1135)) double ksMathematic2D::ksDistancePntLineSeg ( double x, double y, double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1136)) double ksMathematic2D::ksDistancePntArc ( double x, double y, double xac, double yac, double rada, double fa1, double fa2, short directa );
__declspec(implementation_key(1137)) double ksMathematic2D::ksDistancePntCircle ( double x, double y, double xc, double yc, double rad );
__declspec(implementation_key(1138)) double ksMathematic2D::ksDistancePntLine ( double x, double y, double x1, double y1, double angle );
__declspec(implementation_key(1139)) double ksMathematic2D::ksDistancePntLineForPoint ( double x, double y, double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1140)) VARIANT_BOOL ksMathematic2D::ksPerpendicular ( double x, double y, double x1, double y1, double x2, double y2, double * xp, double * yp );
__declspec(implementation_key(1141)) IDispatchPtr ksMathematic2D::ksPointsOnCurve ( long curve, long count );
__declspec(implementation_key(1142)) double ksMathematic2D::ksGetCurvePerpendicular ( long curve, double x, double y );
__declspec(implementation_key(1143)) long ksMathematic2D::ksGetCurvePointProjection ( long curve, double x, double y, double * kx, double * ky );
__declspec(implementation_key(1144)) long ksMathematic2D::ksMovePointOnCurve ( long curve, double * x, double * y, double len, long dir );
__declspec(implementation_key(1145)) long ksMathematic2D::ksCalcInertiaProperties ( long p, IDispatch * prop, short dimension );
__declspec(implementation_key(1146)) long ksMathematic2D::ksCalcMassInertiaProperties ( long p, IDispatch * prop, double density, double param );
__declspec(implementation_key(1147)) double ksMathematic2D::ksGetCurvePerimeter ( long curve, short dimension );
__declspec(implementation_key(1148)) IDispatchPtr ksMathematic2D::ksPointsOnCurveByStep ( long curve, double step );
__declspec(implementation_key(1149)) double ksMathematic2D::ksDistancePntPntOnCurve ( long curve, double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1150)) long ksMathematic2D::ksGetCurvePointProjectionEx ( long curve, double x, double y, double * kx, double * ky, double * t );
__declspec(implementation_key(1151)) long ksMathematic2D::ksGetCurvePoint ( long curve, double t, double * x, double * y );
__declspec(implementation_key(1152)) long ksMathematic2D::ksGetCurveMinMaxParametr ( long curve, double * tMin, double * tMax );
__declspec(implementation_key(1153)) double ksMathematic2D::ksDistanceT1T2OnCurve ( long curve, double t1, double t2 );
__declspec(implementation_key(1154)) long ksMathematic2D::ksTanCurvCurv ( long p1, long p2, IDispatch * pointArr1, IDispatch * pointArr2 );
__declspec(implementation_key(1155)) long ksMathematic2D::ksIntersectCurvCurvEx ( long p1, long p2, IDispatch * param, VARIANT_BOOL touchInclude );
__declspec(implementation_key(1156)) VARIANT_BOOL ksMathematic2D::ksTanLineAngCurve ( long p, double ang, IDispatch * param );
__declspec(implementation_key(1157)) VARIANT_BOOL ksMathematic2D::ksLinePointTangentCurve ( long p, double xc, double yc, IDispatch * param );
__declspec(implementation_key(1158)) long ksMathematic2D::ksMovePointOnCurveEx ( long curve, double * x, double * y, double * t, double len, long dir, long ext );
__declspec(implementation_key(1159)) double ksMathematic2D::ksGetCurvePerpendicularByT ( long curve, double t );
__declspec(implementation_key(1160)) long ksMathematic2D::ksDistanceCurveCurve ( long p1, long p2, double * distanse, double * t1, double * t2 );
__declspec(implementation_key(1161)) long ksDynamicArray::ksDeleteArray ( );
__declspec(implementation_key(1162)) long ksDynamicArray::ksClearArray ( );
__declspec(implementation_key(1163)) long ksDynamicArray::ksGetArrayCount ( );
__declspec(implementation_key(1164)) long ksDynamicArray::ksGetArrayType ( );
__declspec(implementation_key(1165)) long ksDynamicArray::ksExcludeArrayItem ( long index );
__declspec(implementation_key(1166)) long ksDynamicArray::ksAddArrayItem ( long index, IDispatch * item );
__declspec(implementation_key(1167)) long ksDynamicArray::ksGetArrayItem ( long index, IDispatch * item );
__declspec(implementation_key(1168)) long ksDynamicArray::ksSetArrayItem ( long index, IDispatch * item );
__declspec(implementation_key(1169)) long ksDynamicArray::Getreference ( );
__declspec(implementation_key(1170)) void ksDynamicArray::Putreference ( long _val );
__declspec(implementation_key(1171)) VARIANT_BOOL ksRDimDrawingParam::Init ( );
__declspec(implementation_key(1172)) short ksRDimDrawingParam::Getpt1 ( );
__declspec(implementation_key(1173)) void ksRDimDrawingParam::Putpt1 ( short _val );
__declspec(implementation_key(1174)) short ksRDimDrawingParam::Getpt2 ( );
__declspec(implementation_key(1175)) void ksRDimDrawingParam::Putpt2 ( short _val );
__declspec(implementation_key(1176)) long ksRDimDrawingParam::GettextPos ( );
__declspec(implementation_key(1177)) void ksRDimDrawingParam::PuttextPos ( long _val );
__declspec(implementation_key(1178)) double ksRDimDrawingParam::Getang ( );
__declspec(implementation_key(1179)) void ksRDimDrawingParam::Putang ( double _val );
__declspec(implementation_key(1180)) long ksRDimDrawingParam::GetshelfDir ( );
__declspec(implementation_key(1181)) void ksRDimDrawingParam::PutshelfDir ( long _val );
__declspec(implementation_key(1182)) VARIANT_BOOL ksRDimSourceParam::Init ( );
__declspec(implementation_key(1183)) double ksRDimSourceParam::Getxc ( );
__declspec(implementation_key(1184)) void ksRDimSourceParam::Putxc ( double _val );
__declspec(implementation_key(1185)) double ksRDimSourceParam::Getyc ( );
__declspec(implementation_key(1186)) void ksRDimSourceParam::Putyc ( double _val );
__declspec(implementation_key(1187)) double ksRDimSourceParam::Getrad ( );
__declspec(implementation_key(1188)) void ksRDimSourceParam::Putrad ( double _val );
__declspec(implementation_key(1189)) IDispatchPtr ksRDimParam::GetTPar ( );
__declspec(implementation_key(1190)) VARIANT_BOOL ksRDimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1191)) IDispatchPtr ksRDimParam::GetDPar ( );
__declspec(implementation_key(1192)) VARIANT_BOOL ksRDimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1193)) IDispatchPtr ksRDimParam::GetSPar ( );
__declspec(implementation_key(1194)) VARIANT_BOOL ksRDimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1195)) VARIANT_BOOL ksLineSegParam::Init ( );
__declspec(implementation_key(1196)) double ksLineSegParam::Getx1 ( );
__declspec(implementation_key(1197)) void ksLineSegParam::Putx1 ( double _val );
__declspec(implementation_key(1198)) double ksLineSegParam::Gety1 ( );
__declspec(implementation_key(1199)) void ksLineSegParam::Puty1 ( double _val );
__declspec(implementation_key(1200)) double ksLineSegParam::Getx2 ( );
__declspec(implementation_key(1201)) void ksLineSegParam::Putx2 ( double _val );
__declspec(implementation_key(1202)) double ksLineSegParam::Gety2 ( );
__declspec(implementation_key(1203)) void ksLineSegParam::Puty2 ( double _val );
__declspec(implementation_key(1204)) long ksLineSegParam::Getstyle ( );
__declspec(implementation_key(1205)) void ksLineSegParam::Putstyle ( long _val );
__declspec(implementation_key(1206)) VARIANT_BOOL ksCircleParam::Init ( );
__declspec(implementation_key(1207)) double ksCircleParam::Getxc ( );
__declspec(implementation_key(1208)) void ksCircleParam::Putxc ( double _val );
__declspec(implementation_key(1209)) double ksCircleParam::Getyc ( );
__declspec(implementation_key(1210)) void ksCircleParam::Putyc ( double _val );
__declspec(implementation_key(1211)) double ksCircleParam::Getrad ( );
__declspec(implementation_key(1212)) void ksCircleParam::Putrad ( double _val );
__declspec(implementation_key(1213)) long ksCircleParam::Getstyle ( );
__declspec(implementation_key(1214)) void ksCircleParam::Putstyle ( long _val );
__declspec(implementation_key(1215)) VARIANT_BOOL ksArcByAngleParam::Init ( );
__declspec(implementation_key(1216)) double ksArcByAngleParam::Getxc ( );
__declspec(implementation_key(1217)) void ksArcByAngleParam::Putxc ( double _val );
__declspec(implementation_key(1218)) double ksArcByAngleParam::Getyc ( );
__declspec(implementation_key(1219)) void ksArcByAngleParam::Putyc ( double _val );
__declspec(implementation_key(1220)) double ksArcByAngleParam::Getrad ( );
__declspec(implementation_key(1221)) void ksArcByAngleParam::Putrad ( double _val );
__declspec(implementation_key(1222)) double ksArcByAngleParam::Getang1 ( );
__declspec(implementation_key(1223)) void ksArcByAngleParam::Putang1 ( double _val );
__declspec(implementation_key(1224)) double ksArcByAngleParam::Getang2 ( );
__declspec(implementation_key(1225)) void ksArcByAngleParam::Putang2 ( double _val );
__declspec(implementation_key(1226)) short ksArcByAngleParam::Getdir ( );
__declspec(implementation_key(1227)) void ksArcByAngleParam::Putdir ( short _val );
__declspec(implementation_key(1228)) long ksArcByAngleParam::Getstyle ( );
__declspec(implementation_key(1229)) void ksArcByAngleParam::Putstyle ( long _val );
__declspec(implementation_key(1230)) VARIANT_BOOL ksArcByPointParam::Init ( );
__declspec(implementation_key(1231)) double ksArcByPointParam::Getxc ( );
__declspec(implementation_key(1232)) void ksArcByPointParam::Putxc ( double _val );
__declspec(implementation_key(1233)) double ksArcByPointParam::Getyc ( );
__declspec(implementation_key(1234)) void ksArcByPointParam::Putyc ( double _val );
__declspec(implementation_key(1235)) double ksArcByPointParam::Getrad ( );
__declspec(implementation_key(1236)) void ksArcByPointParam::Putrad ( double _val );
__declspec(implementation_key(1237)) double ksArcByPointParam::Getx1 ( );
__declspec(implementation_key(1238)) void ksArcByPointParam::Putx1 ( double _val );
__declspec(implementation_key(1239)) double ksArcByPointParam::Gety1 ( );
__declspec(implementation_key(1240)) void ksArcByPointParam::Puty1 ( double _val );
__declspec(implementation_key(1241)) double ksArcByPointParam::Getx2 ( );
__declspec(implementation_key(1242)) void ksArcByPointParam::Putx2 ( double _val );
__declspec(implementation_key(1243)) double ksArcByPointParam::Gety2 ( );
__declspec(implementation_key(1244)) void ksArcByPointParam::Puty2 ( double _val );
__declspec(implementation_key(1245)) short ksArcByPointParam::Getdir ( );
__declspec(implementation_key(1246)) void ksArcByPointParam::Putdir ( short _val );
__declspec(implementation_key(1247)) long ksArcByPointParam::Getstyle ( );
__declspec(implementation_key(1248)) void ksArcByPointParam::Putstyle ( long _val );
__declspec(implementation_key(1249)) VARIANT_BOOL ksPointParam::Init ( );
__declspec(implementation_key(1250)) double ksPointParam::Getx ( );
__declspec(implementation_key(1251)) void ksPointParam::Putx ( double _val );
__declspec(implementation_key(1252)) double ksPointParam::Gety ( );
__declspec(implementation_key(1253)) void ksPointParam::Puty ( double _val );
__declspec(implementation_key(1254)) long ksPointParam::Getstyle ( );
__declspec(implementation_key(1255)) void ksPointParam::Putstyle ( long _val );
__declspec(implementation_key(1256)) VARIANT_BOOL ksHatchParam::Init ( );
__declspec(implementation_key(1257)) double ksHatchParam::Getx ( );
__declspec(implementation_key(1258)) void ksHatchParam::Putx ( double _val );
__declspec(implementation_key(1259)) double ksHatchParam::Gety ( );
__declspec(implementation_key(1260)) void ksHatchParam::Puty ( double _val );
__declspec(implementation_key(1261)) double ksHatchParam::Getstep ( );
__declspec(implementation_key(1262)) void ksHatchParam::Putstep ( double _val );
__declspec(implementation_key(1263)) double ksHatchParam::Getang ( );
__declspec(implementation_key(1264)) void ksHatchParam::Putang ( double _val );
__declspec(implementation_key(1265)) double ksHatchParam::Getwidth ( );
__declspec(implementation_key(1266)) void ksHatchParam::Putwidth ( double _val );
__declspec(implementation_key(1267)) long ksHatchParam::Getboundaries ( );
__declspec(implementation_key(1268)) void ksHatchParam::Putboundaries ( long _val );
__declspec(implementation_key(1269)) long ksHatchParam::Getcolor ( );
__declspec(implementation_key(1270)) void ksHatchParam::Putcolor ( long _val );
__declspec(implementation_key(1271)) short ksHatchParam::Getsheeting ( );
__declspec(implementation_key(1272)) void ksHatchParam::Putsheeting ( short _val );
__declspec(implementation_key(1273)) long ksHatchParam::Getstyle ( );
__declspec(implementation_key(1274)) void ksHatchParam::Putstyle ( long _val );
__declspec(implementation_key(1275)) VARIANT_BOOL ksTextParam::Init ( );
__declspec(implementation_key(1276)) IDispatchPtr ksTextParam::GetParagraphParam ( );
__declspec(implementation_key(1277)) VARIANT_BOOL ksTextParam::SetParagraphParam ( IDispatch * val );
__declspec(implementation_key(1278)) IDispatchPtr ksTextParam::GetTextLineArr ( );
__declspec(implementation_key(1279)) VARIANT_BOOL ksTextParam::SetTextLineArr ( IDispatch * val );
__declspec(implementation_key(1280)) VARIANT_BOOL ksNurbsPointParam::Init ( );
__declspec(implementation_key(1281)) double ksNurbsPointParam::Getx ( );
__declspec(implementation_key(1282)) void ksNurbsPointParam::Putx ( double _val );
__declspec(implementation_key(1283)) double ksNurbsPointParam::Gety ( );
__declspec(implementation_key(1284)) void ksNurbsPointParam::Puty ( double _val );
__declspec(implementation_key(1285)) double ksNurbsPointParam::Getweight ( );
__declspec(implementation_key(1286)) void ksNurbsPointParam::Putweight ( double _val );
__declspec(implementation_key(1287)) VARIANT_BOOL ksDoubleValue::Init ( );
__declspec(implementation_key(1288)) double ksDoubleValue::Getvalue ( );
__declspec(implementation_key(1289)) void ksDoubleValue::Putvalue ( double _val );
__declspec(implementation_key(1290)) VARIANT_BOOL ksNurbsParam::Getperiodic ( );
__declspec(implementation_key(1291)) VARIANT_BOOL ksNurbsParam::Init ( );
__declspec(implementation_key(1292)) IDispatchPtr ksNurbsParam::GetPPoint ( );
__declspec(implementation_key(1293)) VARIANT_BOOL ksNurbsParam::SetPPoint ( IDispatch * val );
__declspec(implementation_key(1294)) IDispatchPtr ksNurbsParam::GetPKnot ( );
__declspec(implementation_key(1295)) VARIANT_BOOL ksNurbsParam::SetPKnot ( IDispatch * val );
__declspec(implementation_key(1296)) short ksNurbsParam::Getdegree ( );
__declspec(implementation_key(1297)) void ksNurbsParam::Putdegree ( short _val );
__declspec(implementation_key(1298)) VARIANT_BOOL ksNurbsParam::Getclose ( );
__declspec(implementation_key(1299)) void ksNurbsParam::Putclose ( VARIANT_BOOL _val );
__declspec(implementation_key(1300)) long ksNurbsParam::Getstyle ( );
__declspec(implementation_key(1301)) void ksNurbsParam::Putstyle ( long _val );
__declspec(implementation_key(1302)) VARIANT_BOOL ksConicArcParam::Init ( );
__declspec(implementation_key(1303)) double ksConicArcParam::GetA ( );
__declspec(implementation_key(1304)) void ksConicArcParam::PutA ( double _val );
__declspec(implementation_key(1305)) double ksConicArcParam::GetB ( );
__declspec(implementation_key(1306)) void ksConicArcParam::PutB ( double _val );
__declspec(implementation_key(1307)) double ksConicArcParam::GetC ( );
__declspec(implementation_key(1308)) void ksConicArcParam::PutC ( double _val );
__declspec(implementation_key(1309)) double ksConicArcParam::GetD ( );
__declspec(implementation_key(1310)) void ksConicArcParam::PutD ( double _val );
__declspec(implementation_key(1311)) double ksConicArcParam::GetE ( );
__declspec(implementation_key(1312)) void ksConicArcParam::PutE ( double _val );
__declspec(implementation_key(1313)) double ksConicArcParam::GetF ( );
__declspec(implementation_key(1314)) void ksConicArcParam::PutF ( double _val );
__declspec(implementation_key(1315)) double ksConicArcParam::Getx1 ( );
__declspec(implementation_key(1316)) void ksConicArcParam::Putx1 ( double _val );
__declspec(implementation_key(1317)) double ksConicArcParam::Gety1 ( );
__declspec(implementation_key(1318)) void ksConicArcParam::Puty1 ( double _val );
__declspec(implementation_key(1319)) double ksConicArcParam::Getx2 ( );
__declspec(implementation_key(1320)) void ksConicArcParam::Putx2 ( double _val );
__declspec(implementation_key(1321)) double ksConicArcParam::Gety2 ( );
__declspec(implementation_key(1322)) void ksConicArcParam::Puty2 ( double _val );
__declspec(implementation_key(1323)) long ksConicArcParam::Getstyle ( );
__declspec(implementation_key(1324)) void ksConicArcParam::Putstyle ( long _val );
__declspec(implementation_key(1325)) VARIANT_BOOL ksCentreParam::Init ( );
__declspec(implementation_key(1326)) long ksCentreParam::GetbaseCurve ( );
__declspec(implementation_key(1327)) void ksCentreParam::PutbaseCurve ( long _val );
__declspec(implementation_key(1328)) double ksCentreParam::Getx ( );
__declspec(implementation_key(1329)) void ksCentreParam::Putx ( double _val );
__declspec(implementation_key(1330)) double ksCentreParam::Gety ( );
__declspec(implementation_key(1331)) void ksCentreParam::Puty ( double _val );
__declspec(implementation_key(1332)) double ksCentreParam::Getangle ( );
__declspec(implementation_key(1333)) void ksCentreParam::Putangle ( double _val );
__declspec(implementation_key(1334)) short ksCentreParam::Gettype ( );
__declspec(implementation_key(1335)) void ksCentreParam::Puttype ( short _val );
__declspec(implementation_key(1336)) VARIANT_BOOL ksCentreParam::GetstandXpTail ( );
__declspec(implementation_key(1337)) void ksCentreParam::PutstandXpTail ( VARIANT_BOOL _val );
__declspec(implementation_key(1338)) VARIANT_BOOL ksCentreParam::GetstandXmTail ( );
__declspec(implementation_key(1339)) void ksCentreParam::PutstandXmTail ( VARIANT_BOOL _val );
__declspec(implementation_key(1340)) VARIANT_BOOL ksCentreParam::GetstandYpTail ( );
__declspec(implementation_key(1341)) void ksCentreParam::PutstandYpTail ( VARIANT_BOOL _val );
__declspec(implementation_key(1342)) VARIANT_BOOL ksCentreParam::GetstandYmTail ( );
__declspec(implementation_key(1343)) void ksCentreParam::PutstandYmTail ( VARIANT_BOOL _val );
__declspec(implementation_key(1344)) double ksCentreParam::GetlenXpTail ( );
__declspec(implementation_key(1345)) void ksCentreParam::PutlenXpTail ( double _val );
__declspec(implementation_key(1346)) double ksCentreParam::GetlenXmTail ( );
__declspec(implementation_key(1347)) void ksCentreParam::PutlenXmTail ( double _val );
__declspec(implementation_key(1348)) double ksCentreParam::GetlenYpTail ( );
__declspec(implementation_key(1349)) void ksCentreParam::PutlenYpTail ( double _val );
__declspec(implementation_key(1350)) double ksCentreParam::GetlenYmTail ( );
__declspec(implementation_key(1351)) void ksCentreParam::PutlenYmTail ( double _val );
__declspec(implementation_key(1352)) VARIANT_BOOL ksPlacementParam::Init ( );
__declspec(implementation_key(1353)) double ksPlacementParam::GetxBase ( );
__declspec(implementation_key(1354)) void ksPlacementParam::PutxBase ( double _val );
__declspec(implementation_key(1355)) double ksPlacementParam::GetyBase ( );
__declspec(implementation_key(1356)) void ksPlacementParam::PutyBase ( double _val );
__declspec(implementation_key(1357)) double ksPlacementParam::Getscale_ ( );
__declspec(implementation_key(1358)) void ksPlacementParam::Putscale_ ( double _val );
__declspec(implementation_key(1359)) double ksPlacementParam::Getangle ( );
__declspec(implementation_key(1360)) void ksPlacementParam::Putangle ( double _val );
__declspec(implementation_key(1361)) VARIANT_BOOL ksRasterParam::Init ( );
__declspec(implementation_key(1362)) IDispatchPtr ksRasterParam::GetPlace ( );
__declspec(implementation_key(1363)) VARIANT_BOOL ksRasterParam::SetPlace ( IDispatch * val );
__declspec(implementation_key(1364)) _bstr_t ksRasterParam::GetfileName ( );
__declspec(implementation_key(1365)) void ksRasterParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(1366)) VARIANT_BOOL ksRasterParam::Getembeded ( );
__declspec(implementation_key(1367)) void ksRasterParam::Putembeded ( VARIANT_BOOL _val );
__declspec(implementation_key(1368)) VARIANT_BOOL ksPolylineParam::Init ( );
__declspec(implementation_key(1369)) IDispatchPtr ksPolylineParam::GetpMathPoint ( );
__declspec(implementation_key(1370)) VARIANT_BOOL ksPolylineParam::SetpMathPoint ( IDispatch * val );
__declspec(implementation_key(1371)) long ksPolylineParam::Getstyle ( );
__declspec(implementation_key(1372)) void ksPolylineParam::Putstyle ( long _val );
__declspec(implementation_key(1373)) VARIANT_BOOL ksPolylineParam::Getclosed ( );
__declspec(implementation_key(1374)) void ksPolylineParam::Putclosed ( VARIANT_BOOL _val );
__declspec(implementation_key(1375)) VARIANT_BOOL ksInsertFragmentParam::Init ( );
__declspec(implementation_key(1376)) IDispatchPtr ksInsertFragmentParam::GetPlace ( );
__declspec(implementation_key(1377)) VARIANT_BOOL ksInsertFragmentParam::SetPlace ( IDispatch * val );
__declspec(implementation_key(1378)) _bstr_t ksInsertFragmentParam::GetfileName ( );
__declspec(implementation_key(1379)) void ksInsertFragmentParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(1380)) _bstr_t ksInsertFragmentParam::Getcomment ( );
__declspec(implementation_key(1381)) void ksInsertFragmentParam::Putcomment ( _bstr_t _val );
__declspec(implementation_key(1382)) short ksInsertFragmentParam::GetinsertType ( );
__declspec(implementation_key(1383)) void ksInsertFragmentParam::PutinsertType ( short _val );
__declspec(implementation_key(1384)) VARIANT_BOOL ksInsertFragmentParam::GetmultiLayer ( );
__declspec(implementation_key(1385)) void ksInsertFragmentParam::PutmultiLayer ( VARIANT_BOOL _val );
__declspec(implementation_key(1386)) VARIANT_BOOL ksViewParam::Init ( );
__declspec(implementation_key(1387)) double ksViewParam::Getx ( );
__declspec(implementation_key(1388)) void ksViewParam::Putx ( double _val );
__declspec(implementation_key(1389)) double ksViewParam::Gety ( );
__declspec(implementation_key(1390)) void ksViewParam::Puty ( double _val );
__declspec(implementation_key(1391)) double ksViewParam::Getangle ( );
__declspec(implementation_key(1392)) void ksViewParam::Putangle ( double _val );
__declspec(implementation_key(1393)) double ksViewParam::Getscale_ ( );
__declspec(implementation_key(1394)) void ksViewParam::Putscale_ ( double _val );
__declspec(implementation_key(1395)) long ksViewParam::Getcolor ( );
__declspec(implementation_key(1396)) void ksViewParam::Putcolor ( long _val );
__declspec(implementation_key(1397)) short ksViewParam::Getstate ( );
__declspec(implementation_key(1398)) void ksViewParam::Putstate ( short _val );
__declspec(implementation_key(1399)) _bstr_t ksViewParam::Getname ( );
__declspec(implementation_key(1400)) void ksViewParam::Putname ( _bstr_t _val );
__declspec(implementation_key(1401)) VARIANT_BOOL ksLBreakDimSource::Init ( );
__declspec(implementation_key(1402)) double ksLBreakDimSource::Getx1 ( );
__declspec(implementation_key(1403)) void ksLBreakDimSource::Putx1 ( double _val );
__declspec(implementation_key(1404)) double ksLBreakDimSource::Gety1 ( );
__declspec(implementation_key(1405)) void ksLBreakDimSource::Puty1 ( double _val );
__declspec(implementation_key(1406)) double ksLBreakDimSource::Getx2 ( );
__declspec(implementation_key(1407)) void ksLBreakDimSource::Putx2 ( double _val );
__declspec(implementation_key(1408)) double ksLBreakDimSource::Gety2 ( );
__declspec(implementation_key(1409)) void ksLBreakDimSource::Puty2 ( double _val );
__declspec(implementation_key(1410)) double ksLBreakDimSource::Getx3 ( );
__declspec(implementation_key(1411)) void ksLBreakDimSource::Putx3 ( double _val );
__declspec(implementation_key(1412)) double ksLBreakDimSource::Gety3 ( );
__declspec(implementation_key(1413)) void ksLBreakDimSource::Puty3 ( double _val );
__declspec(implementation_key(1414)) VARIANT_BOOL ksBreakDimDrawing::Init ( );
__declspec(implementation_key(1415)) VARIANT_BOOL ksBreakDimDrawing::Getpl ( );
__declspec(implementation_key(1416)) void ksBreakDimDrawing::Putpl ( VARIANT_BOOL _val );
__declspec(implementation_key(1417)) short ksBreakDimDrawing::Getpt ( );
__declspec(implementation_key(1418)) void ksBreakDimDrawing::Putpt ( short _val );
__declspec(implementation_key(1419)) long ksBreakDimDrawing::GettextPos ( );
__declspec(implementation_key(1420)) void ksBreakDimDrawing::PuttextPos ( long _val );
__declspec(implementation_key(1421)) long ksBreakDimDrawing::GetshelfDir ( );
__declspec(implementation_key(1422)) void ksBreakDimDrawing::PutshelfDir ( long _val );
__declspec(implementation_key(1423)) double ksBreakDimDrawing::Getangle ( );
__declspec(implementation_key(1424)) void ksBreakDimDrawing::Putangle ( double _val );
__declspec(implementation_key(1425)) long ksBreakDimDrawing::Getlength ( );
__declspec(implementation_key(1426)) void ksBreakDimDrawing::Putlength ( long _val );
__declspec(implementation_key(1427)) IDispatchPtr ksLBreakDimParam::GetTPar ( );
__declspec(implementation_key(1428)) VARIANT_BOOL ksLBreakDimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1429)) IDispatchPtr ksLBreakDimParam::GetDPar ( );
__declspec(implementation_key(1430)) VARIANT_BOOL ksLBreakDimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1431)) IDispatchPtr ksLBreakDimParam::GetSPar ( );
__declspec(implementation_key(1432)) VARIANT_BOOL ksLBreakDimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1433)) IDispatchPtr ksABreakDimParam::GetTPar ( );
__declspec(implementation_key(1434)) VARIANT_BOOL ksABreakDimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1435)) IDispatchPtr ksABreakDimParam::GetDPar ( );
__declspec(implementation_key(1436)) VARIANT_BOOL ksABreakDimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1437)) IDispatchPtr ksABreakDimParam::GetSPar ( );
__declspec(implementation_key(1438)) VARIANT_BOOL ksABreakDimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1439)) VARIANT_BOOL ksInsertFragmentParamEx::Init ( );
__declspec(implementation_key(1440)) IDispatchPtr ksInsertFragmentParamEx::GetPlace ( );
__declspec(implementation_key(1441)) VARIANT_BOOL ksInsertFragmentParamEx::SetPlace ( IDispatch * val );
__declspec(implementation_key(1442)) _bstr_t ksInsertFragmentParamEx::GetfileName ( );
__declspec(implementation_key(1443)) void ksInsertFragmentParamEx::PutfileName ( _bstr_t _val );
__declspec(implementation_key(1444)) _bstr_t ksInsertFragmentParamEx::Getcomment ( );
__declspec(implementation_key(1445)) void ksInsertFragmentParamEx::Putcomment ( _bstr_t _val );
__declspec(implementation_key(1446)) short ksInsertFragmentParamEx::GetinsertType ( );
__declspec(implementation_key(1447)) void ksInsertFragmentParamEx::PutinsertType ( short _val );
__declspec(implementation_key(1448)) VARIANT_BOOL ksInsertFragmentParamEx::GetmultiLayer ( );
__declspec(implementation_key(1449)) void ksInsertFragmentParamEx::PutmultiLayer ( VARIANT_BOOL _val );
__declspec(implementation_key(1450)) short ksInsertFragmentParamEx::GetscaleProjLinesSize ( );
__declspec(implementation_key(1451)) void ksInsertFragmentParamEx::PutscaleProjLinesSize ( short _val );
__declspec(implementation_key(1452)) VARIANT_BOOL ksBezierParam::Init ( );
__declspec(implementation_key(1453)) IDispatchPtr ksBezierParam::GetMathPointArr ( );
__declspec(implementation_key(1454)) VARIANT_BOOL ksBezierParam::SetMathPointArr ( IDispatch * val );
__declspec(implementation_key(1455)) long ksBezierParam::Getstyle ( );
__declspec(implementation_key(1456)) void ksBezierParam::Putstyle ( long _val );
__declspec(implementation_key(1457)) short ksBezierParam::Getclosed ( );
__declspec(implementation_key(1458)) void ksBezierParam::Putclosed ( short _val );
__declspec(implementation_key(1459)) VARIANT_BOOL ksBezierPointParam::Init ( );
__declspec(implementation_key(1460)) double ksBezierPointParam::Getx ( );
__declspec(implementation_key(1461)) void ksBezierPointParam::Putx ( double _val );
__declspec(implementation_key(1462)) double ksBezierPointParam::Gety ( );
__declspec(implementation_key(1463)) void ksBezierPointParam::Puty ( double _val );
__declspec(implementation_key(1464)) double ksBezierPointParam::Getang ( );
__declspec(implementation_key(1465)) void ksBezierPointParam::Putang ( double _val );
__declspec(implementation_key(1466)) double ksBezierPointParam::Getleft ( );
__declspec(implementation_key(1467)) void ksBezierPointParam::Putleft ( double _val );
__declspec(implementation_key(1468)) double ksBezierPointParam::Getright ( );
__declspec(implementation_key(1469)) void ksBezierPointParam::Putright ( double _val );
__declspec(implementation_key(1470)) VARIANT_BOOL ksDimTextParam::Init ( VARIANT_BOOL stringFlag );
__declspec(implementation_key(1471)) VARIANT_BOOL ksDimTextParam::GetBitFlagValue ( long bitFlag );
__declspec(implementation_key(1472)) VARIANT_BOOL ksDimTextParam::SetBitFlagValue ( long val, VARIANT_BOOL state );
__declspec(implementation_key(1473)) IDispatchPtr ksDimTextParam::GetTextArr ( );
__declspec(implementation_key(1474)) VARIANT_BOOL ksDimTextParam::SetTextArr ( IDispatch * val );
__declspec(implementation_key(1475)) long ksDimTextParam::Getstyle ( );
__declspec(implementation_key(1476)) void ksDimTextParam::Putstyle ( long _val );
__declspec(implementation_key(1477)) long ksDimTextParam::Getsign ( );
__declspec(implementation_key(1478)) void ksDimTextParam::Putsign ( long _val );
__declspec(implementation_key(1479)) VARIANT_BOOL ksDimTextParam::GetstringFlag ( );
__declspec(implementation_key(1480)) void ksDimTextParam::PutstringFlag ( VARIANT_BOOL _val );
__declspec(implementation_key(1481)) long ksDimTextParam::GetbitFlag ( );
__declspec(implementation_key(1482)) void ksDimTextParam::PutbitFlag ( long _val );
__declspec(implementation_key(1483)) VARIANT_BOOL ksLDimSourceParam::Init ( );
__declspec(implementation_key(1484)) double ksLDimSourceParam::Getx1 ( );
__declspec(implementation_key(1485)) void ksLDimSourceParam::Putx1 ( double _val );
__declspec(implementation_key(1486)) double ksLDimSourceParam::Gety1 ( );
__declspec(implementation_key(1487)) void ksLDimSourceParam::Puty1 ( double _val );
__declspec(implementation_key(1488)) double ksLDimSourceParam::Getx2 ( );
__declspec(implementation_key(1489)) void ksLDimSourceParam::Putx2 ( double _val );
__declspec(implementation_key(1490)) double ksLDimSourceParam::Gety2 ( );
__declspec(implementation_key(1491)) void ksLDimSourceParam::Puty2 ( double _val );
__declspec(implementation_key(1492)) double ksLDimSourceParam::Getdx ( );
__declspec(implementation_key(1493)) void ksLDimSourceParam::Putdx ( double _val );
__declspec(implementation_key(1494)) double ksLDimSourceParam::Getdy ( );
__declspec(implementation_key(1495)) void ksLDimSourceParam::Putdy ( double _val );
__declspec(implementation_key(1496)) short ksLDimSourceParam::Getps ( );
__declspec(implementation_key(1497)) void ksLDimSourceParam::Putps ( short _val );
__declspec(implementation_key(1498)) short ksLDimSourceParam::GetbasePoint ( );
__declspec(implementation_key(1499)) void ksLDimSourceParam::PutbasePoint ( short _val );
__declspec(implementation_key(1500)) VARIANT_BOOL ksDimDrawingParam::Init ( );
__declspec(implementation_key(1501)) VARIANT_BOOL ksDimDrawingParam::Getpl1 ( );
__declspec(implementation_key(1502)) void ksDimDrawingParam::Putpl1 ( VARIANT_BOOL _val );
__declspec(implementation_key(1503)) VARIANT_BOOL ksDimDrawingParam::Getpl2 ( );
__declspec(implementation_key(1504)) void ksDimDrawingParam::Putpl2 ( VARIANT_BOOL _val );
__declspec(implementation_key(1505)) short ksDimDrawingParam::Getpt1 ( );
__declspec(implementation_key(1506)) void ksDimDrawingParam::Putpt1 ( short _val );
__declspec(implementation_key(1507)) short ksDimDrawingParam::Getpt2 ( );
__declspec(implementation_key(1508)) void ksDimDrawingParam::Putpt2 ( short _val );
__declspec(implementation_key(1509)) long ksDimDrawingParam::GettextPos ( );
__declspec(implementation_key(1510)) void ksDimDrawingParam::PuttextPos ( long _val );
__declspec(implementation_key(1511)) short ksDimDrawingParam::GettextBase ( );
__declspec(implementation_key(1512)) void ksDimDrawingParam::PuttextBase ( short _val );
__declspec(implementation_key(1513)) long ksDimDrawingParam::GetshelfDir ( );
__declspec(implementation_key(1514)) void ksDimDrawingParam::PutshelfDir ( long _val );
__declspec(implementation_key(1515)) double ksDimDrawingParam::Getang ( );
__declspec(implementation_key(1516)) void ksDimDrawingParam::Putang ( double _val );
__declspec(implementation_key(1517)) long ksDimDrawingParam::Getlenght ( );
__declspec(implementation_key(1518)) void ksDimDrawingParam::Putlenght ( long _val );
__declspec(implementation_key(1519)) IDispatchPtr ksLDimParam::GetTPar ( );
__declspec(implementation_key(1520)) VARIANT_BOOL ksLDimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1521)) IDispatchPtr ksLDimParam::GetDPar ( );
__declspec(implementation_key(1522)) VARIANT_BOOL ksLDimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1523)) IDispatchPtr ksLDimParam::GetSPar ( );
__declspec(implementation_key(1524)) VARIANT_BOOL ksLDimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1525)) VARIANT_BOOL ksADimSourceParam::Init ( );
__declspec(implementation_key(1526)) double ksADimSourceParam::Getxc ( );
__declspec(implementation_key(1527)) void ksADimSourceParam::Putxc ( double _val );
__declspec(implementation_key(1528)) double ksADimSourceParam::Getyc ( );
__declspec(implementation_key(1529)) void ksADimSourceParam::Putyc ( double _val );
__declspec(implementation_key(1530)) double ksADimSourceParam::Getx1 ( );
__declspec(implementation_key(1531)) void ksADimSourceParam::Putx1 ( double _val );
__declspec(implementation_key(1532)) double ksADimSourceParam::Gety1 ( );
__declspec(implementation_key(1533)) void ksADimSourceParam::Puty1 ( double _val );
__declspec(implementation_key(1534)) double ksADimSourceParam::Getx2 ( );
__declspec(implementation_key(1535)) void ksADimSourceParam::Putx2 ( double _val );
__declspec(implementation_key(1536)) double ksADimSourceParam::Gety2 ( );
__declspec(implementation_key(1537)) void ksADimSourceParam::Puty2 ( double _val );
__declspec(implementation_key(1538)) double ksADimSourceParam::Getang1 ( );
__declspec(implementation_key(1539)) void ksADimSourceParam::Putang1 ( double _val );
__declspec(implementation_key(1540)) double ksADimSourceParam::Getang2 ( );
__declspec(implementation_key(1541)) void ksADimSourceParam::Putang2 ( double _val );
__declspec(implementation_key(1542)) long ksADimSourceParam::Getdir ( );
__declspec(implementation_key(1543)) void ksADimSourceParam::Putdir ( long _val );
__declspec(implementation_key(1544)) double ksADimSourceParam::Getrad ( );
__declspec(implementation_key(1545)) void ksADimSourceParam::Putrad ( double _val );
__declspec(implementation_key(1546)) VARIANT_BOOL ksDimensionPartsParam::Init ( );
__declspec(implementation_key(1547)) long ksDimensionPartsParam::Getline1 ( );
__declspec(implementation_key(1548)) void ksDimensionPartsParam::Putline1 ( long _val );
__declspec(implementation_key(1549)) long ksDimensionPartsParam::Getline2 ( );
__declspec(implementation_key(1550)) void ksDimensionPartsParam::Putline2 ( long _val );
__declspec(implementation_key(1551)) long ksDimensionPartsParam::GetdimLine ( );
__declspec(implementation_key(1552)) void ksDimensionPartsParam::PutdimLine ( long _val );
__declspec(implementation_key(1553)) long ksDimensionPartsParam::GetdimLine1 ( );
__declspec(implementation_key(1554)) void ksDimensionPartsParam::PutdimLine1 ( long _val );
__declspec(implementation_key(1555)) long ksDimensionPartsParam::Getleg ( );
__declspec(implementation_key(1556)) void ksDimensionPartsParam::Putleg ( long _val );
__declspec(implementation_key(1557)) long ksDimensionPartsParam::Getshelf ( );
__declspec(implementation_key(1558)) void ksDimensionPartsParam::Putshelf ( long _val );
__declspec(implementation_key(1559)) long ksDimensionPartsParam::Getgr ( );
__declspec(implementation_key(1560)) void ksDimensionPartsParam::Putgr ( long _val );
__declspec(implementation_key(1561)) long ksDimensionPartsParam::GetcurveExt ( );
__declspec(implementation_key(1562)) void ksDimensionPartsParam::PutcurveExt ( long _val );
__declspec(implementation_key(1563)) IDispatchPtr ksADimParam::GetTPar ( );
__declspec(implementation_key(1564)) VARIANT_BOOL ksADimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1565)) IDispatchPtr ksADimParam::GetDPar ( );
__declspec(implementation_key(1566)) VARIANT_BOOL ksADimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1567)) IDispatchPtr ksADimParam::GetSPar ( );
__declspec(implementation_key(1568)) VARIANT_BOOL ksADimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1569)) VARIANT_BOOL ksRBreakDrawingParam::Init ( );
__declspec(implementation_key(1570)) short ksRBreakDrawingParam::Getpt ( );
__declspec(implementation_key(1571)) void ksRBreakDrawingParam::Putpt ( short _val );
__declspec(implementation_key(1572)) double ksRBreakDrawingParam::Getang ( );
__declspec(implementation_key(1573)) void ksRBreakDrawingParam::Putang ( double _val );
__declspec(implementation_key(1574)) long ksRBreakDrawingParam::Getpb ( );
__declspec(implementation_key(1575)) void ksRBreakDrawingParam::Putpb ( long _val );
__declspec(implementation_key(1576)) IDispatchPtr ksRBreakDimParam::GetTPar ( );
__declspec(implementation_key(1577)) VARIANT_BOOL ksRBreakDimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1578)) IDispatchPtr ksRBreakDimParam::GetDPar ( );
__declspec(implementation_key(1579)) VARIANT_BOOL ksRBreakDimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1580)) IDispatchPtr ksRBreakDimParam::GetSPar ( );
__declspec(implementation_key(1581)) VARIANT_BOOL ksRBreakDimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1582)) VARIANT_BOOL ksQualityItemParam::Init ( );
__declspec(implementation_key(1583)) short ksQualityItemParam::GetminLimit ( );
__declspec(implementation_key(1584)) void ksQualityItemParam::PutminLimit ( short _val );
__declspec(implementation_key(1585)) short ksQualityItemParam::GetmaxLimit ( );
__declspec(implementation_key(1586)) void ksQualityItemParam::PutmaxLimit ( short _val );
__declspec(implementation_key(1587)) double ksQualityItemParam::Gethigh ( );
__declspec(implementation_key(1588)) void ksQualityItemParam::Puthigh ( double _val );
__declspec(implementation_key(1589)) double ksQualityItemParam::Getlow ( );
__declspec(implementation_key(1590)) void ksQualityItemParam::Putlow ( double _val );
__declspec(implementation_key(1591)) VARIANT_BOOL ksQualityContensParam::Init ( );
__declspec(implementation_key(1592)) IDispatchPtr ksQualityContensParam::GetpQualityItems ( );
__declspec(implementation_key(1593)) VARIANT_BOOL ksQualityContensParam::SetpQualityItems ( IDispatch * val );
__declspec(implementation_key(1594)) short ksQualityContensParam::GetsystemQuality ( );
__declspec(implementation_key(1595)) void ksQualityContensParam::PutsystemQuality ( short _val );
__declspec(implementation_key(1596)) short ksQualityContensParam::GetkindQuality ( );
__declspec(implementation_key(1597)) void ksQualityContensParam::PutkindQuality ( short _val );
__declspec(implementation_key(1598)) _bstr_t ksQualityContensParam::Getname ( );
__declspec(implementation_key(1599)) void ksQualityContensParam::Putname ( _bstr_t _val );
__declspec(implementation_key(1600)) VARIANT_BOOL ksIterator::ksCreateIterator ( long tipSeartch, long parent );
__declspec(implementation_key(1601)) long ksIterator::ksMoveIterator ( _bstr_t ksMoveIterator );
__declspec(implementation_key(1602)) VARIANT_BOOL ksIterator::ksCreateAttrIterator ( long obj, long key1, long key2, long key3, long key4, double numb );
__declspec(implementation_key(1603)) long ksIterator::ksMoveAttrIterator ( _bstr_t ch, long * pObj );
__declspec(implementation_key(1604)) VARIANT_BOOL ksIterator::ksCreateSpcIterator ( _bstr_t nameLib, long styleNumb, long spcObjType );
__declspec(implementation_key(1605)) VARIANT_BOOL ksIterator::ksCreateQualityIterator ( short system, short withLimitation );
__declspec(implementation_key(1606)) VARIANT_BOOL ksIterator::ksMoveQualityIterator ( IDispatch * param, short inMM, _bstr_t ch );
__declspec(implementation_key(1607)) long ksIterator::ksDeleteIterator ( );
__declspec(implementation_key(1608)) long ksIterator::Getreference ( );
__declspec(implementation_key(1609)) void ksIterator::Putreference ( long _val );
__declspec(implementation_key(1610)) long ksFragment::ksFragmentDefinition ( _bstr_t fileName, _bstr_t comment, short insertType );
__declspec(implementation_key(1611)) long ksFragment::ksInsertFragment ( long p, VARIANT_BOOL curentLayer, IDispatch * par );
__declspec(implementation_key(1612)) long ksFragment::ksReadFragment ( _bstr_t fileName, VARIANT_BOOL curentLayer, IDispatch * par );
__declspec(implementation_key(1613)) long ksFragment::ksReadFragmentToGroup ( _bstr_t fileName, VARIANT_BOOL curentLayer, IDispatch * par );
__declspec(implementation_key(1614)) long ksFragment::ksReadFragmentToGroupEx ( _bstr_t fileName, VARIANT_BOOL curentLayer, IDispatch * par, VARIANT_BOOL scaleProjLinesSize );
__declspec(implementation_key(1615)) long ksFragment::ksWriteFragment ( long gr, _bstr_t fileName, _bstr_t comment, double xb, double yb );
__declspec(implementation_key(1616)) long ksFragment::ksLocalFragmentDefinition ( _bstr_t comment );
__declspec(implementation_key(1617)) long ksFragment::ksCloseLocalFragmentDefinition ( );
__declspec(implementation_key(1618)) long ksFragment::ksInsertFragmentEx ( long p, VARIANT_BOOL curentLayer, IDispatch * par, VARIANT_BOOL scaleProjLinesSize );
__declspec(implementation_key(1619)) _bstr_t ksFragmentLibrary::ksChoiceFragmentFromLib ( _bstr_t frwLibFile, long * type );
__declspec(implementation_key(1620)) long ksFragmentLibrary::ksFragmentLibraryOperation ( _bstr_t libName, long type );
__declspec(implementation_key(1621)) long ksFragmentLibrary::ksAddFragmentToLibrary ( _bstr_t libName, _bstr_t frwName );
__declspec(implementation_key(1622)) long ksFragmentLibrary::ksCheckFragmentLibrary ( _bstr_t libName, VARIANT_BOOL possibleMessage );
__declspec(implementation_key(1623)) long ksFragmentLibrary::ksExistFragmentInLibrary ( _bstr_t frwName );
__declspec(implementation_key(1624)) VARIANT_BOOL ksTechnicalDemandParam::Init ( );
__declspec(implementation_key(1625)) IDispatchPtr ksTechnicalDemandParam::GetPGab ( );
__declspec(implementation_key(1626)) VARIANT_BOOL ksTechnicalDemandParam::SetPGab ( IDispatch * val );
__declspec(implementation_key(1627)) long ksTechnicalDemandParam::Getstyle ( );
__declspec(implementation_key(1628)) void ksTechnicalDemandParam::Putstyle ( long _val );
__declspec(implementation_key(1629)) short ksTechnicalDemandParam::GetstrCount ( );
__declspec(implementation_key(1630)) void ksTechnicalDemandParam::PutstrCount ( short _val );
__declspec(implementation_key(1631)) double ksOrdinatedSourceParam::Getx0 ( );
__declspec(implementation_key(1632)) void ksOrdinatedSourceParam::Putx0 ( double _val );
__declspec(implementation_key(1633)) double ksOrdinatedSourceParam::Getx1 ( );
__declspec(implementation_key(1634)) void ksOrdinatedSourceParam::Putx1 ( double _val );
__declspec(implementation_key(1635)) double ksOrdinatedSourceParam::Gety1 ( );
__declspec(implementation_key(1636)) void ksOrdinatedSourceParam::Puty1 ( double _val );
__declspec(implementation_key(1637)) double ksOrdinatedSourceParam::Gety0 ( );
__declspec(implementation_key(1638)) void ksOrdinatedSourceParam::Puty0 ( double _val );
__declspec(implementation_key(1639)) double ksOrdinatedSourceParam::Getx2 ( );
__declspec(implementation_key(1640)) void ksOrdinatedSourceParam::Putx2 ( double _val );
__declspec(implementation_key(1641)) double ksOrdinatedSourceParam::Gety2 ( );
__declspec(implementation_key(1642)) void ksOrdinatedSourceParam::Puty2 ( double _val );
__declspec(implementation_key(1643)) VARIANT_BOOL ksOrdinatedDimParam::Init ( );
__declspec(implementation_key(1644)) IDispatchPtr ksOrdinatedDimParam::GetTPar ( );
__declspec(implementation_key(1645)) VARIANT_BOOL ksOrdinatedDimParam::SetTPar ( IDispatch * val );
__declspec(implementation_key(1646)) IDispatchPtr ksOrdinatedDimParam::GetDPar ( );
__declspec(implementation_key(1647)) VARIANT_BOOL ksOrdinatedDimParam::SetDPar ( IDispatch * val );
__declspec(implementation_key(1648)) IDispatchPtr ksOrdinatedDimParam::GetSPar ( );
__declspec(implementation_key(1649)) VARIANT_BOOL ksOrdinatedDimParam::SetSPar ( IDispatch * val );
__declspec(implementation_key(1650)) long ksOrdinatedDrawingParam::Gettype ( );
__declspec(implementation_key(1651)) void ksOrdinatedDrawingParam::Puttype ( long _val );
__declspec(implementation_key(1652)) VARIANT_BOOL ksSheetSize::Init ( );
__declspec(implementation_key(1653)) double ksSheetSize::Getwidth ( );
__declspec(implementation_key(1654)) void ksSheetSize::Putwidth ( double _val );
__declspec(implementation_key(1655)) double ksSheetSize::Getheight ( );
__declspec(implementation_key(1656)) void ksSheetSize::Putheight ( double _val );
__declspec(implementation_key(1657)) VARIANT_BOOL ksStandartSheet::Init ( );
__declspec(implementation_key(1658)) short ksStandartSheet::Getformat ( );
__declspec(implementation_key(1659)) void ksStandartSheet::Putformat ( short _val );
__declspec(implementation_key(1660)) short ksStandartSheet::Getmultiply ( );
__declspec(implementation_key(1661)) void ksStandartSheet::Putmultiply ( short _val );
__declspec(implementation_key(1662)) VARIANT_BOOL ksStandartSheet::Getdirect ( );
__declspec(implementation_key(1663)) void ksStandartSheet::Putdirect ( VARIANT_BOOL _val );
__declspec(implementation_key(1664)) VARIANT_BOOL ksSheetPar::Init ( );
__declspec(implementation_key(1665)) IDispatchPtr ksSheetPar::GetSheetParam ( );
__declspec(implementation_key(1666)) _bstr_t ksSheetPar::GetlayoutName ( );
__declspec(implementation_key(1667)) void ksSheetPar::PutlayoutName ( _bstr_t _val );
__declspec(implementation_key(1668)) short ksSheetPar::GetshtType ( );
__declspec(implementation_key(1669)) void ksSheetPar::PutshtType ( short _val );
__declspec(implementation_key(1670)) VARIANT_BOOL ksDocumentParam::Init ( );
__declspec(implementation_key(1671)) IDispatchPtr ksDocumentParam::GetLayoutParam ( );
__declspec(implementation_key(1672)) _bstr_t ksDocumentParam::GetfileName ( );
__declspec(implementation_key(1673)) void ksDocumentParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(1674)) _bstr_t ksDocumentParam::Getcomment ( );
__declspec(implementation_key(1675)) void ksDocumentParam::Putcomment ( _bstr_t _val );
__declspec(implementation_key(1676)) _bstr_t ksDocumentParam::Getauthor ( );
__declspec(implementation_key(1677)) void ksDocumentParam::Putauthor ( _bstr_t _val );
__declspec(implementation_key(1678)) short ksDocumentParam::Gettype ( );
__declspec(implementation_key(1679)) void ksDocumentParam::Puttype ( short _val );
__declspec(implementation_key(1680)) short ksDocumentParam::Getregime ( );
__declspec(implementation_key(1681)) void ksDocumentParam::Putregime ( short _val );
__declspec(implementation_key(1682)) VARIANT_BOOL ksDimensionsOptions::Init ( );
__declspec(implementation_key(1683)) double ksDimensionsOptions::GetproLineExtension ( );
__declspec(implementation_key(1684)) void ksDimensionsOptions::PutproLineExtension ( double _val );
__declspec(implementation_key(1685)) double ksDimensionsOptions::GettextDistanceFromDimLine ( );
__declspec(implementation_key(1686)) void ksDimensionsOptions::PuttextDistanceFromDimLine ( double _val );
__declspec(implementation_key(1687)) double ksDimensionsOptions::GettextDistanceFromProLine ( );
__declspec(implementation_key(1688)) void ksDimensionsOptions::PuttextDistanceFromProLine ( double _val );
__declspec(implementation_key(1689)) double ksDimensionsOptions::GetdimLineExtension ( );
__declspec(implementation_key(1690)) void ksDimensionsOptions::PutdimLineExtension ( double _val );
__declspec(implementation_key(1691)) double ksDimensionsOptions::GetarrowLength ( );
__declspec(implementation_key(1692)) void ksDimensionsOptions::PutarrowLength ( double _val );
__declspec(implementation_key(1693)) long ksDimensionsOptions::Getstyle ( );
__declspec(implementation_key(1694)) void ksDimensionsOptions::Putstyle ( long _val );
__declspec(implementation_key(1695)) short ksDimensionsOptions::GetdecimalsCount ( );
__declspec(implementation_key(1696)) void ksDimensionsOptions::PutdecimalsCount ( short _val );
__declspec(implementation_key(1697)) long ksDimensionsOptions::GetanglePrecisionLevel ( );
__declspec(implementation_key(1698)) void ksDimensionsOptions::PutanglePrecisionLevel ( long _val );
__declspec(implementation_key(1699)) long ksDimensionsOptions::GethiddenToleranceNumber ( );
__declspec(implementation_key(1700)) void ksDimensionsOptions::PuthiddenToleranceNumber ( long _val );
__declspec(implementation_key(1701)) VARIANT_BOOL ksSnapOptions::Init ( );
__declspec(implementation_key(1702)) VARIANT_BOOL ksSnapOptions::GetCommonOptValue ( long val );
__declspec(implementation_key(1703)) VARIANT_BOOL ksSnapOptions::SetCommonOptValue ( long val, VARIANT_BOOL state );
__declspec(implementation_key(1704)) VARIANT_BOOL ksSnapOptions::GetnearestPoint ( );
__declspec(implementation_key(1705)) void ksSnapOptions::PutnearestPoint ( VARIANT_BOOL _val );
__declspec(implementation_key(1706)) VARIANT_BOOL ksSnapOptions::GetnearestMiddle ( );
__declspec(implementation_key(1707)) void ksSnapOptions::PutnearestMiddle ( VARIANT_BOOL _val );
__declspec(implementation_key(1708)) VARIANT_BOOL ksSnapOptions::Getintersect ( );
__declspec(implementation_key(1709)) void ksSnapOptions::Putintersect ( VARIANT_BOOL _val );
__declspec(implementation_key(1710)) VARIANT_BOOL ksSnapOptions::GettangentToCurve ( );
__declspec(implementation_key(1711)) void ksSnapOptions::PuttangentToCurve ( VARIANT_BOOL _val );
__declspec(implementation_key(1712)) VARIANT_BOOL ksSnapOptions::GetnormalToCurve ( );
__declspec(implementation_key(1713)) void ksSnapOptions::PutnormalToCurve ( VARIANT_BOOL _val );
__declspec(implementation_key(1714)) VARIANT_BOOL ksSnapOptions::Getgrid ( );
__declspec(implementation_key(1715)) void ksSnapOptions::Putgrid ( VARIANT_BOOL _val );
__declspec(implementation_key(1716)) VARIANT_BOOL ksSnapOptions::GetxyAlign ( );
__declspec(implementation_key(1717)) void ksSnapOptions::PutxyAlign ( VARIANT_BOOL _val );
__declspec(implementation_key(1718)) VARIANT_BOOL ksSnapOptions::GetangSnap ( );
__declspec(implementation_key(1719)) void ksSnapOptions::PutangSnap ( VARIANT_BOOL _val );
__declspec(implementation_key(1720)) VARIANT_BOOL ksSnapOptions::GetpointOnCurve ( );
__declspec(implementation_key(1721)) void ksSnapOptions::PutpointOnCurve ( VARIANT_BOOL _val );
__declspec(implementation_key(1722)) long ksSnapOptions::GetcommonOpt ( );
__declspec(implementation_key(1723)) void ksSnapOptions::PutcommonOpt ( long _val );
__declspec(implementation_key(1724)) double ksSnapOptions::GetangleStep ( );
__declspec(implementation_key(1725)) void ksSnapOptions::PutangleStep ( double _val );
__declspec(implementation_key(1726)) short ksSnapOptions::GetlocalSnap ( );
__declspec(implementation_key(1727)) void ksSnapOptions::PutlocalSnap ( short _val );
__declspec(implementation_key(1728)) VARIANT_BOOL ksLibraryStyleParam::Init ( );
__declspec(implementation_key(1729)) _bstr_t ksLibraryStyleParam::GetstyleName ( );
__declspec(implementation_key(1730)) void ksLibraryStyleParam::PutstyleName ( _bstr_t _val );
__declspec(implementation_key(1731)) long ksLibraryStyleParam::GetstyleId ( );
__declspec(implementation_key(1732)) void ksLibraryStyleParam::PutstyleId ( long _val );
__declspec(implementation_key(1733)) VARIANT_BOOL ksStampNotify::BeginEditStamp ( );
__declspec(implementation_key(1734)) VARIANT_BOOL ksStampNotify::EndEditStamp ( VARIANT_BOOL editResult );
__declspec(implementation_key(1735)) VARIANT_BOOL ksStampNotify::StampCellDblClick ( long number );
__declspec(implementation_key(1736)) VARIANT_BOOL ksStampNotify::StampCellBeginEdit ( long number );
__declspec(implementation_key(1737)) VARIANT_BOOL ksStampNotify::StampBeginClearCells ( const _variant_t & cells );
__declspec(implementation_key(1738)) long ksStamp::ksOpenStamp ( );
__declspec(implementation_key(1739)) long ksStamp::ksCloseStamp ( );
__declspec(implementation_key(1740)) long ksStamp::ksClearStamp ( long numb );
__declspec(implementation_key(1741)) IDispatchPtr ksStamp::ksGetStampColumnText ( long * numb );
__declspec(implementation_key(1742)) long ksStamp::ksSetStampColumnText ( long numb, IDispatch * textArr );
__declspec(implementation_key(1743)) long ksStamp::ksColumnNumber ( long numb );
__declspec(implementation_key(1744)) long ksStamp::ksTextLine ( IDispatch * textItem );
__declspec(implementation_key(1745)) long ksStamp::ksSetTextLineAlign ( short align );
__declspec(implementation_key(1746)) long ksStamp::GetSheetNumb ( );
__declspec(implementation_key(1747)) long ksStamp::Getreference ( );
__declspec(implementation_key(1748)) void ksStamp::Putreference ( long _val );
__declspec(implementation_key(1749)) VARIANT_BOOL ksSheetOptions::Init ( );
__declspec(implementation_key(1750)) IDispatchPtr ksSheetOptions::GetSheetParam ( VARIANT_BOOL type );
__declspec(implementation_key(1751)) short ksSheetOptions::GetshtType ( );
__declspec(implementation_key(1752)) void ksSheetOptions::PutshtType ( short _val );
__declspec(implementation_key(1753)) _bstr_t ksSheetOptions::GetlayoutName ( );
__declspec(implementation_key(1754)) void ksSheetOptions::PutlayoutName ( _bstr_t _val );
__declspec(implementation_key(1755)) VARIANT_BOOL ksSheetOptions::GetsheetType ( );
__declspec(implementation_key(1756)) void ksSheetOptions::PutsheetType ( VARIANT_BOOL _val );
__declspec(implementation_key(1757)) VARIANT_BOOL ksCurvePatternEx::Init ( );
__declspec(implementation_key(1758)) IDispatchPtr ksCurvePatternEx::GetCurvePicture ( );
__declspec(implementation_key(1759)) VARIANT_BOOL ksCurvePatternEx::SetCurvePicture ( IDispatch * picture );
__declspec(implementation_key(1760)) double ksCurvePatternEx::GetvisibleSeg ( );
__declspec(implementation_key(1761)) void ksCurvePatternEx::PutvisibleSeg ( double _val );
__declspec(implementation_key(1762)) double ksCurvePatternEx::GetinvisibleSeg ( );
__declspec(implementation_key(1763)) void ksCurvePatternEx::PutinvisibleSeg ( double _val );
__declspec(implementation_key(1764)) double ksCurvePatternEx::Getdx ( );
__declspec(implementation_key(1765)) void ksCurvePatternEx::Putdx ( double _val );
__declspec(implementation_key(1766)) double ksCurvePatternEx::Getdy ( );
__declspec(implementation_key(1767)) void ksCurvePatternEx::Putdy ( double _val );
__declspec(implementation_key(1768)) short ksCurvePatternEx::GetpictureType ( );
__declspec(implementation_key(1769)) void ksCurvePatternEx::PutpictureType ( short _val );
__declspec(implementation_key(1770)) _bstr_t ksCurvePatternEx::GetfrwName ( );
__declspec(implementation_key(1771)) void ksCurvePatternEx::PutfrwName ( _bstr_t _val );
__declspec(implementation_key(1772)) IDispatchPtr ksCurveStyleParam::GetPPattern ( long type );
__declspec(implementation_key(1773)) VARIANT_BOOL ksCurveStyleParam::SetPPattern ( IDispatch * pattern );
__declspec(implementation_key(1774)) VARIANT_BOOL ksCurveStyleParam::SetPropertyCurve ( long val, VARIANT_BOOL state );
__declspec(implementation_key(1775)) VARIANT_BOOL ksCurveStyleParam::GetPropertyCurve ( long val );
__declspec(implementation_key(1776)) VARIANT_BOOL ksCurveStyleParam::Init ( );
__declspec(implementation_key(1777)) _bstr_t ksCurveStyleParam::Getname ( );
__declspec(implementation_key(1778)) void ksCurveStyleParam::Putname ( _bstr_t _val );
__declspec(implementation_key(1779)) long ksCurveStyleParam::Getcolor ( );
__declspec(implementation_key(1780)) void ksCurveStyleParam::Putcolor ( long _val );
__declspec(implementation_key(1781)) double ksCurveStyleParam::GetpaperWidth ( );
__declspec(implementation_key(1782)) void ksCurveStyleParam::PutpaperWidth ( double _val );
__declspec(implementation_key(1783)) short ksCurveStyleParam::GetscreenWidth ( );
__declspec(implementation_key(1784)) void ksCurveStyleParam::PutscreenWidth ( short _val );
__declspec(implementation_key(1785)) short ksCurveStyleParam::GetcurveType ( );
__declspec(implementation_key(1786)) void ksCurveStyleParam::PutcurveType ( short _val );
__declspec(implementation_key(1787)) short ksCurveStyleParam::Geteven ( );
__declspec(implementation_key(1788)) void ksCurveStyleParam::Puteven ( short _val );
__declspec(implementation_key(1789)) short ksCurveStyleParam::GetwidthPen ( );
__declspec(implementation_key(1790)) void ksCurveStyleParam::PutwidthPen ( short _val );
__declspec(implementation_key(1791)) VARIANT_BOOL ksTextStyleParam::Init ( );
__declspec(implementation_key(1792)) _bstr_t ksTextStyleParam::Getname ( );
__declspec(implementation_key(1793)) void ksTextStyleParam::Putname ( _bstr_t _val );
__declspec(implementation_key(1794)) double ksTextStyleParam::Getheight ( );
__declspec(implementation_key(1795)) void ksTextStyleParam::Putheight ( double _val );
__declspec(implementation_key(1796)) double ksTextStyleParam::Getksu ( );
__declspec(implementation_key(1797)) void ksTextStyleParam::Putksu ( double _val );
__declspec(implementation_key(1798)) double ksTextStyleParam::Getstep ( );
__declspec(implementation_key(1799)) void ksTextStyleParam::Putstep ( double _val );
__declspec(implementation_key(1800)) _bstr_t ksTextStyleParam::GetfontName ( );
__declspec(implementation_key(1801)) void ksTextStyleParam::PutfontName ( _bstr_t _val );
__declspec(implementation_key(1802)) long ksTextStyleParam::Getcolor ( );
__declspec(implementation_key(1803)) void ksTextStyleParam::Putcolor ( long _val );
__declspec(implementation_key(1804)) short ksTextStyleParam::Getalign ( );
__declspec(implementation_key(1805)) void ksTextStyleParam::Putalign ( short _val );
__declspec(implementation_key(1806)) short ksTextStyleParam::Getbold ( );
__declspec(implementation_key(1807)) void ksTextStyleParam::Putbold ( short _val );
__declspec(implementation_key(1808)) short ksTextStyleParam::Getitalic ( );
__declspec(implementation_key(1809)) void ksTextStyleParam::Putitalic ( short _val );
__declspec(implementation_key(1810)) short ksTextStyleParam::Getunderline ( );
__declspec(implementation_key(1811)) void ksTextStyleParam::Putunderline ( short _val );
__declspec(implementation_key(1812)) double ksTextStyleParam::GetposKS ( );
__declspec(implementation_key(1813)) void ksTextStyleParam::PutposKS ( double _val );
__declspec(implementation_key(1814)) double ksTextStyleParam::GetstepParPre ( );
__declspec(implementation_key(1815)) void ksTextStyleParam::PutstepParPre ( double _val );
__declspec(implementation_key(1816)) double ksTextStyleParam::GetstepParPst ( );
__declspec(implementation_key(1817)) void ksTextStyleParam::PutstepParPst ( double _val );
__declspec(implementation_key(1818)) double ksTextStyleParam::GetleftEdge ( );
__declspec(implementation_key(1819)) void ksTextStyleParam::PutleftEdge ( double _val );
__declspec(implementation_key(1820)) double ksTextStyleParam::GetrightEdge ( );
__declspec(implementation_key(1821)) void ksTextStyleParam::PutrightEdge ( double _val );
__declspec(implementation_key(1822)) IDispatchPtr ksHatchLineParam::GetCurPar ( );
__declspec(implementation_key(1823)) VARIANT_BOOL ksHatchLineParam::SetCurPar ( IDispatch * curPar );
__declspec(implementation_key(1824)) VARIANT_BOOL ksHatchLineParam::Init ( );
__declspec(implementation_key(1825)) double ksHatchLineParam::Getx ( );
__declspec(implementation_key(1826)) void ksHatchLineParam::Putx ( double _val );
__declspec(implementation_key(1827)) double ksHatchLineParam::Gety ( );
__declspec(implementation_key(1828)) void ksHatchLineParam::Puty ( double _val );
__declspec(implementation_key(1829)) double ksHatchLineParam::Getdx ( );
__declspec(implementation_key(1830)) void ksHatchLineParam::Putdx ( double _val );
__declspec(implementation_key(1831)) double ksHatchLineParam::Getdy ( );
__declspec(implementation_key(1832)) void ksHatchLineParam::Putdy ( double _val );
__declspec(implementation_key(1833)) double ksHatchLineParam::Getang ( );
__declspec(implementation_key(1834)) void ksHatchLineParam::Putang ( double _val );
__declspec(implementation_key(1835)) short ksHatchLineParam::GettypeCurvStyle ( );
__declspec(implementation_key(1836)) void ksHatchLineParam::PuttypeCurvStyle ( short _val );
__declspec(implementation_key(1837)) short ksHatchLineParam::Getstyle ( );
__declspec(implementation_key(1838)) void ksHatchLineParam::Putstyle ( short _val );
__declspec(implementation_key(1839)) IDispatchPtr ksHatchStyleParam::GetRefPoint ( );
__declspec(implementation_key(1840)) VARIANT_BOOL ksHatchStyleParam::SetRefPoint ( IDispatch * refPoint );
__declspec(implementation_key(1841)) IDispatchPtr ksHatchStyleParam::GetArrLineParam ( );
__declspec(implementation_key(1842)) VARIANT_BOOL ksHatchStyleParam::SetArrLineParam ( IDispatch * arrLineParam );
__declspec(implementation_key(1843)) VARIANT_BOOL ksHatchStyleParam::Init ( );
__declspec(implementation_key(1844)) _bstr_t ksHatchStyleParam::Getname ( );
__declspec(implementation_key(1845)) void ksHatchStyleParam::Putname ( _bstr_t _val );
__declspec(implementation_key(1846)) double ksHatchStyleParam::Getstep ( );
__declspec(implementation_key(1847)) void ksHatchStyleParam::Putstep ( double _val );
__declspec(implementation_key(1848)) double ksHatchStyleParam::Getang ( );
__declspec(implementation_key(1849)) void ksHatchStyleParam::Putang ( double _val );
__declspec(implementation_key(1850)) double ksHatchStyleParam::Getwidth ( );
__declspec(implementation_key(1851)) void ksHatchStyleParam::Putwidth ( double _val );
__declspec(implementation_key(1852)) long ksHatchStyleParam::Getcolor ( );
__declspec(implementation_key(1853)) void ksHatchStyleParam::Putcolor ( long _val );
__declspec(implementation_key(1854)) short ksHatchStyleParam::GetmayChangeAngle ( );
__declspec(implementation_key(1855)) void ksHatchStyleParam::PutmayChangeAngle ( short _val );
__declspec(implementation_key(1856)) short ksHatchStyleParam::GetmayChangeWidth ( );
__declspec(implementation_key(1857)) void ksHatchStyleParam::PutmayChangeWidth ( short _val );
__declspec(implementation_key(1858)) short ksHatchStyleParam::GetmayChangeSpace ( );
__declspec(implementation_key(1859)) void ksHatchStyleParam::PutmayChangeSpace ( short _val );
__declspec(implementation_key(1860)) short ksHatchStyleParam::GetisScalable ( );
__declspec(implementation_key(1861)) void ksHatchStyleParam::PutisScalable ( short _val );
__declspec(implementation_key(1862)) IDispatchPtr ksRectParam::GetpBot ( );
__declspec(implementation_key(1863)) VARIANT_BOOL ksRectParam::SetpBot ( IDispatch * pBot );
__declspec(implementation_key(1864)) IDispatchPtr ksRectParam::GetpTop ( );
__declspec(implementation_key(1865)) VARIANT_BOOL ksRectParam::SetpTop ( IDispatch * pTop );
__declspec(implementation_key(1866)) VARIANT_BOOL ksShelfPar::Init ( );
__declspec(implementation_key(1867)) long ksShelfPar::Getpsh ( );
__declspec(implementation_key(1868)) void ksShelfPar::Putpsh ( long _val );
__declspec(implementation_key(1869)) double ksShelfPar::Getang ( );
__declspec(implementation_key(1870)) void ksShelfPar::Putang ( double _val );
__declspec(implementation_key(1871)) long ksShelfPar::Getlength ( );
__declspec(implementation_key(1872)) void ksShelfPar::Putlength ( long _val );
__declspec(implementation_key(1873)) IDispatchPtr ksRoughPar::GetpText ( );
__declspec(implementation_key(1874)) VARIANT_BOOL ksRoughPar::SetpText ( IDispatch * pText );
__declspec(implementation_key(1875)) VARIANT_BOOL ksRoughPar::Init ( );
__declspec(implementation_key(1876)) VARIANT_BOOL ksRoughPar::InitEx ( long style );
__declspec(implementation_key(1877)) long ksRoughPar::Getstyle ( );
__declspec(implementation_key(1878)) void ksRoughPar::Putstyle ( long _val );
__declspec(implementation_key(1879)) short ksRoughPar::Gettype ( );
__declspec(implementation_key(1880)) void ksRoughPar::Puttype ( short _val );
__declspec(implementation_key(1881)) short ksRoughPar::Getaround ( );
__declspec(implementation_key(1882)) void ksRoughPar::Putaround ( short _val );
__declspec(implementation_key(1883)) double ksRoughPar::Getx ( );
__declspec(implementation_key(1884)) void ksRoughPar::Putx ( double _val );
__declspec(implementation_key(1885)) double ksRoughPar::Gety ( );
__declspec(implementation_key(1886)) void ksRoughPar::Puty ( double _val );
__declspec(implementation_key(1887)) double ksRoughPar::Getang ( );
__declspec(implementation_key(1888)) void ksRoughPar::Putang ( double _val );
__declspec(implementation_key(1889)) short ksRoughPar::GetcText0 ( );
__declspec(implementation_key(1890)) void ksRoughPar::PutcText0 ( short _val );
__declspec(implementation_key(1891)) short ksRoughPar::GetcText1 ( );
__declspec(implementation_key(1892)) void ksRoughPar::PutcText1 ( short _val );
__declspec(implementation_key(1893)) short ksRoughPar::GetcText2 ( );
__declspec(implementation_key(1894)) void ksRoughPar::PutcText2 ( short _val );
__declspec(implementation_key(1895)) short ksRoughPar::GetcText3 ( );
__declspec(implementation_key(1896)) void ksRoughPar::PutcText3 ( short _val );
__declspec(implementation_key(1897)) IDispatchPtr ksRoughParam::GetrPar ( );
__declspec(implementation_key(1898)) VARIANT_BOOL ksRoughParam::SetrPar ( IDispatch * par );
__declspec(implementation_key(1899)) IDispatchPtr ksRoughParam::GetshPar ( );
__declspec(implementation_key(1900)) VARIANT_BOOL ksRoughParam::SetshPar ( IDispatch * shPar );
__declspec(implementation_key(1901)) VARIANT_BOOL ksChar255::Init ( );
__declspec(implementation_key(1902)) _bstr_t ksChar255::Getstr ( );
__declspec(implementation_key(1903)) void ksChar255::Putstr ( _bstr_t _val );
__declspec(implementation_key(1904)) IDispatchPtr ksLeaderParam::GetpTextline ( );
__declspec(implementation_key(1905)) VARIANT_BOOL ksLeaderParam::SetpTextline ( IDispatch * pTextLine );
__declspec(implementation_key(1906)) IDispatchPtr ksLeaderParam::GetpPolyline ( );
__declspec(implementation_key(1907)) VARIANT_BOOL ksLeaderParam::SetpPolyline ( IDispatch * pPolyline );
__declspec(implementation_key(1908)) VARIANT_BOOL ksLeaderParam::Init ( );
__declspec(implementation_key(1909)) double ksLeaderParam::Getx ( );
__declspec(implementation_key(1910)) void ksLeaderParam::Putx ( double _val );
__declspec(implementation_key(1911)) double ksLeaderParam::Gety ( );
__declspec(implementation_key(1912)) void ksLeaderParam::Puty ( double _val );
__declspec(implementation_key(1913)) short ksLeaderParam::GetarrowType ( );
__declspec(implementation_key(1914)) void ksLeaderParam::PutarrowType ( short _val );
__declspec(implementation_key(1915)) long ksLeaderParam::GetdirX ( );
__declspec(implementation_key(1916)) void ksLeaderParam::PutdirX ( long _val );
__declspec(implementation_key(1917)) short ksLeaderParam::GetsignType ( );
__declspec(implementation_key(1918)) void ksLeaderParam::PutsignType ( short _val );
__declspec(implementation_key(1919)) short ksLeaderParam::Getaround ( );
__declspec(implementation_key(1920)) void ksLeaderParam::Putaround ( short _val );
__declspec(implementation_key(1921)) short ksLeaderParam::GetcText0 ( );
__declspec(implementation_key(1922)) void ksLeaderParam::PutcText0 ( short _val );
__declspec(implementation_key(1923)) short ksLeaderParam::GetcText1 ( );
__declspec(implementation_key(1924)) void ksLeaderParam::PutcText1 ( short _val );
__declspec(implementation_key(1925)) short ksLeaderParam::GetcText2 ( );
__declspec(implementation_key(1926)) void ksLeaderParam::PutcText2 ( short _val );
__declspec(implementation_key(1927)) short ksLeaderParam::GetcText3 ( );
__declspec(implementation_key(1928)) void ksLeaderParam::PutcText3 ( short _val );
__declspec(implementation_key(1929)) IDispatchPtr ksPosLeaderParam::GetpTextline ( );
__declspec(implementation_key(1930)) VARIANT_BOOL ksPosLeaderParam::SetpTextline ( IDispatch * textline );
__declspec(implementation_key(1931)) IDispatchPtr ksPosLeaderParam::GetpPolyline ( );
__declspec(implementation_key(1932)) VARIANT_BOOL ksPosLeaderParam::SetpPolyline ( IDispatch * polyline );
__declspec(implementation_key(1933)) VARIANT_BOOL ksPosLeaderParam::Init ( );
__declspec(implementation_key(1934)) long ksPosLeaderParam::Getstyle ( );
__declspec(implementation_key(1935)) void ksPosLeaderParam::Putstyle ( long _val );
__declspec(implementation_key(1936)) double ksPosLeaderParam::Getx ( );
__declspec(implementation_key(1937)) void ksPosLeaderParam::Putx ( double _val );
__declspec(implementation_key(1938)) double ksPosLeaderParam::Gety ( );
__declspec(implementation_key(1939)) void ksPosLeaderParam::Puty ( double _val );
__declspec(implementation_key(1940)) short ksPosLeaderParam::GetarrowType ( );
__declspec(implementation_key(1941)) void ksPosLeaderParam::PutarrowType ( short _val );
__declspec(implementation_key(1942)) long ksPosLeaderParam::GetdirX ( );
__declspec(implementation_key(1943)) void ksPosLeaderParam::PutdirX ( long _val );
__declspec(implementation_key(1944)) long ksPosLeaderParam::GetdirY ( );
__declspec(implementation_key(1945)) void ksPosLeaderParam::PutdirY ( long _val );
__declspec(implementation_key(1946)) IDispatchPtr ksBrandLeaderParam::GetpTextline ( );
__declspec(implementation_key(1947)) VARIANT_BOOL ksBrandLeaderParam::SetpTextline ( IDispatch * pTextLine );
__declspec(implementation_key(1948)) IDispatchPtr ksBrandLeaderParam::GetpPolyline ( );
__declspec(implementation_key(1949)) VARIANT_BOOL ksBrandLeaderParam::SetpPolyline ( IDispatch * pPolyline );
__declspec(implementation_key(1950)) VARIANT_BOOL ksBrandLeaderParam::Init ( );
__declspec(implementation_key(1951)) long ksBrandLeaderParam::GetdirX ( );
__declspec(implementation_key(1952)) void ksBrandLeaderParam::PutdirX ( long _val );
__declspec(implementation_key(1953)) double ksBrandLeaderParam::Getx ( );
__declspec(implementation_key(1954)) void ksBrandLeaderParam::Putx ( double _val );
__declspec(implementation_key(1955)) double ksBrandLeaderParam::Gety ( );
__declspec(implementation_key(1956)) void ksBrandLeaderParam::Puty ( double _val );
__declspec(implementation_key(1957)) short ksBrandLeaderParam::GetarrowType ( );
__declspec(implementation_key(1958)) void ksBrandLeaderParam::PutarrowType ( short _val );
__declspec(implementation_key(1959)) long ksBrandLeaderParam::Getstyle1 ( );
__declspec(implementation_key(1960)) void ksBrandLeaderParam::Putstyle1 ( long _val );
__declspec(implementation_key(1961)) long ksBrandLeaderParam::Getstyle2 ( );
__declspec(implementation_key(1962)) void ksBrandLeaderParam::Putstyle2 ( long _val );
__declspec(implementation_key(1963)) short ksBrandLeaderParam::GetcText0 ( );
__declspec(implementation_key(1964)) void ksBrandLeaderParam::PutcText0 ( short _val );
__declspec(implementation_key(1965)) short ksBrandLeaderParam::GetcText1 ( );
__declspec(implementation_key(1966)) void ksBrandLeaderParam::PutcText1 ( short _val );
__declspec(implementation_key(1967)) long ksBrandLeaderParam::GetcText2 ( );
__declspec(implementation_key(1968)) void ksBrandLeaderParam::PutcText2 ( long _val );
__declspec(implementation_key(1969)) IDispatchPtr ksMarkerLeaderParam::GetpTextline ( );
__declspec(implementation_key(1970)) VARIANT_BOOL ksMarkerLeaderParam::SetpTextline ( IDispatch * pTextLine );
__declspec(implementation_key(1971)) IDispatchPtr ksMarkerLeaderParam::GetpPolyline ( );
__declspec(implementation_key(1972)) VARIANT_BOOL ksMarkerLeaderParam::SetpPolyline ( IDispatch * pPolyline );
__declspec(implementation_key(1973)) VARIANT_BOOL ksMarkerLeaderParam::Init ( );
__declspec(implementation_key(1974)) double ksMarkerLeaderParam::Getx ( );
__declspec(implementation_key(1975)) void ksMarkerLeaderParam::Putx ( double _val );
__declspec(implementation_key(1976)) double ksMarkerLeaderParam::Gety ( );
__declspec(implementation_key(1977)) void ksMarkerLeaderParam::Puty ( double _val );
__declspec(implementation_key(1978)) short ksMarkerLeaderParam::GetarrowType ( );
__declspec(implementation_key(1979)) void ksMarkerLeaderParam::PutarrowType ( short _val );
__declspec(implementation_key(1980)) long ksMarkerLeaderParam::Getstyle1 ( );
__declspec(implementation_key(1981)) void ksMarkerLeaderParam::Putstyle1 ( long _val );
__declspec(implementation_key(1982)) long ksMarkerLeaderParam::Getstyle2 ( );
__declspec(implementation_key(1983)) void ksMarkerLeaderParam::Putstyle2 ( long _val );
__declspec(implementation_key(1984)) short ksMarkerLeaderParam::GetcText0 ( );
__declspec(implementation_key(1985)) void ksMarkerLeaderParam::PutcText0 ( short _val );
__declspec(implementation_key(1986)) short ksMarkerLeaderParam::GetcText1 ( );
__declspec(implementation_key(1987)) void ksMarkerLeaderParam::PutcText1 ( short _val );
__declspec(implementation_key(1988)) short ksMarkerLeaderParam::GetcText2 ( );
__declspec(implementation_key(1989)) void ksMarkerLeaderParam::PutcText2 ( short _val );
__declspec(implementation_key(1990)) VARIANT_BOOL ksType1::Init ( );
__declspec(implementation_key(1991)) double ksType1::GetxBase ( );
__declspec(implementation_key(1992)) void ksType1::PutxBase ( double _val );
__declspec(implementation_key(1993)) double ksType1::GetyBase ( );
__declspec(implementation_key(1994)) void ksType1::PutyBase ( double _val );
__declspec(implementation_key(1995)) double ksType1::Getscale_ ( );
__declspec(implementation_key(1996)) void ksType1::Putscale_ ( double _val );
__declspec(implementation_key(1997)) double ksType1::Getangle ( );
__declspec(implementation_key(1998)) void ksType1::Putangle ( double _val );
__declspec(implementation_key(1999)) long ksType1::Getgr ( );
__declspec(implementation_key(2000)) void ksType1::Putgr ( long _val );
__declspec(implementation_key(2001)) VARIANT_BOOL ksType2::Init ( );
__declspec(implementation_key(2002)) double ksType2::GetxBase ( );
__declspec(implementation_key(2003)) void ksType2::PutxBase ( double _val );
__declspec(implementation_key(2004)) double ksType2::GetyBase ( );
__declspec(implementation_key(2005)) void ksType2::PutyBase ( double _val );
__declspec(implementation_key(2006)) VARIANT_BOOL ksType3::Init ( );
__declspec(implementation_key(2007)) double ksType3::GetxBase ( );
__declspec(implementation_key(2008)) void ksType3::PutxBase ( double _val );
__declspec(implementation_key(2009)) double ksType3::GetyBase ( );
__declspec(implementation_key(2010)) void ksType3::PutyBase ( double _val );
__declspec(implementation_key(2011)) double ksType3::Getangle ( );
__declspec(implementation_key(2012)) void ksType3::Putangle ( double _val );
__declspec(implementation_key(2013)) VARIANT_BOOL ksType5::Init ( );
__declspec(implementation_key(2014)) double ksType5::GetxBase ( );
__declspec(implementation_key(2015)) void ksType5::PutxBase ( double _val );
__declspec(implementation_key(2016)) double ksType5::GetyBase ( );
__declspec(implementation_key(2017)) void ksType5::PutyBase ( double _val );
__declspec(implementation_key(2018)) double ksType5::Getangle ( );
__declspec(implementation_key(2019)) void ksType5::Putangle ( double _val );
__declspec(implementation_key(2020)) VARIANT_BOOL ksType5::Gethorizon ( );
__declspec(implementation_key(2021)) void ksType5::Puthorizon ( VARIANT_BOOL _val );
__declspec(implementation_key(2022)) VARIANT_BOOL ksType6::Init ( );
__declspec(implementation_key(2023)) long ksType6::Getgr ( );
__declspec(implementation_key(2024)) void ksType6::Putgr ( long _val );
__declspec(implementation_key(2025)) IDispatchPtr ksPhantom::GetPhantomParam ( );
__declspec(implementation_key(2026)) VARIANT_BOOL ksPhantom::Init ( );
__declspec(implementation_key(2027)) short ksPhantom::Getphantom ( );
__declspec(implementation_key(2028)) void ksPhantom::Putphantom ( short _val );
__declspec(implementation_key(2029)) _bstr_t ksRequestInfo::GetCallBackC ( );
__declspec(implementation_key(2030)) VARIANT_BOOL ksRequestInfo::SetCallBackC ( _bstr_t methodName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2031)) _bstr_t ksRequestInfo::GetCallBackP ( );
__declspec(implementation_key(2032)) VARIANT_BOOL ksRequestInfo::SetCallBackP ( _bstr_t methodName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2033)) _bstr_t ksRequestInfo::GetCallBackCm ( );
__declspec(implementation_key(2034)) VARIANT_BOOL ksRequestInfo::SetCallBackCm ( _bstr_t methodName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2035)) VARIANT_BOOL ksRequestInfo::Init ( );
__declspec(implementation_key(2036)) VARIANT_BOOL ksRequestInfo::SetCursorText ( _bstr_t text );
__declspec(implementation_key(2037)) VARIANT_BOOL ksRequestInfo::SetCallBackCEx ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2038)) VARIANT_BOOL ksRequestInfo::SetCallBackPEx ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2039)) VARIANT_BOOL ksRequestInfo::SetCallBackCmEx ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2040)) _bstr_t ksRequestInfo::Getprompt ( );
__declspec(implementation_key(2041)) void ksRequestInfo::Putprompt ( _bstr_t _val );
__declspec(implementation_key(2042)) _bstr_t ksRequestInfo::Gettitle ( );
__declspec(implementation_key(2043)) void ksRequestInfo::Puttitle ( _bstr_t _val );
__declspec(implementation_key(2044)) _bstr_t ksRequestInfo::GetcommandsString ( );
__declspec(implementation_key(2045)) void ksRequestInfo::PutcommandsString ( _bstr_t _val );
__declspec(implementation_key(2046)) _bstr_t ksRequestInfo::Getcursor ( );
__declspec(implementation_key(2047)) void ksRequestInfo::Putcursor ( _bstr_t _val );
__declspec(implementation_key(2048)) long ksRequestInfo::Getdynamic ( );
__declspec(implementation_key(2049)) void ksRequestInfo::Putdynamic ( long _val );
__declspec(implementation_key(2050)) long ksRequestInfo::GetcommInstance ( );
__declspec(implementation_key(2051)) void ksRequestInfo::PutcommInstance ( long _val );
__declspec(implementation_key(2052)) long ksRequestInfo::GetmenuId ( );
__declspec(implementation_key(2053)) void ksRequestInfo::PutmenuId ( long _val );
__declspec(implementation_key(2054)) long ksRequestInfo::GettitleId ( );
__declspec(implementation_key(2055)) void ksRequestInfo::PuttitleId ( long _val );
__declspec(implementation_key(2056)) long ksRequestInfo::GetpromptId ( );
__declspec(implementation_key(2057)) void ksRequestInfo::PutpromptId ( long _val );
__declspec(implementation_key(2058)) long ksRequestInfo::GetcursorId ( );
__declspec(implementation_key(2059)) void ksRequestInfo::PutcursorId ( long _val );
__declspec(implementation_key(2060)) _variant_t ksRequestInfo::GetcommInstanceEx ( );
__declspec(implementation_key(2061)) void ksRequestInfo::PutcommInstanceEx ( const _variant_t & _val );
__declspec(implementation_key(2062)) IDispatchPtr ksViewPointerParam::GetpTextline ( );
__declspec(implementation_key(2063)) VARIANT_BOOL ksViewPointerParam::SetpTextline ( IDispatch * pTextLine );
__declspec(implementation_key(2064)) VARIANT_BOOL ksViewPointerParam::Init ( );
__declspec(implementation_key(2065)) long ksViewPointerParam::Getstyle ( );
__declspec(implementation_key(2066)) void ksViewPointerParam::Putstyle ( long _val );
__declspec(implementation_key(2067)) double ksViewPointerParam::Getx1 ( );
__declspec(implementation_key(2068)) void ksViewPointerParam::Putx1 ( double _val );
__declspec(implementation_key(2069)) double ksViewPointerParam::Gety1 ( );
__declspec(implementation_key(2070)) void ksViewPointerParam::Puty1 ( double _val );
__declspec(implementation_key(2071)) double ksViewPointerParam::Getx2 ( );
__declspec(implementation_key(2072)) void ksViewPointerParam::Putx2 ( double _val );
__declspec(implementation_key(2073)) double ksViewPointerParam::Gety2 ( );
__declspec(implementation_key(2074)) void ksViewPointerParam::Puty2 ( double _val );
__declspec(implementation_key(2075)) double ksViewPointerParam::Getxt ( );
__declspec(implementation_key(2076)) void ksViewPointerParam::Putxt ( double _val );
__declspec(implementation_key(2077)) double ksViewPointerParam::Getyt ( );
__declspec(implementation_key(2078)) void ksViewPointerParam::Putyt ( double _val );
__declspec(implementation_key(2079)) short ksViewPointerParam::Gettype ( );
__declspec(implementation_key(2080)) void ksViewPointerParam::Puttype ( short _val );
__declspec(implementation_key(2081)) _bstr_t ksViewPointerParam::Getstr ( );
__declspec(implementation_key(2082)) void ksViewPointerParam::Putstr ( _bstr_t _val );
__declspec(implementation_key(2083)) IDispatchPtr ksCutLineParam::GetpTextline ( );
__declspec(implementation_key(2084)) VARIANT_BOOL ksCutLineParam::SetpTextline ( IDispatch * pTextLine );
__declspec(implementation_key(2085)) IDispatchPtr ksCutLineParam::GetpMathPoint ( );
__declspec(implementation_key(2086)) VARIANT_BOOL ksCutLineParam::SetpMathPoint ( IDispatch * pMathPoint );
__declspec(implementation_key(2087)) VARIANT_BOOL ksCutLineParam::Init ( );
__declspec(implementation_key(2088)) long ksCutLineParam::Getstyle ( );
__declspec(implementation_key(2089)) void ksCutLineParam::Putstyle ( long _val );
__declspec(implementation_key(2090)) short ksCutLineParam::Getright ( );
__declspec(implementation_key(2091)) void ksCutLineParam::Putright ( short _val );
__declspec(implementation_key(2092)) double ksCutLineParam::Getx1 ( );
__declspec(implementation_key(2093)) void ksCutLineParam::Putx1 ( double _val );
__declspec(implementation_key(2094)) double ksCutLineParam::Gety1 ( );
__declspec(implementation_key(2095)) void ksCutLineParam::Puty1 ( double _val );
__declspec(implementation_key(2096)) double ksCutLineParam::Getx2 ( );
__declspec(implementation_key(2097)) void ksCutLineParam::Putx2 ( double _val );
__declspec(implementation_key(2098)) double ksCutLineParam::Gety2 ( );
__declspec(implementation_key(2099)) void ksCutLineParam::Puty2 ( double _val );
__declspec(implementation_key(2100)) short ksCutLineParam::Gettype ( );
__declspec(implementation_key(2101)) void ksCutLineParam::Puttype ( short _val );
__declspec(implementation_key(2102)) _bstr_t ksCutLineParam::Getstr ( );
__declspec(implementation_key(2103)) void ksCutLineParam::Putstr ( _bstr_t _val );
__declspec(implementation_key(2104)) IDispatchPtr ksToleranceBranch::GetpMathPoint ( );
__declspec(implementation_key(2105)) VARIANT_BOOL ksToleranceBranch::SetpMathPoint ( IDispatch * pMathPoint );
__declspec(implementation_key(2106)) VARIANT_BOOL ksToleranceBranch::Init ( );
__declspec(implementation_key(2107)) short ksToleranceBranch::GetarrowType ( );
__declspec(implementation_key(2108)) void ksToleranceBranch::PutarrowType ( short _val );
__declspec(implementation_key(2109)) short ksToleranceBranch::GettCorner ( );
__declspec(implementation_key(2110)) void ksToleranceBranch::PuttCorner ( short _val );
__declspec(implementation_key(2111)) IDispatchPtr ksToleranceParam::GetBranchArr ( );
__declspec(implementation_key(2112)) VARIANT_BOOL ksToleranceParam::SetBranchArr ( IDispatch * branchArr );
__declspec(implementation_key(2113)) VARIANT_BOOL ksToleranceParam::Init ( );
__declspec(implementation_key(2114)) short ksToleranceParam::GettBase ( );
__declspec(implementation_key(2115)) void ksToleranceParam::PuttBase ( short _val );
__declspec(implementation_key(2116)) long ksToleranceParam::Getstyle ( );
__declspec(implementation_key(2117)) void ksToleranceParam::Putstyle ( long _val );
__declspec(implementation_key(2118)) double ksToleranceParam::Getx ( );
__declspec(implementation_key(2119)) void ksToleranceParam::Putx ( double _val );
__declspec(implementation_key(2120)) double ksToleranceParam::Gety ( );
__declspec(implementation_key(2121)) void ksToleranceParam::Puty ( double _val );
__declspec(implementation_key(2122)) short ksToleranceParam::Gettype ( );
__declspec(implementation_key(2123)) void ksToleranceParam::Puttype ( short _val );
__declspec(implementation_key(2124)) VARIANT_BOOL ksSpcColumnParam::Init ( );
__declspec(implementation_key(2125)) long ksSpcColumnParam::GetcolumnType ( );
__declspec(implementation_key(2126)) void ksSpcColumnParam::PutcolumnType ( long _val );
__declspec(implementation_key(2127)) long ksSpcColumnParam::Getispoln ( );
__declspec(implementation_key(2128)) void ksSpcColumnParam::Putispoln ( long _val );
__declspec(implementation_key(2129)) long ksSpcColumnParam::Getblock ( );
__declspec(implementation_key(2130)) void ksSpcColumnParam::Putblock ( long _val );
__declspec(implementation_key(2131)) long ksSpcColumnParam::GettypeVal ( );
__declspec(implementation_key(2132)) void ksSpcColumnParam::PuttypeVal ( long _val );
__declspec(implementation_key(2133)) _bstr_t ksSpcColumnParam::Getname ( );
__declspec(implementation_key(2134)) void ksSpcColumnParam::Putname ( _bstr_t _val );
__declspec(implementation_key(2135)) _bstr_t ksRecordTypeAttrParam::GetattrLibName ( );
__declspec(implementation_key(2136)) long ksRecordTypeAttrParam::Getkey1 ( );
__declspec(implementation_key(2137)) long ksRecordTypeAttrParam::Getkey2 ( );
__declspec(implementation_key(2138)) long ksRecordTypeAttrParam::Getkey3 ( );
__declspec(implementation_key(2139)) long ksRecordTypeAttrParam::Getkey4 ( );
__declspec(implementation_key(2140)) VARIANT_BOOL ksRecordTypeAttrParam::Init ( );
__declspec(implementation_key(2141)) double ksNumberTypeAttrParam::GetminValue ( );
__declspec(implementation_key(2142)) double ksNumberTypeAttrParam::GetmaxValue ( );
__declspec(implementation_key(2143)) VARIANT_BOOL ksNumberTypeAttrParam::Init ( );
__declspec(implementation_key(2144)) _bstr_t ksSpcStyleColumnParam::GetnameColumn ( );
__declspec(implementation_key(2145)) long ksSpcStyleColumnParam::GetcolumnType ( );
__declspec(implementation_key(2146)) long ksSpcStyleColumnParam::Getispoln ( );
__declspec(implementation_key(2147)) short ksSpcStyleColumnParam::Getedit ( );
__declspec(implementation_key(2148)) short ksSpcStyleColumnParam::GetcreateSum ( );
__declspec(implementation_key(2149)) short ksSpcStyleColumnParam::GetmultiplyToCount ( );
__declspec(implementation_key(2150)) short ksSpcStyleColumnParam::GetuseForSectionTitle ( );
__declspec(implementation_key(2151)) short ksSpcStyleColumnParam::GettextDn ( );
__declspec(implementation_key(2152)) long ksSpcStyleColumnParam::GetlinkId ( );
__declspec(implementation_key(2153)) long ksSpcStyleColumnParam::GettypeVal ( );
__declspec(implementation_key(2154)) IDispatchPtr ksSpcStyleColumnParam::GetAdditionalParam ( );
__declspec(implementation_key(2155)) VARIANT_BOOL ksSpcStyleColumnParam::Init ( );
__declspec(implementation_key(2156)) _bstr_t ksSpcStyleSectionParam::GetsectionName ( );
__declspec(implementation_key(2157)) long ksSpcStyleSectionParam::Getnumber ( );
__declspec(implementation_key(2158)) long ksSpcStyleSectionParam::GetsortColumnType ( );
__declspec(implementation_key(2159)) long ksSpcStyleSectionParam::GetsortIspoln ( );
__declspec(implementation_key(2160)) short ksSpcStyleSectionParam::GetdataType ( );
__declspec(implementation_key(2161)) long ksSpcStyleSectionParam::GetsortType ( );
__declspec(implementation_key(2162)) IDispatchPtr ksSpcStyleSectionParam::GetArrColumn ( );
__declspec(implementation_key(2163)) IDispatchPtr ksSpcStyleSectionParam::GetArrAdditionalColumn ( );
__declspec(implementation_key(2164)) VARIANT_BOOL ksSpcStyleSectionParam::Init ( );
__declspec(implementation_key(2165)) _bstr_t ksSpcSubSectionParam::Getname ( );
__declspec(implementation_key(2166)) long ksSpcSubSectionParam::Getnumber ( );
__declspec(implementation_key(2167)) VARIANT_BOOL ksSpcSubSectionParam::Init ( );
__declspec(implementation_key(2168)) short ksSpcTuningSectionParam::GetsubsectionOn ( );
__declspec(implementation_key(2169)) short ksSpcTuningSectionParam::GetgeometryOn ( );
__declspec(implementation_key(2170)) short ksSpcTuningSectionParam::GetpositionOn ( );
__declspec(implementation_key(2171)) short ksSpcTuningSectionParam::GetsortOn ( );
__declspec(implementation_key(2172)) short ksSpcTuningSectionParam::GetfirstOnSheet ( );
__declspec(implementation_key(2173)) long ksSpcTuningSectionParam::GetrezervCount ( );
__declspec(implementation_key(2174)) long ksSpcTuningSectionParam::Getnumber ( );
__declspec(implementation_key(2175)) IDispatchPtr ksSpcTuningSectionParam::GetArrSubSection ( );
__declspec(implementation_key(2176)) VARIANT_BOOL ksSpcTuningSectionParam::Init ( );
__declspec(implementation_key(2177)) IDispatchPtr ksSpcTuningStyleParam::GetSectionTextStyleFirst ( );
__declspec(implementation_key(2178)) IDispatchPtr ksSpcTuningStyleParam::GetSectionTextStyleNext ( );
__declspec(implementation_key(2179)) IDispatchPtr ksSpcTuningStyleParam::GetObjectTextStyle ( );
__declspec(implementation_key(2180)) IDispatchPtr ksSpcTuningStyleParam::GetArrSection ( );
__declspec(implementation_key(2181)) VARIANT_BOOL ksSpcTuningStyleParam::Init ( );
__declspec(implementation_key(2182)) VARIANT_BOOL ksSpcTuningStyleParam::SetSectionTextStyleFirst ( IDispatch * style );
__declspec(implementation_key(2183)) VARIANT_BOOL ksSpcTuningStyleParam::SetSectionTextStyleNext ( IDispatch * style );
__declspec(implementation_key(2184)) VARIANT_BOOL ksSpcTuningStyleParam::SetObjectTextStyle ( IDispatch * style );
__declspec(implementation_key(2185)) VARIANT_BOOL ksSpcTuningStyleParam::SetArrSection ( IDispatch * arr );
__declspec(implementation_key(2186)) short ksSpcTuningStyleParam::GetgrToSP ( );
__declspec(implementation_key(2187)) void ksSpcTuningStyleParam::PutgrToSP ( short _val );
__declspec(implementation_key(2188)) short ksSpcTuningStyleParam::GetzoneCalc ( );
__declspec(implementation_key(2189)) void ksSpcTuningStyleParam::PutzoneCalc ( short _val );
__declspec(implementation_key(2190)) short ksSpcTuningStyleParam::GetshowSectionName ( );
__declspec(implementation_key(2191)) void ksSpcTuningStyleParam::PutshowSectionName ( short _val );
__declspec(implementation_key(2192)) short ksSpcTuningStyleParam::GetpositionCalc ( );
__declspec(implementation_key(2193)) void ksSpcTuningStyleParam::PutpositionCalc ( short _val );
__declspec(implementation_key(2194)) short ksSpcTuningStyleParam::GetgeometryDel ( );
__declspec(implementation_key(2195)) void ksSpcTuningStyleParam::PutgeometryDel ( short _val );
__declspec(implementation_key(2196)) short ksSpcTuningStyleParam::GetpositionDel ( );
__declspec(implementation_key(2197)) void ksSpcTuningStyleParam::PutpositionDel ( short _val );
__declspec(implementation_key(2198)) short ksSpcTuningStyleParam::GetmassCalc ( );
__declspec(implementation_key(2199)) void ksSpcTuningStyleParam::PutmassCalc ( short _val );
__declspec(implementation_key(2200)) short ksSpcTuningStyleParam::GetdisableEmptyStr ( );
__declspec(implementation_key(2201)) void ksSpcTuningStyleParam::PutdisableEmptyStr ( short _val );
__declspec(implementation_key(2202)) short ksSpcTuningStyleParam::GetinsertNull ( );
__declspec(implementation_key(2203)) void ksSpcTuningStyleParam::PutinsertNull ( short _val );
__declspec(implementation_key(2204)) short ksSpcTuningStyleParam::GetinsertDash ( );
__declspec(implementation_key(2205)) void ksSpcTuningStyleParam::PutinsertDash ( short _val );
__declspec(implementation_key(2206)) short ksSpcTuningStyleParam::GetdisableEmptyBlockStr ( );
__declspec(implementation_key(2207)) void ksSpcTuningStyleParam::PutdisableEmptyBlockStr ( short _val );
__declspec(implementation_key(2208)) short ksSpcTuningStyleParam::GetshowInfoByDetBlock ( );
__declspec(implementation_key(2209)) void ksSpcTuningStyleParam::PutshowInfoByDetBlock ( short _val );
__declspec(implementation_key(2210)) short ksSpcTuningStyleParam::GetispolnOn ( );
__declspec(implementation_key(2211)) void ksSpcTuningStyleParam::PutispolnOn ( short _val );
__declspec(implementation_key(2212)) short ksSpcTuningStyleParam::GetispolnMarkFull ( );
__declspec(implementation_key(2213)) void ksSpcTuningStyleParam::PutispolnMarkFull ( short _val );
__declspec(implementation_key(2214)) short ksSpcTuningStyleParam::GetblocOnNewPage ( );
__declspec(implementation_key(2215)) void ksSpcTuningStyleParam::PutblocOnNewPage ( short _val );
__declspec(implementation_key(2216)) short ksSpcTuningStyleParam::GetuserTextStyle ( );
__declspec(implementation_key(2217)) void ksSpcTuningStyleParam::PutuserTextStyle ( short _val );
__declspec(implementation_key(2218)) short ksSpcTuningStyleParam::GetcountIspoln ( );
__declspec(implementation_key(2219)) void ksSpcTuningStyleParam::PutcountIspoln ( short _val );
__declspec(implementation_key(2220)) short ksSpcTuningStyleParam::GetcountBlock ( );
__declspec(implementation_key(2221)) void ksSpcTuningStyleParam::PutcountBlock ( short _val );
__declspec(implementation_key(2222)) _bstr_t ksSpcTuningStyleParam::GetpredefinedTextFileName ( );
__declspec(implementation_key(2223)) void ksSpcTuningStyleParam::PutpredefinedTextFileName ( _bstr_t _val );
__declspec(implementation_key(2224)) short ksSpcTuningStyleParam::GetdelSpcObjOnDelGeometry ( );
__declspec(implementation_key(2225)) void ksSpcTuningStyleParam::PutdelSpcObjOnDelGeometry ( short _val );
__declspec(implementation_key(2226)) short ksSpcTuningStyleParam::GetcopySpcObjOnCopyGeometry ( );
__declspec(implementation_key(2227)) void ksSpcTuningStyleParam::PutcopySpcObjOnCopyGeometry ( short _val );
__declspec(implementation_key(2228)) _bstr_t ksSpcStyleParam::GetlayoutName1 ( );
__declspec(implementation_key(2229)) _bstr_t ksSpcStyleParam::GetlayoutName2 ( );
__declspec(implementation_key(2230)) long ksSpcStyleParam::GetshtType1 ( );
__declspec(implementation_key(2231)) long ksSpcStyleParam::GetshtType2 ( );
__declspec(implementation_key(2232)) short ksSpcStyleParam::Getvariant ( );
__declspec(implementation_key(2233)) short ksSpcStyleParam::GetsectionOn ( );
__declspec(implementation_key(2234)) short ksSpcStyleParam::Gettype ( );
__declspec(implementation_key(2235)) IDispatchPtr ksSpcStyleParam::GetTuning ( );
__declspec(implementation_key(2236)) IDispatchPtr ksSpcStyleParam::GetArrColumn ( );
__declspec(implementation_key(2237)) IDispatchPtr ksSpcStyleParam::GetArrAdditionalColumn ( );
__declspec(implementation_key(2238)) IDispatchPtr ksSpcStyleParam::GetArrSection ( );
__declspec(implementation_key(2239)) IDispatchPtr ksSpcStyleParam::GetSheetParam ( );
__declspec(implementation_key(2240)) VARIANT_BOOL ksSpcStyleParam::Init ( );
__declspec(implementation_key(2241)) VARIANT_BOOL ksSpcDescrParam::Init ( );
__declspec(implementation_key(2242)) _bstr_t ksSpcDescrParam::GetlayoutName ( );
__declspec(implementation_key(2243)) void ksSpcDescrParam::PutlayoutName ( _bstr_t _val );
__declspec(implementation_key(2244)) long ksSpcDescrParam::GetstyleId ( );
__declspec(implementation_key(2245)) void ksSpcDescrParam::PutstyleId ( long _val );
__declspec(implementation_key(2246)) _bstr_t ksSpcDescrParam::GetspcName ( );
__declspec(implementation_key(2247)) void ksSpcDescrParam::PutspcName ( _bstr_t _val );
__declspec(implementation_key(2248)) VARIANT_BOOL ksDocAttachedSpcParam::Init ( );
__declspec(implementation_key(2249)) _bstr_t ksDocAttachedSpcParam::GetfileName ( );
__declspec(implementation_key(2250)) void ksDocAttachedSpcParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(2251)) _bstr_t ksDocAttachedSpcParam::Getcomment ( );
__declspec(implementation_key(2252)) void ksDocAttachedSpcParam::Putcomment ( _bstr_t _val );
__declspec(implementation_key(2253)) short ksDocAttachedSpcParam::Gettransmit ( );
__declspec(implementation_key(2254)) void ksDocAttachedSpcParam::Puttransmit ( short _val );
__declspec(implementation_key(2255)) IDispatchPtr ksSpcObjParam::GetDocArr ( );
__declspec(implementation_key(2256)) VARIANT_BOOL ksSpcObjParam::SetDocArr ( IDispatch * docArr );
__declspec(implementation_key(2257)) long ksSpcObjParam::GettypeObj ( );
__declspec(implementation_key(2258)) long ksSpcObjParam::GetnumbSection ( );
__declspec(implementation_key(2259)) _bstr_t ksSpcObjParam::GetsubSectionName ( );
__declspec(implementation_key(2260)) short ksSpcObjParam::GetinsFrgType ( );
__declspec(implementation_key(2261)) short ksSpcObjParam::GetFirst ( );
__declspec(implementation_key(2262)) VARIANT_BOOL ksSpcObjParam::Init ( );
__declspec(implementation_key(2263)) long ksSpcObjParam::GetblockNumber ( );
__declspec(implementation_key(2264)) void ksSpcObjParam::PutblockNumber ( long _val );
__declspec(implementation_key(2265)) long ksSpcObjParam::GetnumbSubSection ( );
__declspec(implementation_key(2266)) void ksSpcObjParam::PutnumbSubSection ( long _val );
__declspec(implementation_key(2267)) short ksSpcObjParam::GetfirstOnSheet ( );
__declspec(implementation_key(2268)) void ksSpcObjParam::PutfirstOnSheet ( short _val );
__declspec(implementation_key(2269)) short ksSpcObjParam::GetposInc ( );
__declspec(implementation_key(2270)) void ksSpcObjParam::PutposInc ( short _val );
__declspec(implementation_key(2271)) short ksSpcObjParam::Getdraw ( );
__declspec(implementation_key(2272)) void ksSpcObjParam::Putdraw ( short _val );
__declspec(implementation_key(2273)) short ksSpcObjParam::GetposNotDraw ( );
__declspec(implementation_key(2274)) void ksSpcObjParam::PutposNotDraw ( short _val );
__declspec(implementation_key(2275)) short ksSpcObjParam::Getispoln ( );
__declspec(implementation_key(2276)) void ksSpcObjParam::Putispoln ( short _val );
__declspec(implementation_key(2277)) VARIANT_BOOL ksLibStyle::Init ( );
__declspec(implementation_key(2278)) _bstr_t ksLibStyle::GetfileName ( );
__declspec(implementation_key(2279)) void ksLibStyle::PutfileName ( _bstr_t _val );
__declspec(implementation_key(2280)) long ksLibStyle::GetstyleNumber ( );
__declspec(implementation_key(2281)) void ksLibStyle::PutstyleNumber ( long _val );
__declspec(implementation_key(2282)) short ksLibStyle::GettypeAllocation ( );
__declspec(implementation_key(2283)) void ksLibStyle::PuttypeAllocation ( short _val );
__declspec(implementation_key(2284)) long ksDataBaseObject::ksRelation ( long db );
__declspec(implementation_key(2285)) VARIANT_BOOL ksDataBaseObject::ksEndRelation ( );
__declspec(implementation_key(2286)) long ksDataBaseObject::ksCreateDB ( _bstr_t typeBD );
__declspec(implementation_key(2287)) long ksDataBaseObject::ksDeleteDB ( long db );
__declspec(implementation_key(2288)) long ksDataBaseObject::ksConnectDB ( long db, _bstr_t DBName );
__declspec(implementation_key(2289)) long ksDataBaseObject::ksDisconnectDB ( long db );
__declspec(implementation_key(2290)) long ksDataBaseObject::ksFreeStatement ( long db, long r, long fOption );
__declspec(implementation_key(2291)) long ksDataBaseObject::ksDoStatement ( long db, long r, _bstr_t stSQL );
__declspec(implementation_key(2292)) long ksDataBaseObject::ksReadRecord ( long db, long r, IDispatch * userPars );
__declspec(implementation_key(2293)) long ksDataBaseObject::ksCondition ( long db, long r, _bstr_t stSQL );
__declspec(implementation_key(2294)) long ksDataBaseObject::ksRDouble ( _bstr_t name );
__declspec(implementation_key(2295)) long ksDataBaseObject::ksRFloat ( _bstr_t name );
__declspec(implementation_key(2296)) long ksDataBaseObject::ksRInt ( _bstr_t name );
__declspec(implementation_key(2297)) long ksDataBaseObject::ksRLong ( _bstr_t name );
__declspec(implementation_key(2298)) long ksDataBaseObject::ksRChar ( _bstr_t name, long size, long type );
__declspec(implementation_key(2299)) long ksDataBaseObject::ksOpenTextFile ( _bstr_t fileName );
__declspec(implementation_key(2300)) VARIANT_BOOL ksDataBaseObject::ksCloseTextFile ( long F );
__declspec(implementation_key(2301)) _bstr_t ksDataBaseObject::ksReadStrFrFile ( long F, long * res, long numb );
__declspec(implementation_key(2302)) _bstr_t ksDataBaseObject::ksGetTableName ( long db, long * res, _bstr_t firstOrNext );
__declspec(implementation_key(2303)) _bstr_t ksDataBaseObject::ksGetColumnName ( long db, _bstr_t tableName, long * res, _bstr_t firstOrNext );
__declspec(implementation_key(2304)) long ksDataBaseObject::ksIsODBCOkey ( );
__declspec(implementation_key(2305)) long ksDataBaseObject::ksRCharW ( _bstr_t name, long size, long type );
__declspec(implementation_key(2306)) long ksDataBaseObject::ksOpenTextFileEx ( _bstr_t fileName, long textFileType );
__declspec(implementation_key(2307)) VARIANT_BOOL ksSpcDocumentNotify::DocumentBeginAdd ( );
__declspec(implementation_key(2308)) VARIANT_BOOL ksSpcDocumentNotify::DocumentAdd ( _bstr_t docName );
__declspec(implementation_key(2309)) VARIANT_BOOL ksSpcDocumentNotify::DocumentBeginRemove ( _bstr_t docName );
__declspec(implementation_key(2310)) VARIANT_BOOL ksSpcDocumentNotify::DocumentRemove ( _bstr_t docName );
__declspec(implementation_key(2311)) VARIANT_BOOL ksSpcDocumentNotify::SpcStyleBeginChange ( _bstr_t libName, long numb );
__declspec(implementation_key(2312)) VARIANT_BOOL ksSpcDocumentNotify::SpcStyleChange ( _bstr_t libName, long numb );
__declspec(implementation_key(2313)) IDispatchPtr ksSpcDocument::GetStamp ( );
__declspec(implementation_key(2314)) IDispatchPtr ksSpcDocument::GetSpecification ( );
__declspec(implementation_key(2315)) VARIANT_BOOL ksSpcDocument::ksCloseDocument ( );
__declspec(implementation_key(2316)) IDispatchPtr ksSpcDocument::ksGetSpcSheetSB ( );
__declspec(implementation_key(2317)) long ksSpcDocument::ksGetSpcDocumentPagesCount ( );
__declspec(implementation_key(2318)) VARIANT_BOOL ksSpcDocument::ksSaveDocument ( _bstr_t fileName );
__declspec(implementation_key(2319)) VARIANT_BOOL ksSpcDocument::ksCreateDocument ( IDispatch * par );
__declspec(implementation_key(2320)) long ksSpcDocument::ksDeleteObj ( long ref );
__declspec(implementation_key(2321)) long ksSpcDocument::ksSetSpcSheetSB ( IDispatch * arr );
__declspec(implementation_key(2322)) long ksSpcDocument::ksExistObj ( long ref );
__declspec(implementation_key(2323)) VARIANT_BOOL ksSpcDocument::ksOpenDocument ( _bstr_t nameDoc, short regim );
__declspec(implementation_key(2324)) long ksSpcDocument::ksGetObjParam ( long ref, IDispatch * param, long parType );
__declspec(implementation_key(2325)) long ksSpcDocument::ksSetObjParam ( long ref, IDispatch * param, long parType );
__declspec(implementation_key(2326)) VARIANT_BOOL ksSpcDocument::SaveAsToRasterFormat ( _bstr_t fileName, IDispatch * par );
__declspec(implementation_key(2327)) IDispatchPtr ksSpcDocument::RasterFormatParam ( );
__declspec(implementation_key(2328)) VARIANT_BOOL ksSpcDocument::SaveAsToUncompressedRasterFormat ( _bstr_t fileName, IDispatch * rasterPar );
__declspec(implementation_key(2329)) IUnknownPtr ksSpcDocument::GetSpcDocumentNotify ( );
__declspec(implementation_key(2330)) VARIANT_BOOL ksSpcDocument::ksSaveDocumentEx ( _bstr_t fileName, long SaveMode );
__declspec(implementation_key(2331)) IDispatchPtr ksSpcDocument::GetStampEx ( long SheetNumb );
__declspec(implementation_key(2332)) VARIANT_BOOL ksSpcDocument::ksSaveToDXF ( _bstr_t DXFFileName );
__declspec(implementation_key(2333)) long ksSpcDocument::Getreference ( );
__declspec(implementation_key(2334)) void ksSpcDocument::Putreference ( long _val );
__declspec(implementation_key(2335)) VARIANT_BOOL ksSpcObjectNotify::BeginDelete ( long objRef );
__declspec(implementation_key(2336)) VARIANT_BOOL ksSpcObjectNotify::Delete ( long objRef );
__declspec(implementation_key(2337)) VARIANT_BOOL ksSpcObjectNotify::CellDblClick ( long objRef, long number );
__declspec(implementation_key(2338)) VARIANT_BOOL ksSpcObjectNotify::CellBeginEdit ( long objRef, long number );
__declspec(implementation_key(2339)) VARIANT_BOOL ksSpcObjectNotify::ChangeCurrent ( long objRef );
__declspec(implementation_key(2340)) VARIANT_BOOL ksSpcObjectNotify::DocumentBeginAdd ( long objRef );
__declspec(implementation_key(2341)) VARIANT_BOOL ksSpcObjectNotify::DocumentAdd ( long objRef, _bstr_t docName );
__declspec(implementation_key(2342)) VARIANT_BOOL ksSpcObjectNotify::DocumentRemove ( long objRef, _bstr_t docName );
__declspec(implementation_key(2343)) VARIANT_BOOL ksSpcObjectNotify::BeginGeomChange ( long objRef );
__declspec(implementation_key(2344)) VARIANT_BOOL ksSpcObjectNotify::GeomChange ( long objRef );
__declspec(implementation_key(2345)) VARIANT_BOOL ksSpcObjectNotify::BeginProcess ( long pType, long objRef );
__declspec(implementation_key(2346)) VARIANT_BOOL ksSpcObjectNotify::EndProcess ( long pType );
__declspec(implementation_key(2347)) VARIANT_BOOL ksSpcObjectNotify::CreateObject ( long objRef );
__declspec(implementation_key(2348)) VARIANT_BOOL ksSpcObjectNotify::UpdateObject ( long objRef );
__declspec(implementation_key(2349)) VARIANT_BOOL ksSpcObjectNotify::BeginCopy ( long objRef );
__declspec(implementation_key(2350)) VARIANT_BOOL ksSpcObjectNotify::copy ( long objRef );
__declspec(implementation_key(2351)) VARIANT_BOOL ksSpecificationNotify::TuningSpcStyleBeginChange ( _bstr_t libName, long numb );
__declspec(implementation_key(2352)) VARIANT_BOOL ksSpecificationNotify::TuningSpcStyleChange ( _bstr_t libName, long numb, VARIANT_BOOL isOk );
__declspec(implementation_key(2353)) VARIANT_BOOL ksSpecificationNotify::ChangeCurrentSpcDescription ( _bstr_t libName, long numb );
__declspec(implementation_key(2354)) VARIANT_BOOL ksSpecificationNotify::SpcDescriptionAdd ( _bstr_t libName, long numb );
__declspec(implementation_key(2355)) VARIANT_BOOL ksSpecificationNotify::SpcDescriptionRemove ( _bstr_t libName, long numb );
__declspec(implementation_key(2356)) VARIANT_BOOL ksSpecificationNotify::SpcDescriptionBeginEdit ( _bstr_t libName, long numb );
__declspec(implementation_key(2357)) VARIANT_BOOL ksSpecificationNotify::SpcDescriptionEdit ( _bstr_t libName, long numb, VARIANT_BOOL isOk );
__declspec(implementation_key(2358)) VARIANT_BOOL ksSpecificationNotify::SynchronizationBegin ( );
__declspec(implementation_key(2359)) VARIANT_BOOL ksSpecificationNotify::Synchronization ( );
__declspec(implementation_key(2360)) VARIANT_BOOL ksSpecificationNotify::BeginCalcPositions ( );
__declspec(implementation_key(2361)) VARIANT_BOOL ksSpecificationNotify::CalcPositions ( );
__declspec(implementation_key(2362)) VARIANT_BOOL ksSpecificationNotify::BeginCreateObject ( long typeObj );
__declspec(implementation_key(2363)) long ksSpecification::ksSpcObjectEnd ( );
__declspec(implementation_key(2364)) long ksSpecification::ksSpcObjectEdit ( long spcObj );
__declspec(implementation_key(2365)) long ksSpecification::ksSpcObjectCreate ( _bstr_t nameLib, long styleNumb, long secNumb, long subSecNumb, double numb, short typeObj );
__declspec(implementation_key(2366)) long ksSpecification::ksSpcChangeValue ( long colNumb, long itemNumb, IDispatch * userPars, short typeVal );
__declspec(implementation_key(2367)) long ksSpecification::ksSpcVisible ( long colNumb, long itemNumb, short flagOn );
__declspec(implementation_key(2368)) long ksSpecification::ksSpcMassa ( _bstr_t sMassa );
__declspec(implementation_key(2369)) long ksSpecification::ksSpcCount ( short ispoln, _bstr_t sCount );
__declspec(implementation_key(2370)) long ksSpecification::ksSpcPosition ( long pos );
__declspec(implementation_key(2371)) long ksSpecification::ksSpcIncludeReference ( long obj, short Clear );
__declspec(implementation_key(2372)) long ksSpecification::ksGetSpcObjForGeom ( _bstr_t nameLib, long numb, long obj, short equal, short First );
__declspec(implementation_key(2373)) long ksSpecification::ksGetSpcObjForGeomWithLimit ( _bstr_t nameLib, long numb, long obj, short equal, short First, long section, double attrTypeNumb );
__declspec(implementation_key(2374)) _bstr_t ksSpecification::ksGetSpcSectionName ( long spcObj );
__declspec(implementation_key(2375)) long ksSpecification::ksEditWindowSpcObject ( long obj );
__declspec(implementation_key(2376)) double ksSpecification::ksGetSpcObjectNumber ( long spcObj );
__declspec(implementation_key(2377)) long ksSpecification::ksGetSpcObject ( double objNumb );
__declspec(implementation_key(2378)) _bstr_t ksSpecification::ksGetSpcObjectColumnText ( long spcObj, long columnType, long ispoln, long block );
__declspec(implementation_key(2379)) long ksSpecification::ksSetSpcObjectColumnText ( long columnType, long ispoln, long block, _bstr_t str );
__declspec(implementation_key(2380)) long ksSpecification::ksGetSpcTableColumn ( _bstr_t nameLib, long numb, short additioanalCol );
__declspec(implementation_key(2381)) long ksSpecification::ksGetSpcColumnType ( long spcObj, long colNumb, IDispatch * par );
__declspec(implementation_key(2382)) long ksSpecification::ksGetSpcColumnNumb ( long spcObj, long columnType, long ispoln, long block );
__declspec(implementation_key(2383)) long ksSpecification::ksGetSpcStyleParam ( _bstr_t nameLib, long numb, IDispatch * par, long tPar );
__declspec(implementation_key(2384)) long ksSpecification::ksGetSpcDescription ( long index, IDispatch * param, VARIANT_BOOL * state );
__declspec(implementation_key(2385)) long ksSpecification::ksSetSpcDescription ( long index, IDispatch * param, short state );
__declspec(implementation_key(2386)) long ksSpecification::ksAddSpcDescription ( IDispatch * param );
__declspec(implementation_key(2387)) long ksSpecification::ksDeleteSpcDescription ( long index );
__declspec(implementation_key(2388)) VARIANT_BOOL ksSpecification::D3SpcIncludePart ( IDispatch * part, VARIANT_BOOL fillTexts );
__declspec(implementation_key(2389)) long ksSpecification::D3GetSpcObjForGeomWithLimit ( _bstr_t nameLib, long numb, IDispatch * part, short First, short section, double attrTypeNumb );
__declspec(implementation_key(2390)) double ksSpecification::ksGetWidthColumnSpc ( long numColumn, VARIANT_BOOL cellOrText );
__declspec(implementation_key(2391)) long ksSpecification::ksGetCurrentSpcObject ( );
__declspec(implementation_key(2392)) long ksSpecification::ksSetCurrentSpcObject ( long spcObj, long index );
__declspec(implementation_key(2393)) long ksSpecification::ksSetTuningSpcStyleParam ( long index, IDispatch * par );
__declspec(implementation_key(2394)) long ksSpecification::ksGetTuningSpcStyleParam ( long index, IDispatch * par );
__declspec(implementation_key(2395)) long ksSpecification::ksGetSpcObjGeometry ( long spcObj );
__declspec(implementation_key(2396)) IDispatchPtr ksSpecification::D3GetSpcObjGeometry ( long spcObj );
__declspec(implementation_key(2397)) IDispatchPtr ksSpecification::ksGetSpcObjectColumnTextEx ( long spcObj, long columnType, long ispoln, long block );
__declspec(implementation_key(2398)) long ksSpecification::ksSetSpcObjectColumnTextEx ( long columnType, long ispoln, long block, IDispatch * arr );
__declspec(implementation_key(2399)) IUnknownPtr ksSpecification::GetSpcObjectNotify ( long objType );
__declspec(implementation_key(2400)) long ksSpecification::ksGetSpcObjGeometryEx ( long spcObj, long geomMode );
__declspec(implementation_key(2401)) VARIANT_BOOL ksSpecification::ksSetSpcObjectColumnTextAlign ( long spcObj, long columnNumber, long lineIndex, long align );
__declspec(implementation_key(2402)) long ksSpecification::ksGetSpcObjectColumnTextAlign ( long spcObj, long columnNumber, long lineIndex );
__declspec(implementation_key(2403)) double ksSpecification::ksGetSpcObjectAttributeNumber ( long spcObj );
__declspec(implementation_key(2404)) VARIANT_BOOL ksSpecification::ksSetSpcObjectAttributeNumber ( long spcObj, double attrNumber );
__declspec(implementation_key(2405)) double ksSpecification::ksGetSpcObjectSummaryCount ( long spcObj, long ispoln, long blockNumber );
__declspec(implementation_key(2406)) VARIANT_BOOL ksSpecification::ksSetSpcObjectMaterial ( long spcObj, _bstr_t material, double density );
__declspec(implementation_key(2407)) _bstr_t ksSpecification::ksGetSpcPerformanceName ( long index, long ispoln, long block );
__declspec(implementation_key(2408)) VARIANT_BOOL ksSpecification::ksSetSpcPerformanceName ( long index, long ispoln, long block, _bstr_t name );
__declspec(implementation_key(2409)) VARIANT_BOOL ksSpecification::ksSpcDocLinksClear ( long doc );
__declspec(implementation_key(2410)) VARIANT_BOOL ksSpecification::ksSpcDocLinksClearEx ( long doc, long mode );
__declspec(implementation_key(2411)) VARIANT_BOOL ksSpecification::ksGetSpcPropertyFill ( long spcObj );
__declspec(implementation_key(2412)) VARIANT_BOOL ksSpecification::ksSetSpcPropertyFill ( long spcObj, long val );
__declspec(implementation_key(2413)) IDispatchPtr ksSpecification::ksGetSpcObjectSummaryCountText ( long spcObj, long ispoln, long block );
__declspec(implementation_key(2414)) IDispatchPtr ksDocumentTxt::GetStamp ( );
__declspec(implementation_key(2415)) VARIANT_BOOL ksDocumentTxt::ksCloseDocument ( );
__declspec(implementation_key(2416)) long ksDocumentTxt::ksGetTxtDocumentPagesCount ( );
__declspec(implementation_key(2417)) VARIANT_BOOL ksDocumentTxt::ksSaveDocument ( _bstr_t fileName );
__declspec(implementation_key(2418)) VARIANT_BOOL ksDocumentTxt::ksCreateDocument ( IDispatch * par );
__declspec(implementation_key(2419)) VARIANT_BOOL ksDocumentTxt::ksOpenDocument ( _bstr_t nameDoc, short regim );
__declspec(implementation_key(2420)) VARIANT_BOOL ksDocumentTxt::SaveAsToRasterFormat ( _bstr_t fileName, IDispatch * par );
__declspec(implementation_key(2421)) IDispatchPtr ksDocumentTxt::RasterFormatParam ( );
__declspec(implementation_key(2422)) VARIANT_BOOL ksDocumentTxt::SaveAsToUncompressedRasterFormat ( _bstr_t fileName, IDispatch * rasterPar );
__declspec(implementation_key(2423)) long ksDocumentTxt::ksGetObjParam ( long ref, IDispatch * param, long parType );
__declspec(implementation_key(2424)) long ksDocumentTxt::ksSetObjParam ( long ref, IDispatch * param, long parType );
__declspec(implementation_key(2425)) VARIANT_BOOL ksDocumentTxt::ksSaveDocumentEx ( _bstr_t fileName, long SaveMode );
__declspec(implementation_key(2426)) IDispatchPtr ksDocumentTxt::GetStampEx ( long SheetNumb );
__declspec(implementation_key(2427)) long ksDocumentTxt::ksGetDocumentPagesCount ( );
__declspec(implementation_key(2428)) long ksDocumentTxt::Getreference ( );
__declspec(implementation_key(2429)) void ksDocumentTxt::Putreference ( long _val );
__declspec(implementation_key(2430)) IDispatchPtr ksAttributeTypeParam::GetColumns ( );
__declspec(implementation_key(2431)) VARIANT_BOOL ksAttributeTypeParam::SetColumns ( IDispatch * val );
__declspec(implementation_key(2432)) VARIANT_BOOL ksAttributeTypeParam::Init ( );
__declspec(implementation_key(2433)) long ksAttributeTypeParam::Getkey1 ( );
__declspec(implementation_key(2434)) void ksAttributeTypeParam::Putkey1 ( long _val );
__declspec(implementation_key(2435)) long ksAttributeTypeParam::Getkey2 ( );
__declspec(implementation_key(2436)) void ksAttributeTypeParam::Putkey2 ( long _val );
__declspec(implementation_key(2437)) long ksAttributeTypeParam::Getkey3 ( );
__declspec(implementation_key(2438)) void ksAttributeTypeParam::Putkey3 ( long _val );
__declspec(implementation_key(2439)) long ksAttributeTypeParam::Getkey4 ( );
__declspec(implementation_key(2440)) void ksAttributeTypeParam::Putkey4 ( long _val );
__declspec(implementation_key(2441)) long ksAttributeTypeParam::GetrowsCount ( );
__declspec(implementation_key(2442)) void ksAttributeTypeParam::PutrowsCount ( long _val );
__declspec(implementation_key(2443)) _bstr_t ksAttributeTypeParam::Getheader ( );
__declspec(implementation_key(2444)) void ksAttributeTypeParam::Putheader ( _bstr_t _val );
__declspec(implementation_key(2445)) VARIANT_BOOL ksAttributeTypeParam::GetflagVisible ( );
__declspec(implementation_key(2446)) void ksAttributeTypeParam::PutflagVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(2447)) _bstr_t ksAttributeTypeParam::Getpassword ( );
__declspec(implementation_key(2448)) void ksAttributeTypeParam::Putpassword ( _bstr_t _val );
__declspec(implementation_key(2449)) IDispatchPtr ksColumnInfoParam::GetFieldEnum ( );
__declspec(implementation_key(2450)) VARIANT_BOOL ksColumnInfoParam::SetFieldEnum ( IDispatch * fieldEnum );
__declspec(implementation_key(2451)) IDispatchPtr ksColumnInfoParam::GetColumns ( );
__declspec(implementation_key(2452)) VARIANT_BOOL ksColumnInfoParam::SetColumns ( IDispatch * fieldEnum );
__declspec(implementation_key(2453)) VARIANT_BOOL ksColumnInfoParam::Init ( );
__declspec(implementation_key(2454)) short ksColumnInfoParam::Gettype ( );
__declspec(implementation_key(2455)) void ksColumnInfoParam::Puttype ( short _val );
__declspec(implementation_key(2456)) _bstr_t ksColumnInfoParam::Getheader ( );
__declspec(implementation_key(2457)) void ksColumnInfoParam::Putheader ( _bstr_t _val );
__declspec(implementation_key(2458)) short ksColumnInfoParam::Getkey ( );
__declspec(implementation_key(2459)) void ksColumnInfoParam::Putkey ( short _val );
__declspec(implementation_key(2460)) _bstr_t ksColumnInfoParam::Getdef ( );
__declspec(implementation_key(2461)) void ksColumnInfoParam::Putdef ( _bstr_t _val );
__declspec(implementation_key(2462)) VARIANT_BOOL ksColumnInfoParam::GetflagEnum ( );
__declspec(implementation_key(2463)) void ksColumnInfoParam::PutflagEnum ( VARIANT_BOOL _val );
__declspec(implementation_key(2464)) IDispatchPtr ksAttributeParam::GetValues ( );
__declspec(implementation_key(2465)) VARIANT_BOOL ksAttributeParam::SetValues ( IDispatch * values );
__declspec(implementation_key(2466)) IDispatchPtr ksAttributeParam::GetFlagVisible ( );
__declspec(implementation_key(2467)) VARIANT_BOOL ksAttributeParam::SetFlagVisible ( IDispatch * flagVisible );
__declspec(implementation_key(2468)) IDispatchPtr ksAttributeParam::GetColumnKeys ( );
__declspec(implementation_key(2469)) VARIANT_BOOL ksAttributeParam::SetColumnKeys ( IDispatch * columnKeys );
__declspec(implementation_key(2470)) VARIANT_BOOL ksAttributeParam::Init ( );
__declspec(implementation_key(2471)) long ksAttributeParam::Getkey1 ( );
__declspec(implementation_key(2472)) void ksAttributeParam::Putkey1 ( long _val );
__declspec(implementation_key(2473)) long ksAttributeParam::Getkey2 ( );
__declspec(implementation_key(2474)) void ksAttributeParam::Putkey2 ( long _val );
__declspec(implementation_key(2475)) long ksAttributeParam::Getkey3 ( );
__declspec(implementation_key(2476)) void ksAttributeParam::Putkey3 ( long _val );
__declspec(implementation_key(2477)) long ksAttributeParam::Getkey4 ( );
__declspec(implementation_key(2478)) void ksAttributeParam::Putkey4 ( long _val );
__declspec(implementation_key(2479)) _bstr_t ksAttributeParam::Getpassword ( );
__declspec(implementation_key(2480)) void ksAttributeParam::Putpassword ( _bstr_t _val );
__declspec(implementation_key(2481)) _bstr_t ksVariable::Getname ( );
__declspec(implementation_key(2482)) _bstr_t ksVariable::GetparameterNote ( );
__declspec(implementation_key(2483)) _bstr_t ksVariable::GetlinkVarName ( );
__declspec(implementation_key(2484)) _bstr_t ksVariable::GetlinkDocName ( );
__declspec(implementation_key(2485)) VARIANT_BOOL ksVariable::SetLink ( _bstr_t doc, _bstr_t name );
__declspec(implementation_key(2486)) _bstr_t ksVariable::GetdisplayName ( );
__declspec(implementation_key(2487)) double ksVariable::Getvalue ( );
__declspec(implementation_key(2488)) void ksVariable::Putvalue ( double _val );
__declspec(implementation_key(2489)) _bstr_t ksVariable::Getnote ( );
__declspec(implementation_key(2490)) void ksVariable::Putnote ( _bstr_t _val );
__declspec(implementation_key(2491)) _bstr_t ksVariable::GetPseudonym ( );
__declspec(implementation_key(2492)) void ksVariable::PutPseudonym ( _bstr_t _val );
__declspec(implementation_key(2493)) _bstr_t ksVariable::GetExpression ( );
__declspec(implementation_key(2494)) void ksVariable::PutExpression ( _bstr_t _val );
__declspec(implementation_key(2495)) VARIANT_BOOL ksVariable::Getexternal ( );
__declspec(implementation_key(2496)) void ksVariable::Putexternal ( VARIANT_BOOL _val );
__declspec(implementation_key(2497)) VARIANT_BOOL ksVariable::GetInformation ( );
__declspec(implementation_key(2498)) void ksVariable::PutInformation ( VARIANT_BOOL _val );
__declspec(implementation_key(2499)) VARIANT_BOOL ksLibraryAttrTypeParam::Init ( );
__declspec(implementation_key(2500)) _bstr_t ksLibraryAttrTypeParam::Getname ( );
__declspec(implementation_key(2501)) void ksLibraryAttrTypeParam::Putname ( _bstr_t _val );
__declspec(implementation_key(2502)) double ksLibraryAttrTypeParam::GettypeId ( );
__declspec(implementation_key(2503)) void ksLibraryAttrTypeParam::PuttypeId ( double _val );
__declspec(implementation_key(2504)) double ksAttributeObject::ksCreateAttrType ( IDispatch * attrType, _bstr_t libName );
__declspec(implementation_key(2505)) long ksAttributeObject::ksDeleteAttrType ( double attrID, _bstr_t libName, _bstr_t password );
__declspec(implementation_key(2506)) long ksAttributeObject::ksGetAttrType ( double attrID, _bstr_t libName, IDispatch * attrType );
__declspec(implementation_key(2507)) double ksAttributeObject::ksSetAttrType ( double attrID, _bstr_t libName, IDispatch * attrType, _bstr_t password );
__declspec(implementation_key(2508)) double ksAttributeObject::ksChoiceAttrTypes ( _bstr_t libName );
__declspec(implementation_key(2509)) long ksAttributeObject::ksCreateAttr ( long pObj, IDispatch * attr, double attrID, _bstr_t libName );
__declspec(implementation_key(2510)) long ksAttributeObject::ksDeleteAttr ( long pObj, long pAttr, _bstr_t password );
__declspec(implementation_key(2511)) long ksAttributeObject::ksGetAttrValue ( long pAttr, long rowNumb, long columnNumb, IDispatch * flagVisible, IDispatch * columnKeys, IDispatch * value );
__declspec(implementation_key(2512)) long ksAttributeObject::ksSetAttrValue ( long pAttr, long rowNumb, long columnNumb, IDispatch * flagVisible, IDispatch * columnKeys, IDispatch * value, _bstr_t password );
__declspec(implementation_key(2513)) long ksAttributeObject::ksGetAttrRow ( long pAttr, long rowNumb, IDispatch * flagVisible, IDispatch * columnKeys, IDispatch * value );
__declspec(implementation_key(2514)) long ksAttributeObject::ksSetAttrRow ( long pAttr, long rowNumb, IDispatch * flagVisible, IDispatch * columnKeys, IDispatch * value, _bstr_t password );
__declspec(implementation_key(2515)) long ksAttributeObject::ksAddAttrRow ( long pAttr, long rowNumb, IDispatch * flagVisible, IDispatch * value, _bstr_t password );
__declspec(implementation_key(2516)) long ksAttributeObject::ksDeleteAttrRow ( long pAttr, long rowNumb, _bstr_t password );
__declspec(implementation_key(2517)) long ksAttributeObject::ksGetSizeAttrValue ( long pAttr, long columnNumb, long * count );
__declspec(implementation_key(2518)) long ksAttributeObject::ksGetSizeAttrRow ( long pAttr, long * count );
__declspec(implementation_key(2519)) long ksAttributeObject::ksGetAttrKeysInfo ( long pAttr, long * key1, long * key2, long * key3, long * key4, double * numb );
__declspec(implementation_key(2520)) long ksAttributeObject::ksGetAttrColumnInfo ( long pAttr, long columnNumb, IDispatch * columnInfo );
__declspec(implementation_key(2521)) long ksAttributeObject::ksGetAttrTabInfo ( long pAttr, long * rowsCount, long * columnsCount );
__declspec(implementation_key(2522)) long ksAttributeObject::ksViewEditAttr ( long pAttr, long type, _bstr_t password );
__declspec(implementation_key(2523)) long ksAttributeObject::ksViewEditAttrType ( _bstr_t libName, long type, double attrID, _bstr_t password );
__declspec(implementation_key(2524)) long ksAttributeObject::ksChoiceAttr ( long pObj );
__declspec(implementation_key(2525)) IDispatchPtr ksAttributeObject::ksGetLibraryAttrTypesArray ( _bstr_t libName );
__declspec(implementation_key(2526)) ksAttribute3DPtr ksAttributeObject::ksCreateAttr3D ( IDispatch * pObj, IDispatch * attr, double attrID, _bstr_t libName );
__declspec(implementation_key(2527)) long ksAttributeObject::ksDeleteAttr3D ( IDispatch * pObj, struct ksAttribute3D * pAttr, _bstr_t password );
__declspec(implementation_key(2528)) ksAttribute3DPtr ksAttributeObject::ksChoiceAttr3D ( IDispatch * pObj );
__declspec(implementation_key(2529)) ksAttribute3DPtr ksAttributeObject::ksCreateAttr3DEx ( IDispatch * pObj, IDispatch * pSourcePart, IDispatch * attr, double attrID, _bstr_t libName );
__declspec(implementation_key(2530)) long ksAttributeObject::ksGetSizeAttrValueW ( long pAttr, long columnNumb, long * count );
__declspec(implementation_key(2531)) long ksAttributeObject::ksGetSizeAttrRowW ( long pAttr, long * count );
__declspec(implementation_key(2532)) _bstr_t ksRequestInfo3D::GetFilterCallBack ( );
__declspec(implementation_key(2533)) _bstr_t ksRequestInfo3D::GetCallBack ( );
__declspec(implementation_key(2534)) VARIANT_BOOL ksRequestInfo3D::SetFilterCallBack ( _bstr_t methodName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2535)) VARIANT_BOOL ksRequestInfo3D::SetCallBack ( _bstr_t methodName, long hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2536)) IDispatchPtr ksRequestInfo3D::GetPlacement ( );
__declspec(implementation_key(2537)) IDispatchPtr ksRequestInfo3D::GetEntityCollection ( );
__declspec(implementation_key(2538)) long ksRequestInfo3D::GetCurrentCommand ( );
__declspec(implementation_key(2539)) IDispatchPtr ksRequestInfo3D::GetMateConstraintCollection ( );
__declspec(implementation_key(2540)) IDispatchPtr ksRequestInfo3D::GetIPhantom ( );
__declspec(implementation_key(2541)) VARIANT_BOOL ksRequestInfo3D::CreatePhantom ( );
__declspec(implementation_key(2542)) IUnknownPtr ksRequestInfo3D::GetProcessParam ( );
__declspec(implementation_key(2543)) VARIANT_BOOL ksRequestInfo3D::SetProcessParam ( IUnknown * param );
__declspec(implementation_key(2544)) IDispatchPtr ksRequestInfo3D::GetCallBackFeature ( );
__declspec(implementation_key(2545)) VARIANT_BOOL ksRequestInfo3D::SetCursorText ( _bstr_t text );
__declspec(implementation_key(2546)) VARIANT_BOOL ksRequestInfo3D::SetFilterCallBackEx ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2547)) VARIANT_BOOL ksRequestInfo3D::SetCallBackEx ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2548)) _bstr_t ksRequestInfo3D::GetTakeObjectCallBack ( );
__declspec(implementation_key(2549)) VARIANT_BOOL ksRequestInfo3D::SetTakeObjectCallBack ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2550)) IDispatchPtr ksRequestInfo3D::GetTakeProcessObject ( );
__declspec(implementation_key(2551)) VARIANT_BOOL ksRequestInfo3D::SetTakeProcessObject ( IDispatch * param );
__declspec(implementation_key(2552)) _bstr_t ksRequestInfo3D::GetProcessingGroupObjectsCallBack ( );
__declspec(implementation_key(2553)) VARIANT_BOOL ksRequestInfo3D::SetProcessingGroupObjectsCallBack ( _bstr_t methodName, const _variant_t & hInst, IDispatch * dispatchOCX );
__declspec(implementation_key(2554)) VARIANT_BOOL ksRequestInfo3D::SetObjectsFilter3D ( long filterType, VARIANT_BOOL newVal );
__declspec(implementation_key(2555)) VARIANT_BOOL ksRequestInfo3D::GetObjectsFilter3D ( long filterType );
__declspec(implementation_key(2556)) _bstr_t ksRequestInfo3D::Getprompt ( );
__declspec(implementation_key(2557)) void ksRequestInfo3D::Putprompt ( _bstr_t _val );
__declspec(implementation_key(2558)) _bstr_t ksRequestInfo3D::Gettitle ( );
__declspec(implementation_key(2559)) void ksRequestInfo3D::Puttitle ( _bstr_t _val );
__declspec(implementation_key(2560)) _bstr_t ksRequestInfo3D::GetcursorName ( );
__declspec(implementation_key(2561)) void ksRequestInfo3D::PutcursorName ( _bstr_t _val );
__declspec(implementation_key(2562)) _bstr_t ksRequestInfo3D::GetcommandsString ( );
__declspec(implementation_key(2563)) void ksRequestInfo3D::PutcommandsString ( _bstr_t _val );
__declspec(implementation_key(2564)) long ksRequestInfo3D::GetcursorId ( );
__declspec(implementation_key(2565)) void ksRequestInfo3D::PutcursorId ( long _val );
__declspec(implementation_key(2566)) long ksRequestInfo3D::GetmenuId ( );
__declspec(implementation_key(2567)) void ksRequestInfo3D::PutmenuId ( long _val );
__declspec(implementation_key(2568)) VARIANT_BOOL ksRequestInfo3D::GetDynamicFiltering ( );
__declspec(implementation_key(2569)) void ksRequestInfo3D::PutDynamicFiltering ( VARIANT_BOOL _val );
__declspec(implementation_key(2570)) VARIANT_BOOL ksRequestInfo3D::GetShowCommandWindow ( );
__declspec(implementation_key(2571)) void ksRequestInfo3D::PutShowCommandWindow ( VARIANT_BOOL _val );
__declspec(implementation_key(2572)) long ksRequestInfo3D::GetSelectionBandMode ( );
__declspec(implementation_key(2573)) void ksRequestInfo3D::PutSelectionBandMode ( long _val );
__declspec(implementation_key(2574)) VARIANT_BOOL ksMateConstraint::Create ( );
__declspec(implementation_key(2575)) IDispatchPtr ksMateConstraint::GetBaseObj ( short number );
__declspec(implementation_key(2576)) VARIANT_BOOL ksMateConstraint::SetBaseObj ( short number, IDispatch * obj );
__declspec(implementation_key(2577)) IDispatchPtr ksMateConstraint::GetFeature ( );
__declspec(implementation_key(2578)) long ksMateConstraint::GetEntityParams ( short number, VARIANT * params );
__declspec(implementation_key(2579)) short ksMateConstraint::GetconstraintType ( );
__declspec(implementation_key(2580)) void ksMateConstraint::PutconstraintType ( short _val );
__declspec(implementation_key(2581)) short ksMateConstraint::Getdirection ( );
__declspec(implementation_key(2582)) void ksMateConstraint::Putdirection ( short _val );
__declspec(implementation_key(2583)) short ksMateConstraint::Getfixed ( );
__declspec(implementation_key(2584)) void ksMateConstraint::Putfixed ( short _val );
__declspec(implementation_key(2585)) double ksMateConstraint::Getdistance ( );
__declspec(implementation_key(2586)) void ksMateConstraint::Putdistance ( double _val );
__declspec(implementation_key(2587)) IDispatchPtr ksDefaultObject::GetSurface ( );
__declspec(implementation_key(2588)) IDispatchPtr ksDefaultObject::GetCurve3D ( );
__declspec(implementation_key(2589)) long ksModelLibrary::ModelLibraryOperation ( _bstr_t libName, long type );
__declspec(implementation_key(2590)) _bstr_t ksModelLibrary::ChoiceModelFromLib ( _bstr_t libFile, long * type );
__declspec(implementation_key(2591)) long ksModelLibrary::ExistModelInLibrary ( _bstr_t name );
__declspec(implementation_key(2592)) long ksModelLibrary::AddD3DocumentToLibrary ( _bstr_t libName, _bstr_t fileName );
__declspec(implementation_key(2593)) long ksModelLibrary::CheckModelLibrary ( _bstr_t libName, VARIANT_BOOL possibleMessage );
__declspec(implementation_key(2594)) VARIANT_BOOL ksVariableCollection::refresh ( );
__declspec(implementation_key(2595)) long ksVariableCollection::GetCount ( );
__declspec(implementation_key(2596)) IDispatchPtr ksVariableCollection::First ( );
__declspec(implementation_key(2597)) IDispatchPtr ksVariableCollection::Last ( );
__declspec(implementation_key(2598)) IDispatchPtr ksVariableCollection::Next ( );
__declspec(implementation_key(2599)) IDispatchPtr ksVariableCollection::Prev ( );
__declspec(implementation_key(2600)) IDispatchPtr ksVariableCollection::GetByIndex ( long index );
__declspec(implementation_key(2601)) IDispatchPtr ksVariableCollection::GetByName ( _bstr_t name, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(2602)) IDispatchPtr ksVariableCollection::AddNewVariable ( _bstr_t name, double value, _bstr_t note );
__declspec(implementation_key(2603)) VARIANT_BOOL ksVariableCollection::RemoveVariable ( _bstr_t name );
__declspec(implementation_key(2604)) long ksMateConstraintCollection::GetCount ( );
__declspec(implementation_key(2605)) IDispatchPtr ksMateConstraintCollection::First ( );
__declspec(implementation_key(2606)) IDispatchPtr ksMateConstraintCollection::Last ( );
__declspec(implementation_key(2607)) IDispatchPtr ksMateConstraintCollection::Next ( );
__declspec(implementation_key(2608)) IDispatchPtr ksMateConstraintCollection::Prev ( );
__declspec(implementation_key(2609)) IDispatchPtr ksMateConstraintCollection::GetByIndex ( long index );
__declspec(implementation_key(2610)) VARIANT_BOOL ksMateConstraintCollection::AddMateConstraint ( IDispatch * mate );
__declspec(implementation_key(2611)) VARIANT_BOOL ksMateConstraintCollection::RemoveMateConstraint ( IDispatch * mate );
__declspec(implementation_key(2612)) VARIANT_BOOL ksMateConstraintCollection::Clear ( );
__declspec(implementation_key(2613)) VARIANT_BOOL ksMateConstraintCollection::refresh ( );
__declspec(implementation_key(2614)) long ksMateConstraintCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(2615)) VARIANT_BOOL ksMateConstraintCollection::GetSafeArrayByObj ( IDispatch * obj, VARIANT * pArray );
__declspec(implementation_key(2616)) VARIANT_BOOL ksPartCollection::refresh ( );
__declspec(implementation_key(2617)) long ksPartCollection::GetCount ( );
__declspec(implementation_key(2618)) IDispatchPtr ksPartCollection::First ( );
__declspec(implementation_key(2619)) IDispatchPtr ksPartCollection::Last ( );
__declspec(implementation_key(2620)) IDispatchPtr ksPartCollection::Next ( );
__declspec(implementation_key(2621)) IDispatchPtr ksPartCollection::Prev ( );
__declspec(implementation_key(2622)) IDispatchPtr ksPartCollection::GetByName ( _bstr_t name, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(2623)) IDispatchPtr ksPartCollection::GetByIndex ( long index );
__declspec(implementation_key(2624)) VARIANT_BOOL ksPartCollection::Add ( IDispatch * part );
__declspec(implementation_key(2625)) VARIANT_BOOL ksPartCollection::AddAt ( IDispatch * part, long index );
__declspec(implementation_key(2626)) VARIANT_BOOL ksPartCollection::AddBefore ( IDispatch * part, IDispatch * base );
__declspec(implementation_key(2627)) VARIANT_BOOL ksPartCollection::DetachByIndex ( long index );
__declspec(implementation_key(2628)) VARIANT_BOOL ksPartCollection::DetachByBody ( IDispatch * part );
__declspec(implementation_key(2629)) VARIANT_BOOL ksPartCollection::Clear ( );
__declspec(implementation_key(2630)) VARIANT_BOOL ksPartCollection::SetByIndex ( IDispatch * part, long index );
__declspec(implementation_key(2631)) long ksPartCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(2632)) IDispatchPtr ksMeshPartArrayDefinition::GetAxis1 ( );
__declspec(implementation_key(2633)) VARIANT_BOOL ksMeshPartArrayDefinition::SetAxis1 ( IDispatch * axis );
__declspec(implementation_key(2634)) IDispatchPtr ksMeshPartArrayDefinition::GetAxis2 ( );
__declspec(implementation_key(2635)) VARIANT_BOOL ksMeshPartArrayDefinition::SetAxis2 ( IDispatch * axis );
__declspec(implementation_key(2636)) IDispatchPtr ksMeshPartArrayDefinition::PartArray ( );
__declspec(implementation_key(2637)) VARIANT_BOOL ksMeshPartArrayDefinition::GetCopyParamAlongAxis ( VARIANT_BOOL firstAxis, double * angle, long * count, double * step, VARIANT_BOOL * factor );
__declspec(implementation_key(2638)) VARIANT_BOOL ksMeshPartArrayDefinition::SetCopyParamAlongAxis ( VARIANT_BOOL firstAxis, double angle, long count, double step, VARIANT_BOOL factor );
__declspec(implementation_key(2639)) IDispatchPtr ksMeshPartArrayDefinition::DeletedCollection ( );
__declspec(implementation_key(2640)) double ksMeshPartArrayDefinition::Getangle1 ( );
__declspec(implementation_key(2641)) void ksMeshPartArrayDefinition::Putangle1 ( double _val );
__declspec(implementation_key(2642)) long ksMeshPartArrayDefinition::Getcount1 ( );
__declspec(implementation_key(2643)) void ksMeshPartArrayDefinition::Putcount1 ( long _val );
__declspec(implementation_key(2644)) double ksMeshPartArrayDefinition::Getstep1 ( );
__declspec(implementation_key(2645)) void ksMeshPartArrayDefinition::Putstep1 ( double _val );
__declspec(implementation_key(2646)) VARIANT_BOOL ksMeshPartArrayDefinition::Getfactor1 ( );
__declspec(implementation_key(2647)) void ksMeshPartArrayDefinition::Putfactor1 ( VARIANT_BOOL _val );
__declspec(implementation_key(2648)) double ksMeshPartArrayDefinition::Getangle2 ( );
__declspec(implementation_key(2649)) void ksMeshPartArrayDefinition::Putangle2 ( double _val );
__declspec(implementation_key(2650)) long ksMeshPartArrayDefinition::Getcount2 ( );
__declspec(implementation_key(2651)) void ksMeshPartArrayDefinition::Putcount2 ( long _val );
__declspec(implementation_key(2652)) double ksMeshPartArrayDefinition::Getstep2 ( );
__declspec(implementation_key(2653)) void ksMeshPartArrayDefinition::Putstep2 ( double _val );
__declspec(implementation_key(2654)) VARIANT_BOOL ksMeshPartArrayDefinition::Getfactor2 ( );
__declspec(implementation_key(2655)) void ksMeshPartArrayDefinition::Putfactor2 ( VARIANT_BOOL _val );
__declspec(implementation_key(2656)) VARIANT_BOOL ksMeshPartArrayDefinition::GetinsideFlag ( );
__declspec(implementation_key(2657)) void ksMeshPartArrayDefinition::PutinsideFlag ( VARIANT_BOOL _val );
__declspec(implementation_key(2658)) IDispatchPtr ksCircularPartArrayDefinition::PartArray ( );
__declspec(implementation_key(2659)) IDispatchPtr ksCircularPartArrayDefinition::GetAxis ( );
__declspec(implementation_key(2660)) VARIANT_BOOL ksCircularPartArrayDefinition::SetAxis ( IDispatch * axis );
__declspec(implementation_key(2661)) VARIANT_BOOL ksCircularPartArrayDefinition::GetCopyParamAlongDir ( long * count, double * step, VARIANT_BOOL * factor, VARIANT_BOOL dir );
__declspec(implementation_key(2662)) VARIANT_BOOL ksCircularPartArrayDefinition::SetCopyParamAlongDir ( long count, double step, VARIANT_BOOL factor, VARIANT_BOOL dir );
__declspec(implementation_key(2663)) IDispatchPtr ksCircularPartArrayDefinition::DeletedCollection ( );
__declspec(implementation_key(2664)) long ksCircularPartArrayDefinition::Getcount1 ( );
__declspec(implementation_key(2665)) void ksCircularPartArrayDefinition::Putcount1 ( long _val );
__declspec(implementation_key(2666)) double ksCircularPartArrayDefinition::Getstep1 ( );
__declspec(implementation_key(2667)) void ksCircularPartArrayDefinition::Putstep1 ( double _val );
__declspec(implementation_key(2668)) VARIANT_BOOL ksCircularPartArrayDefinition::Getfactor1 ( );
__declspec(implementation_key(2669)) void ksCircularPartArrayDefinition::Putfactor1 ( VARIANT_BOOL _val );
__declspec(implementation_key(2670)) long ksCircularPartArrayDefinition::Getcount2 ( );
__declspec(implementation_key(2671)) void ksCircularPartArrayDefinition::Putcount2 ( long _val );
__declspec(implementation_key(2672)) double ksCircularPartArrayDefinition::Getstep2 ( );
__declspec(implementation_key(2673)) void ksCircularPartArrayDefinition::Putstep2 ( double _val );
__declspec(implementation_key(2674)) VARIANT_BOOL ksCircularPartArrayDefinition::Getfactor2 ( );
__declspec(implementation_key(2675)) void ksCircularPartArrayDefinition::Putfactor2 ( VARIANT_BOOL _val );
__declspec(implementation_key(2676)) VARIANT_BOOL ksCircularPartArrayDefinition::Getinverce ( );
__declspec(implementation_key(2677)) void ksCircularPartArrayDefinition::Putinverce ( VARIANT_BOOL _val );
__declspec(implementation_key(2678)) VARIANT_BOOL ksCircularPartArrayDefinition::GetkeepAngle ( );
__declspec(implementation_key(2679)) void ksCircularPartArrayDefinition::PutkeepAngle ( VARIANT_BOOL _val );
__declspec(implementation_key(2680)) IDispatchPtr ksCurvePartArrayDefinition::PartArray ( );
__declspec(implementation_key(2681)) IDispatchPtr ksCurvePartArrayDefinition::CurveArray ( );
__declspec(implementation_key(2682)) IDispatchPtr ksCurvePartArrayDefinition::DeletedCollection ( );
__declspec(implementation_key(2683)) long ksCurvePartArrayDefinition::Getcount ( );
__declspec(implementation_key(2684)) void ksCurvePartArrayDefinition::Putcount ( long _val );
__declspec(implementation_key(2685)) double ksCurvePartArrayDefinition::Getstep ( );
__declspec(implementation_key(2686)) void ksCurvePartArrayDefinition::Putstep ( double _val );
__declspec(implementation_key(2687)) VARIANT_BOOL ksCurvePartArrayDefinition::Getfactor ( );
__declspec(implementation_key(2688)) void ksCurvePartArrayDefinition::Putfactor ( VARIANT_BOOL _val );
__declspec(implementation_key(2689)) VARIANT_BOOL ksCurvePartArrayDefinition::GetkeepAngle ( );
__declspec(implementation_key(2690)) void ksCurvePartArrayDefinition::PutkeepAngle ( VARIANT_BOOL _val );
__declspec(implementation_key(2691)) VARIANT_BOOL ksCurvePartArrayDefinition::GetfullCurve ( );
__declspec(implementation_key(2692)) void ksCurvePartArrayDefinition::PutfullCurve ( VARIANT_BOOL _val );
__declspec(implementation_key(2693)) VARIANT_BOOL ksCurvePartArrayDefinition::Getsence ( );
__declspec(implementation_key(2694)) void ksCurvePartArrayDefinition::Putsence ( VARIANT_BOOL _val );
__declspec(implementation_key(2695)) IDispatchPtr ksDerivativePartArrayDefinition::PartArray ( );
__declspec(implementation_key(2696)) IDispatchPtr ksDerivativePartArrayDefinition::GetDeriv ( );
__declspec(implementation_key(2697)) VARIANT_BOOL ksDerivativePartArrayDefinition::SetDeriv ( IDispatch * deriv );
__declspec(implementation_key(2698)) IDispatchPtr ksDerivativePartArrayDefinition::DeletedCollection ( );
__declspec(implementation_key(2699)) VARIANT_BOOL ksAxis2PlanesDefinition::SetPlane ( long number, IDispatch * plane );
__declspec(implementation_key(2700)) IDispatchPtr ksAxis2PlanesDefinition::GetPlane ( long number );
__declspec(implementation_key(2701)) IDispatchPtr ksAxis2PlanesDefinition::GetCurve3D ( );
__declspec(implementation_key(2702)) VARIANT_BOOL ksAxisOperationsDefinition::SetOperation ( IDispatch * plane );
__declspec(implementation_key(2703)) IDispatchPtr ksAxisOperationsDefinition::GetOperation ( );
__declspec(implementation_key(2704)) IDispatchPtr ksAxisOperationsDefinition::GetCurve3D ( );
__declspec(implementation_key(2705)) VARIANT_BOOL ksAxis2PointsDefinition::SetPoint ( long number, IDispatch * point );
__declspec(implementation_key(2706)) IDispatchPtr ksAxis2PointsDefinition::GetPoint ( long number );
__declspec(implementation_key(2707)) IDispatchPtr ksAxis2PointsDefinition::GetCurve3D ( );
__declspec(implementation_key(2708)) VARIANT_BOOL ksAxisEdgeDefinition::SetEdge ( IDispatch * edge );
__declspec(implementation_key(2709)) IDispatchPtr ksAxisEdgeDefinition::GetEdge ( );
__declspec(implementation_key(2710)) IDispatchPtr ksAxisEdgeDefinition::GetCurve3D ( );
__declspec(implementation_key(2711)) IDispatchPtr ksMeshCopyDefinition::OperationArray ( );
__declspec(implementation_key(2712)) VARIANT_BOOL ksMeshCopyDefinition::GetCopyParamAlongAxis ( VARIANT_BOOL firstAxis, double * angle, long * count, double * step, VARIANT_BOOL * factor );
__declspec(implementation_key(2713)) VARIANT_BOOL ksMeshCopyDefinition::SetCopyParamAlongAxis ( VARIANT_BOOL firstAxis, double angle, long count, double step, VARIANT_BOOL factor );
__declspec(implementation_key(2714)) IDispatchPtr ksMeshCopyDefinition::DeletedCollection ( );
__declspec(implementation_key(2715)) IDispatchPtr ksMeshCopyDefinition::GetAxis1 ( );
__declspec(implementation_key(2716)) VARIANT_BOOL ksMeshCopyDefinition::SetAxis1 ( IDispatch * axis );
__declspec(implementation_key(2717)) IDispatchPtr ksMeshCopyDefinition::GetAxis2 ( );
__declspec(implementation_key(2718)) VARIANT_BOOL ksMeshCopyDefinition::SetAxis2 ( IDispatch * axis );
__declspec(implementation_key(2719)) double ksMeshCopyDefinition::Getangle1 ( );
__declspec(implementation_key(2720)) void ksMeshCopyDefinition::Putangle1 ( double _val );
__declspec(implementation_key(2721)) long ksMeshCopyDefinition::Getcount1 ( );
__declspec(implementation_key(2722)) void ksMeshCopyDefinition::Putcount1 ( long _val );
__declspec(implementation_key(2723)) double ksMeshCopyDefinition::Getstep1 ( );
__declspec(implementation_key(2724)) void ksMeshCopyDefinition::Putstep1 ( double _val );
__declspec(implementation_key(2725)) VARIANT_BOOL ksMeshCopyDefinition::Getfactor1 ( );
__declspec(implementation_key(2726)) void ksMeshCopyDefinition::Putfactor1 ( VARIANT_BOOL _val );
__declspec(implementation_key(2727)) double ksMeshCopyDefinition::Getangle2 ( );
__declspec(implementation_key(2728)) void ksMeshCopyDefinition::Putangle2 ( double _val );
__declspec(implementation_key(2729)) long ksMeshCopyDefinition::Getcount2 ( );
__declspec(implementation_key(2730)) void ksMeshCopyDefinition::Putcount2 ( long _val );
__declspec(implementation_key(2731)) double ksMeshCopyDefinition::Getstep2 ( );
__declspec(implementation_key(2732)) void ksMeshCopyDefinition::Putstep2 ( double _val );
__declspec(implementation_key(2733)) VARIANT_BOOL ksMeshCopyDefinition::Getfactor2 ( );
__declspec(implementation_key(2734)) void ksMeshCopyDefinition::Putfactor2 ( VARIANT_BOOL _val );
__declspec(implementation_key(2735)) VARIANT_BOOL ksMeshCopyDefinition::GetinsideFlag ( );
__declspec(implementation_key(2736)) void ksMeshCopyDefinition::PutinsideFlag ( VARIANT_BOOL _val );
__declspec(implementation_key(2737)) VARIANT_BOOL ksMeshCopyDefinition::GetgeomArray ( );
__declspec(implementation_key(2738)) void ksMeshCopyDefinition::PutgeomArray ( VARIANT_BOOL _val );
__declspec(implementation_key(2739)) IDispatchPtr ksCircularCopyDefinition::GetOperationArray ( );
__declspec(implementation_key(2740)) IDispatchPtr ksCircularCopyDefinition::GetAxis ( );
__declspec(implementation_key(2741)) VARIANT_BOOL ksCircularCopyDefinition::SetAxis ( IDispatch * axis );
__declspec(implementation_key(2742)) VARIANT_BOOL ksCircularCopyDefinition::GetCopyParamAlongDir ( long * count, double * step, VARIANT_BOOL * factor, VARIANT_BOOL dir );
__declspec(implementation_key(2743)) VARIANT_BOOL ksCircularCopyDefinition::SetCopyParamAlongDir ( long count, double step, VARIANT_BOOL factor, VARIANT_BOOL dir );
__declspec(implementation_key(2744)) IDispatchPtr ksCircularCopyDefinition::DeletedCollection ( );
__declspec(implementation_key(2745)) long ksCircularCopyDefinition::Getcount1 ( );
__declspec(implementation_key(2746)) void ksCircularCopyDefinition::Putcount1 ( long _val );
__declspec(implementation_key(2747)) double ksCircularCopyDefinition::Getstep1 ( );
__declspec(implementation_key(2748)) void ksCircularCopyDefinition::Putstep1 ( double _val );
__declspec(implementation_key(2749)) VARIANT_BOOL ksCircularCopyDefinition::Getfactor1 ( );
__declspec(implementation_key(2750)) void ksCircularCopyDefinition::Putfactor1 ( VARIANT_BOOL _val );
__declspec(implementation_key(2751)) long ksCircularCopyDefinition::Getcount2 ( );
__declspec(implementation_key(2752)) void ksCircularCopyDefinition::Putcount2 ( long _val );
__declspec(implementation_key(2753)) double ksCircularCopyDefinition::Getstep2 ( );
__declspec(implementation_key(2754)) void ksCircularCopyDefinition::Putstep2 ( double _val );
__declspec(implementation_key(2755)) VARIANT_BOOL ksCircularCopyDefinition::Getfactor2 ( );
__declspec(implementation_key(2756)) void ksCircularCopyDefinition::Putfactor2 ( VARIANT_BOOL _val );
__declspec(implementation_key(2757)) VARIANT_BOOL ksCircularCopyDefinition::Getinverce ( );
__declspec(implementation_key(2758)) void ksCircularCopyDefinition::Putinverce ( VARIANT_BOOL _val );
__declspec(implementation_key(2759)) VARIANT_BOOL ksCircularCopyDefinition::GetgeomArray ( );
__declspec(implementation_key(2760)) void ksCircularCopyDefinition::PutgeomArray ( VARIANT_BOOL _val );
__declspec(implementation_key(2761)) IDispatchPtr ksCurveCopyDefinition::OperationArray ( );
__declspec(implementation_key(2762)) IDispatchPtr ksCurveCopyDefinition::CurveArray ( );
__declspec(implementation_key(2763)) IDispatchPtr ksCurveCopyDefinition::DeletedCollection ( );
__declspec(implementation_key(2764)) long ksCurveCopyDefinition::Getcount ( );
__declspec(implementation_key(2765)) void ksCurveCopyDefinition::Putcount ( long _val );
__declspec(implementation_key(2766)) double ksCurveCopyDefinition::Getstep ( );
__declspec(implementation_key(2767)) void ksCurveCopyDefinition::Putstep ( double _val );
__declspec(implementation_key(2768)) VARIANT_BOOL ksCurveCopyDefinition::Getfactor ( );
__declspec(implementation_key(2769)) void ksCurveCopyDefinition::Putfactor ( VARIANT_BOOL _val );
__declspec(implementation_key(2770)) VARIANT_BOOL ksCurveCopyDefinition::GetkeepAngle ( );
__declspec(implementation_key(2771)) void ksCurveCopyDefinition::PutkeepAngle ( VARIANT_BOOL _val );
__declspec(implementation_key(2772)) VARIANT_BOOL ksCurveCopyDefinition::GetfullCurve ( );
__declspec(implementation_key(2773)) void ksCurveCopyDefinition::PutfullCurve ( VARIANT_BOOL _val );
__declspec(implementation_key(2774)) VARIANT_BOOL ksCurveCopyDefinition::Getsence ( );
__declspec(implementation_key(2775)) void ksCurveCopyDefinition::Putsence ( VARIANT_BOOL _val );
__declspec(implementation_key(2776)) VARIANT_BOOL ksCurveCopyDefinition::GetgeomArray ( );
__declspec(implementation_key(2777)) void ksCurveCopyDefinition::PutgeomArray ( VARIANT_BOOL _val );
__declspec(implementation_key(2778)) IDispatchPtr ksMirrorCopyDefinition::GetOperationArray ( );
__declspec(implementation_key(2779)) IDispatchPtr ksMirrorCopyDefinition::GetPlane ( );
__declspec(implementation_key(2780)) VARIANT_BOOL ksMirrorCopyDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(2781)) IDispatchPtr ksMirrorCopyAllDefinition::GetPlane ( );
__declspec(implementation_key(2782)) VARIANT_BOOL ksMirrorCopyAllDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(2783)) IDispatchPtr ksMirrorCopyAllDefinition::ChooseBodies ( );
__declspec(implementation_key(2784)) IDispatchPtr ksConicSpiralDefinition::GetPlane ( );
__declspec(implementation_key(2785)) VARIANT_BOOL ksConicSpiralDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(2786)) VARIANT_BOOL ksConicSpiralDefinition::GetLocation ( double * x, double * y );
__declspec(implementation_key(2787)) VARIANT_BOOL ksConicSpiralDefinition::SetLocation ( double x, double y );
__declspec(implementation_key(2788)) IDispatchPtr ksConicSpiralDefinition::GetHeightObject ( );
__declspec(implementation_key(2789)) VARIANT_BOOL ksConicSpiralDefinition::SetHeightObject ( IDispatch * heightObject );
__declspec(implementation_key(2790)) IDispatchPtr ksConicSpiralDefinition::GetInitialDiamObject ( );
__declspec(implementation_key(2791)) VARIANT_BOOL ksConicSpiralDefinition::SetInitialDiamObject ( IDispatch * initialDiamObject );
__declspec(implementation_key(2792)) IDispatchPtr ksConicSpiralDefinition::GetTerminalDiamObject ( );
__declspec(implementation_key(2793)) VARIANT_BOOL ksConicSpiralDefinition::SetTerminalDiamObject ( IDispatch * terminalDiamObject );
__declspec(implementation_key(2794)) IDispatchPtr ksConicSpiralDefinition::GetSketch ( );
__declspec(implementation_key(2795)) IDispatchPtr ksConicSpiralDefinition::GetCurve3D ( );
__declspec(implementation_key(2796)) double ksConicSpiralDefinition::Getturn ( );
__declspec(implementation_key(2797)) void ksConicSpiralDefinition::Putturn ( double _val );
__declspec(implementation_key(2798)) double ksConicSpiralDefinition::Getstep ( );
__declspec(implementation_key(2799)) void ksConicSpiralDefinition::Putstep ( double _val );
__declspec(implementation_key(2800)) VARIANT_BOOL ksConicSpiralDefinition::GetturnDir ( );
__declspec(implementation_key(2801)) void ksConicSpiralDefinition::PutturnDir ( VARIANT_BOOL _val );
__declspec(implementation_key(2802)) short ksConicSpiralDefinition::GetbuildMode ( );
__declspec(implementation_key(2803)) void ksConicSpiralDefinition::PutbuildMode ( short _val );
__declspec(implementation_key(2804)) VARIANT_BOOL ksConicSpiralDefinition::GetbuildDir ( );
__declspec(implementation_key(2805)) void ksConicSpiralDefinition::PutbuildDir ( VARIANT_BOOL _val );
__declspec(implementation_key(2806)) double ksConicSpiralDefinition::Getheight ( );
__declspec(implementation_key(2807)) void ksConicSpiralDefinition::Putheight ( double _val );
__declspec(implementation_key(2808)) short ksConicSpiralDefinition::GetheightType ( );
__declspec(implementation_key(2809)) void ksConicSpiralDefinition::PutheightType ( short _val );
__declspec(implementation_key(2810)) double ksConicSpiralDefinition::GetheightAdd ( );
__declspec(implementation_key(2811)) void ksConicSpiralDefinition::PutheightAdd ( double _val );
__declspec(implementation_key(2812)) VARIANT_BOOL ksConicSpiralDefinition::GetheightAddHow ( );
__declspec(implementation_key(2813)) void ksConicSpiralDefinition::PutheightAddHow ( VARIANT_BOOL _val );
__declspec(implementation_key(2814)) double ksConicSpiralDefinition::GetinitialDiam ( );
__declspec(implementation_key(2815)) void ksConicSpiralDefinition::PutinitialDiam ( double _val );
__declspec(implementation_key(2816)) short ksConicSpiralDefinition::GetinitialDiamType ( );
__declspec(implementation_key(2817)) void ksConicSpiralDefinition::PutinitialDiamType ( short _val );
__declspec(implementation_key(2818)) double ksConicSpiralDefinition::GetterminalDiam ( );
__declspec(implementation_key(2819)) void ksConicSpiralDefinition::PutterminalDiam ( double _val );
__declspec(implementation_key(2820)) short ksConicSpiralDefinition::GetterminalDiamType ( );
__declspec(implementation_key(2821)) void ksConicSpiralDefinition::PutterminalDiamType ( short _val );
__declspec(implementation_key(2822)) VARIANT_BOOL ksConicSpiralDefinition::GettiltAngleHow ( );
__declspec(implementation_key(2823)) void ksConicSpiralDefinition::PuttiltAngleHow ( VARIANT_BOOL _val );
__declspec(implementation_key(2824)) double ksConicSpiralDefinition::GetfirstAngle ( );
__declspec(implementation_key(2825)) void ksConicSpiralDefinition::PutfirstAngle ( double _val );
__declspec(implementation_key(2826)) double ksConicSpiralDefinition::GettiltAngle ( );
__declspec(implementation_key(2827)) void ksConicSpiralDefinition::PuttiltAngle ( double _val );
__declspec(implementation_key(2828)) IDispatchPtr ksCylindricSpiralDefinition::GetPlane ( );
__declspec(implementation_key(2829)) VARIANT_BOOL ksCylindricSpiralDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(2830)) VARIANT_BOOL ksCylindricSpiralDefinition::GetLocation ( double * x, double * y );
__declspec(implementation_key(2831)) VARIANT_BOOL ksCylindricSpiralDefinition::SetLocation ( double x, double y );
__declspec(implementation_key(2832)) IDispatchPtr ksCylindricSpiralDefinition::GetHeightObject ( );
__declspec(implementation_key(2833)) VARIANT_BOOL ksCylindricSpiralDefinition::SetHeightObject ( IDispatch * heightObject );
__declspec(implementation_key(2834)) IDispatchPtr ksCylindricSpiralDefinition::GetDiamObject ( );
__declspec(implementation_key(2835)) VARIANT_BOOL ksCylindricSpiralDefinition::SetDiamObject ( IDispatch * diamObject );
__declspec(implementation_key(2836)) IDispatchPtr ksCylindricSpiralDefinition::GetSketch ( );
__declspec(implementation_key(2837)) IDispatchPtr ksCylindricSpiralDefinition::GetCurve3D ( );
__declspec(implementation_key(2838)) double ksCylindricSpiralDefinition::Getturn ( );
__declspec(implementation_key(2839)) void ksCylindricSpiralDefinition::Putturn ( double _val );
__declspec(implementation_key(2840)) double ksCylindricSpiralDefinition::Getstep ( );
__declspec(implementation_key(2841)) void ksCylindricSpiralDefinition::Putstep ( double _val );
__declspec(implementation_key(2842)) VARIANT_BOOL ksCylindricSpiralDefinition::GetturnDir ( );
__declspec(implementation_key(2843)) void ksCylindricSpiralDefinition::PutturnDir ( VARIANT_BOOL _val );
__declspec(implementation_key(2844)) short ksCylindricSpiralDefinition::GetbuildMode ( );
__declspec(implementation_key(2845)) void ksCylindricSpiralDefinition::PutbuildMode ( short _val );
__declspec(implementation_key(2846)) VARIANT_BOOL ksCylindricSpiralDefinition::GetbuildDir ( );
__declspec(implementation_key(2847)) void ksCylindricSpiralDefinition::PutbuildDir ( VARIANT_BOOL _val );
__declspec(implementation_key(2848)) double ksCylindricSpiralDefinition::Getheight ( );
__declspec(implementation_key(2849)) void ksCylindricSpiralDefinition::Putheight ( double _val );
__declspec(implementation_key(2850)) short ksCylindricSpiralDefinition::GetheightType ( );
__declspec(implementation_key(2851)) void ksCylindricSpiralDefinition::PutheightType ( short _val );
__declspec(implementation_key(2852)) double ksCylindricSpiralDefinition::GetheightAdd ( );
__declspec(implementation_key(2853)) void ksCylindricSpiralDefinition::PutheightAdd ( double _val );
__declspec(implementation_key(2854)) VARIANT_BOOL ksCylindricSpiralDefinition::GetheightAddHow ( );
__declspec(implementation_key(2855)) void ksCylindricSpiralDefinition::PutheightAddHow ( VARIANT_BOOL _val );
__declspec(implementation_key(2856)) double ksCylindricSpiralDefinition::Getdiam ( );
__declspec(implementation_key(2857)) void ksCylindricSpiralDefinition::Putdiam ( double _val );
__declspec(implementation_key(2858)) short ksCylindricSpiralDefinition::GetdiamType ( );
__declspec(implementation_key(2859)) void ksCylindricSpiralDefinition::PutdiamType ( short _val );
__declspec(implementation_key(2860)) double ksCylindricSpiralDefinition::GetfirstAngle ( );
__declspec(implementation_key(2861)) void ksCylindricSpiralDefinition::PutfirstAngle ( double _val );
__declspec(implementation_key(2862)) long ksPolyLineDefinition::GetCountVertex ( );
__declspec(implementation_key(2863)) VARIANT_BOOL ksPolyLineDefinition::AddVertex ( double x, double y, double z, double radius );
__declspec(implementation_key(2864)) VARIANT_BOOL ksPolyLineDefinition::InsertVertex ( long index, double x, double y, double z, double radius );
__declspec(implementation_key(2865)) VARIANT_BOOL ksPolyLineDefinition::DeleteVertex ( long index );
__declspec(implementation_key(2866)) VARIANT_BOOL ksPolyLineDefinition::GetParamVertex ( long index, double * x, double * y, double * z, double * radius );
__declspec(implementation_key(2867)) VARIANT_BOOL ksPolyLineDefinition::Flush ( );
__declspec(implementation_key(2868)) VARIANT_BOOL ksPolyLineDefinition::ReadFromFile ( _bstr_t fileName );
__declspec(implementation_key(2869)) VARIANT_BOOL ksPolyLineDefinition::WriteToFile ( _bstr_t fileName );
__declspec(implementation_key(2870)) IDispatchPtr ksPolyLineDefinition::EdgeCollection ( );
__declspec(implementation_key(2871)) ksPolyLineVertexParamPtr ksPolyLineDefinition::AddPointWithParams ( long index );
__declspec(implementation_key(2872)) ksPolyLineVertexParamPtr ksPolyLineDefinition::GetPointParams ( long index );
__declspec(implementation_key(2873)) IDispatchPtr ksPolyLineDefinition::GetCurve3D ( );
__declspec(implementation_key(2874)) VARIANT_BOOL ksPolyLineDefinition::Getclosed ( );
__declspec(implementation_key(2875)) void ksPolyLineDefinition::Putclosed ( VARIANT_BOOL _val );
__declspec(implementation_key(2876)) VARIANT_BOOL ksPolyLineDefinition::GetvertexVisible ( );
__declspec(implementation_key(2877)) void ksPolyLineDefinition::PutvertexVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(2878)) VARIANT_BOOL ksPolyLineVertexParam::GetParamVertex ( double * x, double * y, double * z, double * radius );
__declspec(implementation_key(2879)) VARIANT_BOOL ksPolyLineVertexParam::SetParamVertex ( double x, double y, double z, double radius );
__declspec(implementation_key(2880)) VARIANT_BOOL ksPolyLineVertexParam::SetParamByVertex ( struct ksEntity * vertex, double radius );
__declspec(implementation_key(2881)) VARIANT_BOOL ksPolyLineVertexParam::GetParamByDistance ( double * distance, double * radius );
__declspec(implementation_key(2882)) VARIANT_BOOL ksPolyLineVertexParam::SetParamByDistance ( double distance, double radius );
__declspec(implementation_key(2883)) ksEntityPtr ksPolyLineVertexParam::GetBuildingObject ( );
__declspec(implementation_key(2884)) VARIANT_BOOL ksPolyLineVertexParam::SetBuildingObject ( struct ksEntity * object );
__declspec(implementation_key(2885)) ksEntityPtr ksPolyLineVertexParam::GetAssociation ( );
__declspec(implementation_key(2886)) VARIANT_BOOL ksPolyLineVertexParam::SetAssociation ( struct ksEntity * vertex );
__declspec(implementation_key(2887)) ksEntityPtr ksPolyLineVertexParam::GetVertex ( );
__declspec(implementation_key(2888)) int ksPolyLineVertexParam::GetIndex ( );
__declspec(implementation_key(2889)) long ksPolyLineVertexParam::GetbuildingType ( );
__declspec(implementation_key(2890)) void ksPolyLineVertexParam::PutbuildingType ( long _val );
__declspec(implementation_key(2891)) long ksSplineDefinition::GetCountVertex ( );
__declspec(implementation_key(2892)) VARIANT_BOOL ksSplineDefinition::AddVertex ( double x, double y, double z, double radius );
__declspec(implementation_key(2893)) VARIANT_BOOL ksSplineDefinition::InsertVertex ( long index, double x, double y, double z, double weight );
__declspec(implementation_key(2894)) VARIANT_BOOL ksSplineDefinition::DeleteVertex ( long index );
__declspec(implementation_key(2895)) VARIANT_BOOL ksSplineDefinition::GetParamVertex ( long index, double * x, double * y, double * z, double * weight );
__declspec(implementation_key(2896)) VARIANT_BOOL ksSplineDefinition::Flush ( );
__declspec(implementation_key(2897)) VARIANT_BOOL ksSplineDefinition::ReadFromFile ( _bstr_t fileName );
__declspec(implementation_key(2898)) VARIANT_BOOL ksSplineDefinition::WriteToFile ( _bstr_t fileName );
__declspec(implementation_key(2899)) VARIANT_BOOL ksSplineDefinition::AddVertexAndAssociation ( long index, IDispatch * obj, double weight );
__declspec(implementation_key(2900)) VARIANT_BOOL ksSplineDefinition::SetAssociation ( long index, IDispatch * obj );
__declspec(implementation_key(2901)) IDispatchPtr ksSplineDefinition::GetAssociation ( long index );
__declspec(implementation_key(2902)) VARIANT_BOOL ksSplineDefinition::Getclosed ( );
__declspec(implementation_key(2903)) void ksSplineDefinition::Putclosed ( VARIANT_BOOL _val );
__declspec(implementation_key(2904)) VARIANT_BOOL ksSplineDefinition::GetsplineOnPoles ( );
__declspec(implementation_key(2905)) void ksSplineDefinition::PutsplineOnPoles ( VARIANT_BOOL _val );
__declspec(implementation_key(2906)) long ksSplineDefinition::Getdegree ( );
__declspec(implementation_key(2907)) void ksSplineDefinition::Putdegree ( long _val );
__declspec(implementation_key(2908)) VARIANT_BOOL ksBaseExtrusionDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(2909)) IDispatchPtr ksBaseExtrusionDefinition::GetSketch ( );
__declspec(implementation_key(2910)) VARIANT_BOOL ksBaseExtrusionDefinition::GetSideParam ( VARIANT_BOOL side1, short * type, double * depth, double * draftValue, VARIANT_BOOL * draftOutward );
__declspec(implementation_key(2911)) VARIANT_BOOL ksBaseExtrusionDefinition::SetSideParam ( VARIANT_BOOL side1, short type, double depth, double draftValue, VARIANT_BOOL draftOutward );
__declspec(implementation_key(2912)) VARIANT_BOOL ksBaseExtrusionDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(2913)) VARIANT_BOOL ksBaseExtrusionDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(2914)) IDispatchPtr ksBaseExtrusionDefinition::ThinParam ( );
__declspec(implementation_key(2915)) IDispatchPtr ksBaseExtrusionDefinition::ExtrusionParam ( );
__declspec(implementation_key(2916)) IDispatchPtr ksBaseExtrusionDefinition::GetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2917)) VARIANT_BOOL ksBaseExtrusionDefinition::SetDepthObject ( VARIANT_BOOL normal, IDispatch * obj );
__declspec(implementation_key(2918)) VARIANT_BOOL ksBaseExtrusionDefinition::ResetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2919)) short ksBaseExtrusionDefinition::GetdirectionType ( );
__declspec(implementation_key(2920)) void ksBaseExtrusionDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(2921)) VARIANT_BOOL ksBossExtrusionDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(2922)) IDispatchPtr ksBossExtrusionDefinition::GetSketch ( );
__declspec(implementation_key(2923)) VARIANT_BOOL ksBossExtrusionDefinition::GetSideParam ( VARIANT_BOOL side1, short * type, double * depth, double * draftValue, VARIANT_BOOL * draftOutward );
__declspec(implementation_key(2924)) VARIANT_BOOL ksBossExtrusionDefinition::SetSideParam ( VARIANT_BOOL side1, short type, double depth, double draftValue, VARIANT_BOOL draftOutward );
__declspec(implementation_key(2925)) VARIANT_BOOL ksBossExtrusionDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(2926)) VARIANT_BOOL ksBossExtrusionDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(2927)) IDispatchPtr ksBossExtrusionDefinition::ThinParam ( );
__declspec(implementation_key(2928)) IDispatchPtr ksBossExtrusionDefinition::ExtrusionParam ( );
__declspec(implementation_key(2929)) IDispatchPtr ksBossExtrusionDefinition::GetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2930)) VARIANT_BOOL ksBossExtrusionDefinition::SetDepthObject ( VARIANT_BOOL normal, IDispatch * obj );
__declspec(implementation_key(2931)) VARIANT_BOOL ksBossExtrusionDefinition::ResetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2932)) IDispatchPtr ksBossExtrusionDefinition::ChooseBodies ( );
__declspec(implementation_key(2933)) IDispatchPtr ksBossExtrusionDefinition::ChooseParts ( );
__declspec(implementation_key(2934)) short ksBossExtrusionDefinition::GetdirectionType ( );
__declspec(implementation_key(2935)) void ksBossExtrusionDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(2936)) long ksBossExtrusionDefinition::GetchooseType ( );
__declspec(implementation_key(2937)) void ksBossExtrusionDefinition::PutchooseType ( long _val );
__declspec(implementation_key(2938)) VARIANT_BOOL ksCutExtrusionDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(2939)) IDispatchPtr ksCutExtrusionDefinition::GetSketch ( );
__declspec(implementation_key(2940)) VARIANT_BOOL ksCutExtrusionDefinition::GetSideParam ( VARIANT_BOOL side1, short * type, double * depth, double * draftValue, VARIANT_BOOL * draftOutward );
__declspec(implementation_key(2941)) VARIANT_BOOL ksCutExtrusionDefinition::SetSideParam ( VARIANT_BOOL side1, short type, double depth, double draftValue, VARIANT_BOOL draftOutward );
__declspec(implementation_key(2942)) VARIANT_BOOL ksCutExtrusionDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(2943)) VARIANT_BOOL ksCutExtrusionDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(2944)) IDispatchPtr ksCutExtrusionDefinition::ThinParam ( );
__declspec(implementation_key(2945)) IDispatchPtr ksCutExtrusionDefinition::ExtrusionParam ( );
__declspec(implementation_key(2946)) IDispatchPtr ksCutExtrusionDefinition::GetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2947)) VARIANT_BOOL ksCutExtrusionDefinition::SetDepthObject ( VARIANT_BOOL normal, IDispatch * obj );
__declspec(implementation_key(2948)) VARIANT_BOOL ksCutExtrusionDefinition::ResetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2949)) IDispatchPtr ksCutExtrusionDefinition::ChooseBodies ( );
__declspec(implementation_key(2950)) IDispatchPtr ksCutExtrusionDefinition::ChooseParts ( );
__declspec(implementation_key(2951)) short ksCutExtrusionDefinition::GetdirectionType ( );
__declspec(implementation_key(2952)) void ksCutExtrusionDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(2953)) VARIANT_BOOL ksCutExtrusionDefinition::Getcut ( );
__declspec(implementation_key(2954)) void ksCutExtrusionDefinition::Putcut ( VARIANT_BOOL _val );
__declspec(implementation_key(2955)) long ksCutExtrusionDefinition::GetchooseType ( );
__declspec(implementation_key(2956)) void ksCutExtrusionDefinition::PutchooseType ( long _val );
__declspec(implementation_key(2957)) VARIANT_BOOL ksExtrusionSurfaceDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(2958)) IDispatchPtr ksExtrusionSurfaceDefinition::GetSketch ( );
__declspec(implementation_key(2959)) VARIANT_BOOL ksExtrusionSurfaceDefinition::GetSideParam ( VARIANT_BOOL side1, short * type, double * depth, double * draftValue, VARIANT_BOOL * draftOutward );
__declspec(implementation_key(2960)) VARIANT_BOOL ksExtrusionSurfaceDefinition::SetSideParam ( VARIANT_BOOL side1, short type, double depth, double draftValue, VARIANT_BOOL draftOutward );
__declspec(implementation_key(2961)) IDispatchPtr ksExtrusionSurfaceDefinition::ExtrusionParam ( );
__declspec(implementation_key(2962)) IDispatchPtr ksExtrusionSurfaceDefinition::GetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2963)) VARIANT_BOOL ksExtrusionSurfaceDefinition::SetDepthObject ( VARIANT_BOOL normal, IDispatch * obj );
__declspec(implementation_key(2964)) VARIANT_BOOL ksExtrusionSurfaceDefinition::ResetDepthObject ( VARIANT_BOOL normal );
__declspec(implementation_key(2965)) short ksExtrusionSurfaceDefinition::GetdirectionType ( );
__declspec(implementation_key(2966)) void ksExtrusionSurfaceDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(2967)) short ksExtrusionSurfaceDefinition::GetclosedShell ( );
__declspec(implementation_key(2968)) void ksExtrusionSurfaceDefinition::PutclosedShell ( short _val );
__declspec(implementation_key(2969)) VARIANT_BOOL ksFaceDefinition::IsPlanar ( );
__declspec(implementation_key(2970)) VARIANT_BOOL ksFaceDefinition::IsCone ( );
__declspec(implementation_key(2971)) VARIANT_BOOL ksFaceDefinition::IsCylinder ( );
__declspec(implementation_key(2972)) VARIANT_BOOL ksFaceDefinition::GetCylinderParam ( double * h, double * r );
__declspec(implementation_key(2973)) IDispatchPtr ksFaceDefinition::GetOwnerEntity ( );
__declspec(implementation_key(2974)) IDispatchPtr ksFaceDefinition::GetSurface ( );
__declspec(implementation_key(2975)) IDispatchPtr ksFaceDefinition::LoopCollection ( );
__declspec(implementation_key(2976)) VARIANT_BOOL ksFaceDefinition::GetnormalOrientation ( );
__declspec(implementation_key(2977)) VARIANT_BOOL ksFaceDefinition::IsConnectedWith ( IDispatch * faceDefinition );
__declspec(implementation_key(2978)) IDispatchPtr ksFaceDefinition::ConnectedFaceCollection ( );
__declspec(implementation_key(2979)) IDispatchPtr ksFaceDefinition::EdgeCollection ( );
__declspec(implementation_key(2980)) IDispatchPtr ksFaceDefinition::GetNextFace ( );
__declspec(implementation_key(2981)) VARIANT_BOOL ksFaceDefinition::IsTorus ( );
__declspec(implementation_key(2982)) VARIANT_BOOL ksFaceDefinition::IsSphere ( );
__declspec(implementation_key(2983)) VARIANT_BOOL ksFaceDefinition::IsNurbsSurface ( );
__declspec(implementation_key(2984)) VARIANT_BOOL ksFaceDefinition::IsRevolved ( );
__declspec(implementation_key(2985)) VARIANT_BOOL ksFaceDefinition::IsSwept ( );
__declspec(implementation_key(2986)) IDispatchPtr ksFaceDefinition::GetTessellation ( );
__declspec(implementation_key(2987)) double ksFaceDefinition::GetArea ( unsigned long bitVector );
__declspec(implementation_key(2988)) IDispatchPtr ksFaceDefinition::GetEntity ( );
__declspec(implementation_key(2989)) VARIANT_BOOL ksFaceDefinition::IsValid ( );
__declspec(implementation_key(2990)) double ksFaceDefinition::GetAreaEx ( unsigned long bitVector, double angleTolerance );
__declspec(implementation_key(2991)) VARIANT_BOOL ksEdgeDefinition::IsStraight ( );
__declspec(implementation_key(2992)) IDispatchPtr ksEdgeDefinition::GetOwnerEntity ( );
__declspec(implementation_key(2993)) IDispatchPtr ksEdgeDefinition::GetCurve3D ( );
__declspec(implementation_key(2994)) IDispatchPtr ksEdgeDefinition::GetAdjacentFace ( VARIANT_BOOL facePlus );
__declspec(implementation_key(2995)) IDispatchPtr ksEdgeDefinition::GetVertex ( VARIANT_BOOL start );
__declspec(implementation_key(2996)) IDispatchPtr ksEdgeDefinition::EdgeCollection ( VARIANT_BOOL begin );
__declspec(implementation_key(2997)) IDispatchPtr ksEdgeDefinition::OrientedEdgeCollection ( );
__declspec(implementation_key(2998)) VARIANT_BOOL ksEdgeDefinition::IsArc ( );
__declspec(implementation_key(2999)) VARIANT_BOOL ksEdgeDefinition::IsCircle ( );
__declspec(implementation_key(3000)) VARIANT_BOOL ksEdgeDefinition::IsEllipse ( );
__declspec(implementation_key(3001)) VARIANT_BOOL ksEdgeDefinition::IsNurbs ( );
__declspec(implementation_key(3002)) VARIANT_BOOL ksEdgeDefinition::IsPeriodic ( );
__declspec(implementation_key(3003)) double ksEdgeDefinition::GetLength ( unsigned long bitVector );
__declspec(implementation_key(3004)) IDispatchPtr ksEdgeDefinition::GetEntity ( );
__declspec(implementation_key(3005)) VARIANT_BOOL ksEdgeDefinition::IsValid ( );
__declspec(implementation_key(3006)) VARIANT_BOOL ksEdgeDefinition::GetsketchEdge ( );
__declspec(implementation_key(3007)) VARIANT_BOOL ksEdgeDefinition::IsEllipseArc ( );
__declspec(implementation_key(3008)) VARIANT_BOOL ksEdgeDefinition::IsPlanar ( );
__declspec(implementation_key(3009)) VARIANT_BOOL ksEdgeDefinition::IsLineSeg ( );
__declspec(implementation_key(3010)) VARIANT_BOOL ksChamferDefinition::GetChamferParam ( VARIANT_BOOL * transfer, double * distance1, double * distance2 );
__declspec(implementation_key(3011)) VARIANT_BOOL ksChamferDefinition::SetChamferParam ( VARIANT_BOOL transfer, double distance1, double distance2 );
__declspec(implementation_key(3012)) IDispatchPtr ksChamferDefinition::array ( );
__declspec(implementation_key(3013)) VARIANT_BOOL ksChamferDefinition::Gettangent ( );
__declspec(implementation_key(3014)) void ksChamferDefinition::Puttangent ( VARIANT_BOOL _val );
__declspec(implementation_key(3015)) IDispatchPtr ksFilletDefinition::array ( );
__declspec(implementation_key(3016)) double ksFilletDefinition::Getradius ( );
__declspec(implementation_key(3017)) void ksFilletDefinition::Putradius ( double _val );
__declspec(implementation_key(3018)) VARIANT_BOOL ksFilletDefinition::Gettangent ( );
__declspec(implementation_key(3019)) void ksFilletDefinition::Puttangent ( VARIANT_BOOL _val );
__declspec(implementation_key(3020)) VARIANT_BOOL ksBaseLoftDefinition::GetLoftParam ( VARIANT_BOOL * closed, VARIANT_BOOL * flipVertex, VARIANT_BOOL * autoPath );
__declspec(implementation_key(3021)) VARIANT_BOOL ksBaseLoftDefinition::SetLoftParam ( VARIANT_BOOL closed, VARIANT_BOOL flipVertex, VARIANT_BOOL autoPath );
__declspec(implementation_key(3022)) VARIANT_BOOL ksBaseLoftDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3023)) VARIANT_BOOL ksBaseLoftDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3024)) IDispatchPtr ksBaseLoftDefinition::ThinParam ( );
__declspec(implementation_key(3025)) IDispatchPtr ksBaseLoftDefinition::Sketchs ( );
__declspec(implementation_key(3026)) VARIANT_BOOL ksBossLoftDefinition::GetLoftParam ( VARIANT_BOOL * closed, VARIANT_BOOL * flipVertex, VARIANT_BOOL * autoPath );
__declspec(implementation_key(3027)) VARIANT_BOOL ksBossLoftDefinition::SetLoftParam ( VARIANT_BOOL closed, VARIANT_BOOL flipVertex, VARIANT_BOOL autoPath );
__declspec(implementation_key(3028)) VARIANT_BOOL ksBossLoftDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3029)) VARIANT_BOOL ksBossLoftDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3030)) IDispatchPtr ksBossLoftDefinition::ThinParam ( );
__declspec(implementation_key(3031)) IDispatchPtr ksBossLoftDefinition::Sketchs ( );
__declspec(implementation_key(3032)) IDispatchPtr ksBossLoftDefinition::ChooseBodies ( );
__declspec(implementation_key(3033)) IDispatchPtr ksBossLoftDefinition::GetDirectionalLine ( );
__declspec(implementation_key(3034)) VARIANT_BOOL ksBossLoftDefinition::SetDirectionalLine ( IDispatch * sketch );
__declspec(implementation_key(3035)) IDispatchPtr ksBossLoftDefinition::ChooseParts ( );
__declspec(implementation_key(3036)) long ksBossLoftDefinition::GetchooseType ( );
__declspec(implementation_key(3037)) void ksBossLoftDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3038)) VARIANT_BOOL ksCutLoftDefinition::GetLoftParam ( VARIANT_BOOL * closed, VARIANT_BOOL * flipVertex, VARIANT_BOOL * autoPath );
__declspec(implementation_key(3039)) VARIANT_BOOL ksCutLoftDefinition::SetLoftParam ( VARIANT_BOOL closed, VARIANT_BOOL flipVertex, VARIANT_BOOL autoPath );
__declspec(implementation_key(3040)) VARIANT_BOOL ksCutLoftDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3041)) VARIANT_BOOL ksCutLoftDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3042)) IDispatchPtr ksCutLoftDefinition::ThinParam ( );
__declspec(implementation_key(3043)) IDispatchPtr ksCutLoftDefinition::Sketchs ( );
__declspec(implementation_key(3044)) IDispatchPtr ksCutLoftDefinition::ChooseBodies ( );
__declspec(implementation_key(3045)) IDispatchPtr ksCutLoftDefinition::GetDirectionalLine ( );
__declspec(implementation_key(3046)) VARIANT_BOOL ksCutLoftDefinition::SetDirectionalLine ( IDispatch * sketch );
__declspec(implementation_key(3047)) IDispatchPtr ksCutLoftDefinition::ChooseParts ( );
__declspec(implementation_key(3048)) VARIANT_BOOL ksCutLoftDefinition::Getcut ( );
__declspec(implementation_key(3049)) void ksCutLoftDefinition::Putcut ( VARIANT_BOOL _val );
__declspec(implementation_key(3050)) long ksCutLoftDefinition::GetchooseType ( );
__declspec(implementation_key(3051)) void ksCutLoftDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3052)) VARIANT_BOOL ksLoftSurfaceDefinition::GetLoftParam ( VARIANT_BOOL * closed, VARIANT_BOOL * flipVertex, VARIANT_BOOL * autoPath );
__declspec(implementation_key(3053)) VARIANT_BOOL ksLoftSurfaceDefinition::SetLoftParam ( VARIANT_BOOL closed, VARIANT_BOOL flipVertex, VARIANT_BOOL autoPath );
__declspec(implementation_key(3054)) IDispatchPtr ksLoftSurfaceDefinition::Sketchs ( );
__declspec(implementation_key(3055)) IDispatchPtr ksLoftSurfaceDefinition::GetDirectionalLine ( );
__declspec(implementation_key(3056)) VARIANT_BOOL ksLoftSurfaceDefinition::SetDirectionalLine ( IDispatch * sketch );
__declspec(implementation_key(3057)) short ksLoftSurfaceDefinition::GetclosedShell ( );
__declspec(implementation_key(3058)) void ksLoftSurfaceDefinition::PutclosedShell ( short _val );
__declspec(implementation_key(3059)) IDispatchPtr ksInclineDefinition::FaceArray ( );
__declspec(implementation_key(3060)) IDispatchPtr ksInclineDefinition::GetPlane ( );
__declspec(implementation_key(3061)) VARIANT_BOOL ksInclineDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3062)) double ksInclineDefinition::Getangle ( );
__declspec(implementation_key(3063)) void ksInclineDefinition::Putangle ( double _val );
__declspec(implementation_key(3064)) VARIANT_BOOL ksInclineDefinition::Getdirection ( );
__declspec(implementation_key(3065)) void ksInclineDefinition::Putdirection ( VARIANT_BOOL _val );
__declspec(implementation_key(3066)) IDispatchPtr ksShellDefinition::FaceArray ( );
__declspec(implementation_key(3067)) double ksShellDefinition::Getthickness ( );
__declspec(implementation_key(3068)) void ksShellDefinition::Putthickness ( double _val );
__declspec(implementation_key(3069)) VARIANT_BOOL ksShellDefinition::GetthinType ( );
__declspec(implementation_key(3070)) void ksShellDefinition::PutthinType ( VARIANT_BOOL _val );
__declspec(implementation_key(3071)) VARIANT_BOOL ksBaseEvolutionDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3072)) IDispatchPtr ksBaseEvolutionDefinition::GetSketch ( );
__declspec(implementation_key(3073)) IDispatchPtr ksBaseEvolutionDefinition::PathPartArray ( );
__declspec(implementation_key(3074)) VARIANT_BOOL ksBaseEvolutionDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3075)) VARIANT_BOOL ksBaseEvolutionDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3076)) IDispatchPtr ksBaseEvolutionDefinition::ThinParam ( );
__declspec(implementation_key(3077)) double ksBaseEvolutionDefinition::GetPathLength ( unsigned long bitVector );
__declspec(implementation_key(3078)) short ksBaseEvolutionDefinition::GetsketchShiftType ( );
__declspec(implementation_key(3079)) void ksBaseEvolutionDefinition::PutsketchShiftType ( short _val );
__declspec(implementation_key(3080)) VARIANT_BOOL ksBossEvolutionDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3081)) IDispatchPtr ksBossEvolutionDefinition::GetSketch ( );
__declspec(implementation_key(3082)) IDispatchPtr ksBossEvolutionDefinition::PathPartArray ( );
__declspec(implementation_key(3083)) VARIANT_BOOL ksBossEvolutionDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3084)) VARIANT_BOOL ksBossEvolutionDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3085)) IDispatchPtr ksBossEvolutionDefinition::ThinParam ( );
__declspec(implementation_key(3086)) IDispatchPtr ksBossEvolutionDefinition::ChooseBodies ( );
__declspec(implementation_key(3087)) double ksBossEvolutionDefinition::GetPathLength ( unsigned long bitVector );
__declspec(implementation_key(3088)) IDispatchPtr ksBossEvolutionDefinition::ChooseParts ( );
__declspec(implementation_key(3089)) short ksBossEvolutionDefinition::GetsketchShiftType ( );
__declspec(implementation_key(3090)) void ksBossEvolutionDefinition::PutsketchShiftType ( short _val );
__declspec(implementation_key(3091)) long ksBossEvolutionDefinition::GetchooseType ( );
__declspec(implementation_key(3092)) void ksBossEvolutionDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3093)) VARIANT_BOOL ksCutEvolutionDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3094)) IDispatchPtr ksCutEvolutionDefinition::GetSketch ( );
__declspec(implementation_key(3095)) IDispatchPtr ksCutEvolutionDefinition::PathPartArray ( );
__declspec(implementation_key(3096)) VARIANT_BOOL ksCutEvolutionDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3097)) VARIANT_BOOL ksCutEvolutionDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3098)) IDispatchPtr ksCutEvolutionDefinition::ThinParam ( );
__declspec(implementation_key(3099)) IDispatchPtr ksCutEvolutionDefinition::ChooseBodies ( );
__declspec(implementation_key(3100)) IDispatchPtr ksCutEvolutionDefinition::ChooseParts ( );
__declspec(implementation_key(3101)) double ksCutEvolutionDefinition::GetPathLength ( unsigned long bitVector );
__declspec(implementation_key(3102)) short ksCutEvolutionDefinition::GetsketchShiftType ( );
__declspec(implementation_key(3103)) void ksCutEvolutionDefinition::PutsketchShiftType ( short _val );
__declspec(implementation_key(3104)) VARIANT_BOOL ksCutEvolutionDefinition::Getcut ( );
__declspec(implementation_key(3105)) void ksCutEvolutionDefinition::Putcut ( VARIANT_BOOL _val );
__declspec(implementation_key(3106)) long ksCutEvolutionDefinition::GetchooseType ( );
__declspec(implementation_key(3107)) void ksCutEvolutionDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3108)) VARIANT_BOOL ksEvolutionSurfaceDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3109)) IDispatchPtr ksEvolutionSurfaceDefinition::GetSketch ( );
__declspec(implementation_key(3110)) IDispatchPtr ksEvolutionSurfaceDefinition::PathPartArray ( );
__declspec(implementation_key(3111)) double ksEvolutionSurfaceDefinition::GetPathLength ( unsigned long bitVector );
__declspec(implementation_key(3112)) short ksEvolutionSurfaceDefinition::GetsketchShiftType ( );
__declspec(implementation_key(3113)) void ksEvolutionSurfaceDefinition::PutsketchShiftType ( short _val );
__declspec(implementation_key(3114)) VARIANT_BOOL ksEvolutionSurfaceDefinition::GetclosedShell ( );
__declspec(implementation_key(3115)) void ksEvolutionSurfaceDefinition::PutclosedShell ( VARIANT_BOOL _val );
__declspec(implementation_key(3116)) IDispatchPtr ksRibDefinition::GetSketch ( );
__declspec(implementation_key(3117)) VARIANT_BOOL ksRibDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3118)) VARIANT_BOOL ksRibDefinition::GetThinParam ( short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3119)) VARIANT_BOOL ksRibDefinition::SetThinParam ( short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3120)) IDispatchPtr ksRibDefinition::ThinParam ( );
__declspec(implementation_key(3121)) long ksRibDefinition::Getindex ( );
__declspec(implementation_key(3122)) void ksRibDefinition::Putindex ( long _val );
__declspec(implementation_key(3123)) double ksRibDefinition::Getangle ( );
__declspec(implementation_key(3124)) void ksRibDefinition::Putangle ( double _val );
__declspec(implementation_key(3125)) long ksRibDefinition::Getside ( );
__declspec(implementation_key(3126)) void ksRibDefinition::Putside ( long _val );
__declspec(implementation_key(3127)) IDispatchPtr ksCutByPlaneDefinition::GetPlane ( );
__declspec(implementation_key(3128)) VARIANT_BOOL ksCutByPlaneDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3129)) IDispatchPtr ksCutByPlaneDefinition::ChooseBodies ( );
__declspec(implementation_key(3130)) IDispatchPtr ksCutByPlaneDefinition::ChooseParts ( );
__declspec(implementation_key(3131)) VARIANT_BOOL ksCutByPlaneDefinition::Getdirection ( );
__declspec(implementation_key(3132)) void ksCutByPlaneDefinition::Putdirection ( VARIANT_BOOL _val );
__declspec(implementation_key(3133)) long ksCutByPlaneDefinition::GetchooseType ( );
__declspec(implementation_key(3134)) void ksCutByPlaneDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3135)) IDispatchPtr ksCutBySketchDefinition::GetSketch ( );
__declspec(implementation_key(3136)) VARIANT_BOOL ksCutBySketchDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3137)) IDispatchPtr ksCutBySketchDefinition::ChooseBodies ( );
__declspec(implementation_key(3138)) IDispatchPtr ksCutBySketchDefinition::ChooseParts ( );
__declspec(implementation_key(3139)) VARIANT_BOOL ksCutBySketchDefinition::Getdirection ( );
__declspec(implementation_key(3140)) void ksCutBySketchDefinition::Putdirection ( VARIANT_BOOL _val );
__declspec(implementation_key(3141)) long ksCutBySketchDefinition::GetchooseType ( );
__declspec(implementation_key(3142)) void ksCutBySketchDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3143)) VARIANT_BOOL ksPlaneOffsetDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3144)) IDispatchPtr ksPlaneOffsetDefinition::GetPlane ( );
__declspec(implementation_key(3145)) IDispatchPtr ksPlaneOffsetDefinition::GetSurface ( );
__declspec(implementation_key(3146)) double ksPlaneOffsetDefinition::Getoffset ( );
__declspec(implementation_key(3147)) void ksPlaneOffsetDefinition::Putoffset ( double _val );
__declspec(implementation_key(3148)) VARIANT_BOOL ksPlaneOffsetDefinition::Getdirection ( );
__declspec(implementation_key(3149)) void ksPlaneOffsetDefinition::Putdirection ( VARIANT_BOOL _val );
__declspec(implementation_key(3150)) VARIANT_BOOL ksPlaneAngleDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3151)) IDispatchPtr ksPlaneAngleDefinition::GetPlane ( );
__declspec(implementation_key(3152)) VARIANT_BOOL ksPlaneAngleDefinition::SetAxis ( IDispatch * axis );
__declspec(implementation_key(3153)) IDispatchPtr ksPlaneAngleDefinition::GetAxis ( );
__declspec(implementation_key(3154)) IDispatchPtr ksPlaneAngleDefinition::GetSurface ( );
__declspec(implementation_key(3155)) double ksPlaneAngleDefinition::Getangle ( );
__declspec(implementation_key(3156)) void ksPlaneAngleDefinition::Putangle ( double _val );
__declspec(implementation_key(3157)) VARIANT_BOOL ksPlane3PointsDefinition::SetPoint ( long number, IDispatch * point );
__declspec(implementation_key(3158)) IDispatchPtr ksPlane3PointsDefinition::GetPoint ( long number );
__declspec(implementation_key(3159)) IDispatchPtr ksPlane3PointsDefinition::GetSurface ( );
__declspec(implementation_key(3160)) VARIANT_BOOL ksPlaneNormalToSurfaceDefinition::SetFace ( IDispatch * face );
__declspec(implementation_key(3161)) IDispatchPtr ksPlaneNormalToSurfaceDefinition::GetFace ( );
__declspec(implementation_key(3162)) VARIANT_BOOL ksPlaneNormalToSurfaceDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3163)) IDispatchPtr ksPlaneNormalToSurfaceDefinition::GetPlane ( );
__declspec(implementation_key(3164)) IDispatchPtr ksPlaneNormalToSurfaceDefinition::GetSurface ( );
__declspec(implementation_key(3165)) double ksPlaneNormalToSurfaceDefinition::Getangle ( );
__declspec(implementation_key(3166)) void ksPlaneNormalToSurfaceDefinition::Putangle ( double _val );
__declspec(implementation_key(3167)) double ksPlaneNormalToSurfaceDefinition::GetautoBuilding ( );
__declspec(implementation_key(3168)) void ksPlaneNormalToSurfaceDefinition::PutautoBuilding ( double _val );
__declspec(implementation_key(3169)) VARIANT_BOOL ksPlaneTangentToSurfaceDefinition::SetFace ( IDispatch * face );
__declspec(implementation_key(3170)) IDispatchPtr ksPlaneTangentToSurfaceDefinition::GetFace ( );
__declspec(implementation_key(3171)) VARIANT_BOOL ksPlaneTangentToSurfaceDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3172)) IDispatchPtr ksPlaneTangentToSurfaceDefinition::GetPlane ( );
__declspec(implementation_key(3173)) IDispatchPtr ksPlaneTangentToSurfaceDefinition::GetSurface ( );
__declspec(implementation_key(3174)) short ksPlaneTangentToSurfaceDefinition::GetchoosePlane ( );
__declspec(implementation_key(3175)) void ksPlaneTangentToSurfaceDefinition::PutchoosePlane ( short _val );
__declspec(implementation_key(3176)) double ksPlaneTangentToSurfaceDefinition::Getangle ( );
__declspec(implementation_key(3177)) void ksPlaneTangentToSurfaceDefinition::Putangle ( double _val );
__declspec(implementation_key(3178)) VARIANT_BOOL ksPlaneEdgePointDefinition::SetEdge ( IDispatch * edge );
__declspec(implementation_key(3179)) IDispatchPtr ksPlaneEdgePointDefinition::GetEdge ( );
__declspec(implementation_key(3180)) VARIANT_BOOL ksPlaneEdgePointDefinition::SetPoint ( IDispatch * point );
__declspec(implementation_key(3181)) IDispatchPtr ksPlaneEdgePointDefinition::GetPoint ( );
__declspec(implementation_key(3182)) IDispatchPtr ksPlaneEdgePointDefinition::GetSurface ( );
__declspec(implementation_key(3183)) VARIANT_BOOL ksPlaneParallelDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3184)) IDispatchPtr ksPlaneParallelDefinition::GetPlane ( );
__declspec(implementation_key(3185)) VARIANT_BOOL ksPlaneParallelDefinition::SetPoint ( IDispatch * point );
__declspec(implementation_key(3186)) IDispatchPtr ksPlaneParallelDefinition::GetPoint ( );
__declspec(implementation_key(3187)) IDispatchPtr ksPlaneParallelDefinition::GetSurface ( );
__declspec(implementation_key(3188)) VARIANT_BOOL ksPlanePerpendicularDefinition::SetEdge ( IDispatch * edge );
__declspec(implementation_key(3189)) IDispatchPtr ksPlanePerpendicularDefinition::GetEdge ( );
__declspec(implementation_key(3190)) VARIANT_BOOL ksPlanePerpendicularDefinition::SetPoint ( IDispatch * point );
__declspec(implementation_key(3191)) IDispatchPtr ksPlanePerpendicularDefinition::GetPoint ( );
__declspec(implementation_key(3192)) IDispatchPtr ksPlanePerpendicularDefinition::GetSurface ( );
__declspec(implementation_key(3193)) VARIANT_BOOL ksPlaneLineToEdgeDefinition::SetEdgeFirst ( IDispatch * edge1 );
__declspec(implementation_key(3194)) IDispatchPtr ksPlaneLineToEdgeDefinition::GetEdgeFirst ( );
__declspec(implementation_key(3195)) VARIANT_BOOL ksPlaneLineToEdgeDefinition::SetEdgeSecond ( IDispatch * edge2 );
__declspec(implementation_key(3196)) IDispatchPtr ksPlaneLineToEdgeDefinition::GetEdgeSecond ( );
__declspec(implementation_key(3197)) IDispatchPtr ksPlaneLineToEdgeDefinition::GetSurface ( );
__declspec(implementation_key(3198)) VARIANT_BOOL ksPlaneLineToEdgeDefinition::Getparallel ( );
__declspec(implementation_key(3199)) void ksPlaneLineToEdgeDefinition::Putparallel ( VARIANT_BOOL _val );
__declspec(implementation_key(3200)) VARIANT_BOOL ksPlaneLineToPlaneDefinition::SetEdge ( IDispatch * edge );
__declspec(implementation_key(3201)) IDispatchPtr ksPlaneLineToPlaneDefinition::GetEdge ( );
__declspec(implementation_key(3202)) VARIANT_BOOL ksPlaneLineToPlaneDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3203)) IDispatchPtr ksPlaneLineToPlaneDefinition::GetPlane ( );
__declspec(implementation_key(3204)) IDispatchPtr ksPlaneLineToPlaneDefinition::GetSurface ( );
__declspec(implementation_key(3205)) VARIANT_BOOL ksPlaneLineToPlaneDefinition::Getparallel ( );
__declspec(implementation_key(3206)) void ksPlaneLineToPlaneDefinition::Putparallel ( VARIANT_BOOL _val );
__declspec(implementation_key(3207)) VARIANT_BOOL ksThinParam::Getthin ( );
__declspec(implementation_key(3208)) void ksThinParam::Putthin ( VARIANT_BOOL _val );
__declspec(implementation_key(3209)) short ksThinParam::GetthinType ( );
__declspec(implementation_key(3210)) void ksThinParam::PutthinType ( short _val );
__declspec(implementation_key(3211)) double ksThinParam::GetnormalThickness ( );
__declspec(implementation_key(3212)) void ksThinParam::PutnormalThickness ( double _val );
__declspec(implementation_key(3213)) double ksThinParam::GetreverseThickness ( );
__declspec(implementation_key(3214)) void ksThinParam::PutreverseThickness ( double _val );
__declspec(implementation_key(3215)) short ksExtrusionParam::GettypeNormal ( );
__declspec(implementation_key(3216)) void ksExtrusionParam::PuttypeNormal ( short _val );
__declspec(implementation_key(3217)) double ksExtrusionParam::GetdepthNormal ( );
__declspec(implementation_key(3218)) void ksExtrusionParam::PutdepthNormal ( double _val );
__declspec(implementation_key(3219)) double ksExtrusionParam::GetdraftValueNormal ( );
__declspec(implementation_key(3220)) void ksExtrusionParam::PutdraftValueNormal ( double _val );
__declspec(implementation_key(3221)) VARIANT_BOOL ksExtrusionParam::GetdraftOutwardNormal ( );
__declspec(implementation_key(3222)) void ksExtrusionParam::PutdraftOutwardNormal ( VARIANT_BOOL _val );
__declspec(implementation_key(3223)) short ksExtrusionParam::GettypeReverse ( );
__declspec(implementation_key(3224)) void ksExtrusionParam::PuttypeReverse ( short _val );
__declspec(implementation_key(3225)) double ksExtrusionParam::GetdepthReverse ( );
__declspec(implementation_key(3226)) void ksExtrusionParam::PutdepthReverse ( double _val );
__declspec(implementation_key(3227)) double ksExtrusionParam::GetdraftValueReverse ( );
__declspec(implementation_key(3228)) void ksExtrusionParam::PutdraftValueReverse ( double _val );
__declspec(implementation_key(3229)) VARIANT_BOOL ksExtrusionParam::GetdraftOutwardReverse ( );
__declspec(implementation_key(3230)) void ksExtrusionParam::PutdraftOutwardReverse ( VARIANT_BOOL _val );
__declspec(implementation_key(3231)) long ksExtrusionParam::Getdirection ( );
__declspec(implementation_key(3232)) void ksExtrusionParam::Putdirection ( long _val );
__declspec(implementation_key(3233)) double ksRotatedParam::GetangleNormal ( );
__declspec(implementation_key(3234)) void ksRotatedParam::PutangleNormal ( double _val );
__declspec(implementation_key(3235)) double ksRotatedParam::GetangleReverse ( );
__declspec(implementation_key(3236)) void ksRotatedParam::PutangleReverse ( double _val );
__declspec(implementation_key(3237)) VARIANT_BOOL ksRotatedParam::GettoroidShape ( );
__declspec(implementation_key(3238)) void ksRotatedParam::PuttoroidShape ( VARIANT_BOOL _val );
__declspec(implementation_key(3239)) long ksRotatedParam::Getdirection ( );
__declspec(implementation_key(3240)) void ksRotatedParam::Putdirection ( long _val );
__declspec(implementation_key(3241)) VARIANT_BOOL ksColorParam::Clear ( );
__declspec(implementation_key(3242)) long ksColorParam::Getcolor ( );
__declspec(implementation_key(3243)) void ksColorParam::Putcolor ( long _val );
__declspec(implementation_key(3244)) double ksColorParam::Getambient ( );
__declspec(implementation_key(3245)) void ksColorParam::Putambient ( double _val );
__declspec(implementation_key(3246)) double ksColorParam::Getdiffuse ( );
__declspec(implementation_key(3247)) void ksColorParam::Putdiffuse ( double _val );
__declspec(implementation_key(3248)) double ksColorParam::Getspecularity ( );
__declspec(implementation_key(3249)) void ksColorParam::Putspecularity ( double _val );
__declspec(implementation_key(3250)) double ksColorParam::Getshininess ( );
__declspec(implementation_key(3251)) void ksColorParam::Putshininess ( double _val );
__declspec(implementation_key(3252)) double ksColorParam::Gettransparency ( );
__declspec(implementation_key(3253)) void ksColorParam::Puttransparency ( double _val );
__declspec(implementation_key(3254)) double ksColorParam::Getemission ( );
__declspec(implementation_key(3255)) void ksColorParam::Putemission ( double _val );
__declspec(implementation_key(3256)) long ksColorParam::GetuseColor ( );
__declspec(implementation_key(3257)) void ksColorParam::PutuseColor ( long _val );
__declspec(implementation_key(3258)) VARIANT_BOOL ksBaseRotatedDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3259)) IDispatchPtr ksBaseRotatedDefinition::GetSketch ( );
__declspec(implementation_key(3260)) VARIANT_BOOL ksBaseRotatedDefinition::GetSideParam ( VARIANT_BOOL side1, double * angle );
__declspec(implementation_key(3261)) VARIANT_BOOL ksBaseRotatedDefinition::SetSideParam ( VARIANT_BOOL side1, double angle );
__declspec(implementation_key(3262)) VARIANT_BOOL ksBaseRotatedDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3263)) VARIANT_BOOL ksBaseRotatedDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3264)) IDispatchPtr ksBaseRotatedDefinition::ThinParam ( );
__declspec(implementation_key(3265)) IDispatchPtr ksBaseRotatedDefinition::RotatedParam ( );
__declspec(implementation_key(3266)) short ksBaseRotatedDefinition::GetdirectionType ( );
__declspec(implementation_key(3267)) void ksBaseRotatedDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(3268)) VARIANT_BOOL ksBaseRotatedDefinition::GettoroidShapeType ( );
__declspec(implementation_key(3269)) void ksBaseRotatedDefinition::PuttoroidShapeType ( VARIANT_BOOL _val );
__declspec(implementation_key(3270)) VARIANT_BOOL ksBossRotatedDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3271)) IDispatchPtr ksBossRotatedDefinition::GetSketch ( );
__declspec(implementation_key(3272)) VARIANT_BOOL ksBossRotatedDefinition::GetSideParam ( VARIANT_BOOL side1, double * angle );
__declspec(implementation_key(3273)) VARIANT_BOOL ksBossRotatedDefinition::SetSideParam ( VARIANT_BOOL side1, double angle );
__declspec(implementation_key(3274)) VARIANT_BOOL ksBossRotatedDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3275)) VARIANT_BOOL ksBossRotatedDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3276)) IDispatchPtr ksBossRotatedDefinition::ThinParam ( );
__declspec(implementation_key(3277)) IDispatchPtr ksBossRotatedDefinition::RotatedParam ( );
__declspec(implementation_key(3278)) IDispatchPtr ksBossRotatedDefinition::ChooseBodies ( );
__declspec(implementation_key(3279)) IDispatchPtr ksBossRotatedDefinition::ChooseParts ( );
__declspec(implementation_key(3280)) short ksBossRotatedDefinition::GetdirectionType ( );
__declspec(implementation_key(3281)) void ksBossRotatedDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(3282)) VARIANT_BOOL ksBossRotatedDefinition::GettoroidShapeType ( );
__declspec(implementation_key(3283)) void ksBossRotatedDefinition::PuttoroidShapeType ( VARIANT_BOOL _val );
__declspec(implementation_key(3284)) long ksBossRotatedDefinition::GetchooseType ( );
__declspec(implementation_key(3285)) void ksBossRotatedDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3286)) VARIANT_BOOL ksCutRotatedDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3287)) IDispatchPtr ksCutRotatedDefinition::GetSketch ( );
__declspec(implementation_key(3288)) VARIANT_BOOL ksCutRotatedDefinition::GetSideParam ( VARIANT_BOOL side1, double * angle );
__declspec(implementation_key(3289)) VARIANT_BOOL ksCutRotatedDefinition::SetSideParam ( VARIANT_BOOL side1, double angle );
__declspec(implementation_key(3290)) VARIANT_BOOL ksCutRotatedDefinition::GetThinParam ( VARIANT_BOOL * thin, short * thinType, double * normalThickness, double * reverseTthickness );
__declspec(implementation_key(3291)) VARIANT_BOOL ksCutRotatedDefinition::SetThinParam ( VARIANT_BOOL thin, short thinType, double normalThickness, double reverseThickness );
__declspec(implementation_key(3292)) IDispatchPtr ksCutRotatedDefinition::ThinParam ( );
__declspec(implementation_key(3293)) IDispatchPtr ksCutRotatedDefinition::RotatedParam ( );
__declspec(implementation_key(3294)) IDispatchPtr ksCutRotatedDefinition::ChooseBodies ( );
__declspec(implementation_key(3295)) IDispatchPtr ksCutRotatedDefinition::ChooseParts ( );
__declspec(implementation_key(3296)) short ksCutRotatedDefinition::GetdirectionType ( );
__declspec(implementation_key(3297)) void ksCutRotatedDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(3298)) VARIANT_BOOL ksCutRotatedDefinition::GettoroidShapeType ( );
__declspec(implementation_key(3299)) void ksCutRotatedDefinition::PuttoroidShapeType ( VARIANT_BOOL _val );
__declspec(implementation_key(3300)) VARIANT_BOOL ksCutRotatedDefinition::Getcut ( );
__declspec(implementation_key(3301)) void ksCutRotatedDefinition::Putcut ( VARIANT_BOOL _val );
__declspec(implementation_key(3302)) long ksCutRotatedDefinition::GetchooseType ( );
__declspec(implementation_key(3303)) void ksCutRotatedDefinition::PutchooseType ( long _val );
__declspec(implementation_key(3304)) VARIANT_BOOL ksRotatedSurfaceDefinition::SetSketch ( IDispatch * sketch );
__declspec(implementation_key(3305)) IDispatchPtr ksRotatedSurfaceDefinition::GetSketch ( );
__declspec(implementation_key(3306)) VARIANT_BOOL ksRotatedSurfaceDefinition::GetSideParam ( VARIANT_BOOL side1, double * angle );
__declspec(implementation_key(3307)) VARIANT_BOOL ksRotatedSurfaceDefinition::SetSideParam ( VARIANT_BOOL side1, double angle );
__declspec(implementation_key(3308)) IDispatchPtr ksRotatedSurfaceDefinition::RotatedParam ( );
__declspec(implementation_key(3309)) short ksRotatedSurfaceDefinition::GetdirectionType ( );
__declspec(implementation_key(3310)) void ksRotatedSurfaceDefinition::PutdirectionType ( short _val );
__declspec(implementation_key(3311)) VARIANT_BOOL ksRotatedSurfaceDefinition::GettoroidShapeType ( );
__declspec(implementation_key(3312)) void ksRotatedSurfaceDefinition::PuttoroidShapeType ( VARIANT_BOOL _val );
__declspec(implementation_key(3313)) short ksRotatedSurfaceDefinition::GetclosedShell ( );
__declspec(implementation_key(3314)) void ksRotatedSurfaceDefinition::PutclosedShell ( short _val );
__declspec(implementation_key(3315)) VARIANT_BOOL ksSketchDefinition::EndEdit ( );
__declspec(implementation_key(3316)) VARIANT_BOOL ksSketchDefinition::SetPlane ( IDispatch * plane );
__declspec(implementation_key(3317)) IDispatchPtr ksSketchDefinition::GetPlane ( );
__declspec(implementation_key(3318)) VARIANT_BOOL ksSketchDefinition::GetLocation ( double * x, double * y );
__declspec(implementation_key(3319)) VARIANT_BOOL ksSketchDefinition::SetLocation ( double x, double y );
__declspec(implementation_key(3320)) VARIANT_BOOL ksSketchDefinition::GetLoftPoint ( double * x, double * y );
__declspec(implementation_key(3321)) VARIANT_BOOL ksSketchDefinition::UserSetPlacement ( _bstr_t prompt );
__declspec(implementation_key(3322)) IDispatchPtr ksSketchDefinition::BeginEdit ( );
__declspec(implementation_key(3323)) long ksSketchDefinition::AddProjectionOf ( IDispatch * entity );
__declspec(implementation_key(3324)) VARIANT_BOOL ksSketchDefinition::SetLoftPoint ( double x, double y );
__declspec(implementation_key(3325)) IDispatchPtr ksSketchDefinition::GetSurface ( );
__declspec(implementation_key(3326)) IDispatchPtr ksSketchDefinition::BeginEditEx ( long readOnly );
__declspec(implementation_key(3327)) double ksSketchDefinition::Getangle ( );
__declspec(implementation_key(3328)) void ksSketchDefinition::Putangle ( double _val );
__declspec(implementation_key(3329)) VARIANT_BOOL ksRasterFormatParam::Init ( );
__declspec(implementation_key(3330)) short ksRasterFormatParam::Getformat ( );
__declspec(implementation_key(3331)) void ksRasterFormatParam::Putformat ( short _val );
__declspec(implementation_key(3332)) short ksRasterFormatParam::GetcolorBPP ( );
__declspec(implementation_key(3333)) void ksRasterFormatParam::PutcolorBPP ( short _val );
__declspec(implementation_key(3334)) VARIANT_BOOL ksRasterFormatParam::GetgreyScale ( );
__declspec(implementation_key(3335)) void ksRasterFormatParam::PutgreyScale ( VARIANT_BOOL _val );
__declspec(implementation_key(3336)) long ksRasterFormatParam::GetextResolution ( );
__declspec(implementation_key(3337)) void ksRasterFormatParam::PutextResolution ( long _val );
__declspec(implementation_key(3338)) double ksRasterFormatParam::GetextScale ( );
__declspec(implementation_key(3339)) void ksRasterFormatParam::PutextScale ( double _val );
__declspec(implementation_key(3340)) short ksRasterFormatParam::GetcolorType ( );
__declspec(implementation_key(3341)) void ksRasterFormatParam::PutcolorType ( short _val );
__declspec(implementation_key(3342)) VARIANT_BOOL ksRasterFormatParam::GetonlyThinLine ( );
__declspec(implementation_key(3343)) void ksRasterFormatParam::PutonlyThinLine ( VARIANT_BOOL _val );
__declspec(implementation_key(3344)) _bstr_t ksRasterFormatParam::Getpages ( );
__declspec(implementation_key(3345)) void ksRasterFormatParam::Putpages ( _bstr_t _val );
__declspec(implementation_key(3346)) short ksRasterFormatParam::GetrangeIndex ( );
__declspec(implementation_key(3347)) void ksRasterFormatParam::PutrangeIndex ( short _val );
__declspec(implementation_key(3348)) VARIANT_BOOL ksRasterFormatParam::GetmultiPageOutput ( );
__declspec(implementation_key(3349)) void ksRasterFormatParam::PutmultiPageOutput ( VARIANT_BOOL _val );
__declspec(implementation_key(3350)) VARIANT_BOOL ksRasterFormatParam::GetsaveWorkArea ( );
__declspec(implementation_key(3351)) void ksRasterFormatParam::PutsaveWorkArea ( VARIANT_BOOL _val );
__declspec(implementation_key(3352)) VARIANT_BOOL ksRasterFormatParam::GetreturnResultAsArrayBytes ( );
__declspec(implementation_key(3353)) void ksRasterFormatParam::PutreturnResultAsArrayBytes ( VARIANT_BOOL _val );
__declspec(implementation_key(3354)) _variant_t ksRasterFormatParam::GetresultArrayBytes ( );
__declspec(implementation_key(3355)) void ksRasterFormatParam::PutresultArrayBytes ( const _variant_t & _val );
__declspec(implementation_key(3356)) VARIANT_BOOL ksAdditionFormatParam::Init ( );
__declspec(implementation_key(3357)) long ksAdditionFormatParam::GetObjectsOptions ( long option );
__declspec(implementation_key(3358)) long ksAdditionFormatParam::SetObjectsOptions ( long option, long set );
__declspec(implementation_key(3359)) IDispatchPtr ksAdditionFormatParam::GetPlacement ( );
__declspec(implementation_key(3360)) long ksAdditionFormatParam::SetPlacement ( IDispatch * p );
__declspec(implementation_key(3361)) long ksAdditionFormatParam::SaveConfigurationFile ( _bstr_t fileName );
__declspec(implementation_key(3362)) long ksAdditionFormatParam::LoadConfigurationFile ( _bstr_t fileName );
__declspec(implementation_key(3363)) short ksAdditionFormatParam::Getformat ( );
__declspec(implementation_key(3364)) void ksAdditionFormatParam::Putformat ( short _val );
__declspec(implementation_key(3365)) VARIANT_BOOL ksAdditionFormatParam::GetformatBinary ( );
__declspec(implementation_key(3366)) void ksAdditionFormatParam::PutformatBinary ( VARIANT_BOOL _val );
__declspec(implementation_key(3367)) VARIANT_BOOL ksAdditionFormatParam::GettopolgyIncluded ( );
__declspec(implementation_key(3368)) void ksAdditionFormatParam::PuttopolgyIncluded ( VARIANT_BOOL _val );
__declspec(implementation_key(3369)) long ksAdditionFormatParam::GettextExportForm ( );
__declspec(implementation_key(3370)) void ksAdditionFormatParam::PuttextExportForm ( long _val );
__declspec(implementation_key(3371)) VARIANT_BOOL ksAdditionFormatParam::GetcreateLocalComponents ( );
__declspec(implementation_key(3372)) void ksAdditionFormatParam::PutcreateLocalComponents ( VARIANT_BOOL _val );
__declspec(implementation_key(3373)) long ksAdditionFormatParam::GetstepType ( );
__declspec(implementation_key(3374)) void ksAdditionFormatParam::PutstepType ( long _val );
__declspec(implementation_key(3375)) double ksAdditionFormatParam::Getstep ( );
__declspec(implementation_key(3376)) void ksAdditionFormatParam::Putstep ( double _val );
__declspec(implementation_key(3377)) double ksAdditionFormatParam::Getangle ( );
__declspec(implementation_key(3378)) void ksAdditionFormatParam::Putangle ( double _val );
__declspec(implementation_key(3379)) double ksAdditionFormatParam::Getlength ( );
__declspec(implementation_key(3380)) void ksAdditionFormatParam::Putlength ( double _val );
__declspec(implementation_key(3381)) long ksAdditionFormatParam::GetmaxTeselationCellCount ( );
__declspec(implementation_key(3382)) void ksAdditionFormatParam::PutmaxTeselationCellCount ( long _val );
__declspec(implementation_key(3383)) long ksAdditionFormatParam::GetlengthUnits ( );
__declspec(implementation_key(3384)) void ksAdditionFormatParam::PutlengthUnits ( long _val );
__declspec(implementation_key(3385)) VARIANT_BOOL ksAdditionFormatParam::GetstitchSurfaces ( );
__declspec(implementation_key(3386)) void ksAdditionFormatParam::PutstitchSurfaces ( VARIANT_BOOL _val );
__declspec(implementation_key(3387)) double ksAdditionFormatParam::GetstitchPrecision ( );
__declspec(implementation_key(3388)) void ksAdditionFormatParam::PutstitchPrecision ( double _val );
__declspec(implementation_key(3389)) _bstr_t ksAdditionFormatParam::Getauthor ( );
__declspec(implementation_key(3390)) void ksAdditionFormatParam::Putauthor ( _bstr_t _val );
__declspec(implementation_key(3391)) _bstr_t ksAdditionFormatParam::Getorganization ( );
__declspec(implementation_key(3392)) void ksAdditionFormatParam::Putorganization ( _bstr_t _val );
__declspec(implementation_key(3393)) _bstr_t ksAdditionFormatParam::Getcomment ( );
__declspec(implementation_key(3394)) void ksAdditionFormatParam::Putcomment ( _bstr_t _val );
__declspec(implementation_key(3395)) _bstr_t ksAdditionFormatParam::Getpassword ( );
__declspec(implementation_key(3396)) void ksAdditionFormatParam::Putpassword ( _bstr_t _val );
__declspec(implementation_key(3397)) VARIANT_BOOL ksAdditionFormatParam::GetneedCreateComponentsFiles ( );
__declspec(implementation_key(3398)) void ksAdditionFormatParam::PutneedCreateComponentsFiles ( VARIANT_BOOL _val );
__declspec(implementation_key(3399)) VARIANT_BOOL ksAdditionFormatParam::GetsaveResultDocument ( );
__declspec(implementation_key(3400)) void ksAdditionFormatParam::PutsaveResultDocument ( VARIANT_BOOL _val );
__declspec(implementation_key(3401)) _variant_t ksAdditionFormatParam::Getconfiguration ( );
__declspec(implementation_key(3402)) void ksAdditionFormatParam::Putconfiguration ( const _variant_t & _val );
__declspec(implementation_key(3403)) _bstr_t ksAdditionFormatParam::GetconfigurationFileName ( );
__declspec(implementation_key(3404)) void ksAdditionFormatParam::PutconfigurationFileName ( _bstr_t _val );
__declspec(implementation_key(3405)) VARIANT_BOOL ksConstraintParam::Init ( );
__declspec(implementation_key(3406)) short ksConstraintParam::GetconstrType ( );
__declspec(implementation_key(3407)) void ksConstraintParam::PutconstrType ( short _val );
__declspec(implementation_key(3408)) int ksConstraintParam::Getindex ( );
__declspec(implementation_key(3409)) void ksConstraintParam::Putindex ( int _val );
__declspec(implementation_key(3410)) long ksConstraintParam::Getpartner ( );
__declspec(implementation_key(3411)) void ksConstraintParam::Putpartner ( long _val );
__declspec(implementation_key(3412)) int ksConstraintParam::GetpartnerIndex ( );
__declspec(implementation_key(3413)) void ksConstraintParam::PutpartnerIndex ( int _val );
__declspec(implementation_key(3414)) VARIANT_BOOL ksImportedSurfaceDefinition::Clear ( );
__declspec(implementation_key(3415)) VARIANT_BOOL ksImportedSurfaceDefinition::BeginCurve ( );
__declspec(implementation_key(3416)) VARIANT_BOOL ksImportedSurfaceDefinition::AddPoint ( double x, double y, double z );
__declspec(implementation_key(3417)) VARIANT_BOOL ksImportedSurfaceDefinition::EndCurve ( );
__declspec(implementation_key(3418)) VARIANT_BOOL ksImportedSurfaceDefinition::AddCurve ( const _variant_t & arr );
__declspec(implementation_key(3419)) VARIANT_BOOL ksFaceCollection::refresh ( );
__declspec(implementation_key(3420)) long ksFaceCollection::GetCount ( );
__declspec(implementation_key(3421)) IDispatchPtr ksFaceCollection::First ( );
__declspec(implementation_key(3422)) IDispatchPtr ksFaceCollection::Last ( );
__declspec(implementation_key(3423)) IDispatchPtr ksFaceCollection::Next ( );
__declspec(implementation_key(3424)) IDispatchPtr ksFaceCollection::Prev ( );
__declspec(implementation_key(3425)) IDispatchPtr ksFaceCollection::GetByIndex ( long index );
__declspec(implementation_key(3426)) IDispatchPtr ksFaceCollection::GetByName ( _bstr_t name, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(3427)) long ksFaceCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3428)) VARIANT_BOOL ksVertexDefinition::GetPoint ( double * x, double * y, double * z );
__declspec(implementation_key(3429)) IDispatchPtr ksVertexDefinition::GetOwnerEntity ( );
__declspec(implementation_key(3430)) VARIANT_BOOL ksVertexDefinition::GettopologyVertex ( );
__declspec(implementation_key(3431)) VARIANT_BOOL ksVertexDefinition::GetfreeVertex ( );
__declspec(implementation_key(3432)) VARIANT_BOOL ksVertexDefinition::GetsketchVertex ( );
__declspec(implementation_key(3433)) long ksTessellation::GetFacetsCount ( );
__declspec(implementation_key(3434)) VARIANT_BOOL ksTessellation::GetFacetData ( int index, IDispatch * facet );
__declspec(implementation_key(3435)) long ksTessellation::GetPointsCount ( );
__declspec(implementation_key(3436)) VARIANT_BOOL ksTessellation::GetPoint ( int index, float * x, float * y, float * z );
__declspec(implementation_key(3437)) VARIANT_BOOL ksTessellation::GetNormal ( int index, float * x, float * y, float * z );
__declspec(implementation_key(3438)) VARIANT_BOOL ksTessellation::SetFacetSize ( double sag );
__declspec(implementation_key(3439)) double ksTessellation::GetFacetSize ( );
__declspec(implementation_key(3440)) IDispatchPtr ksTessellation::GetFacet ( );
__declspec(implementation_key(3441)) VARIANT_BOOL ksTessellation::refresh ( );
__declspec(implementation_key(3442)) VARIANT_BOOL ksTessellation::GetFacetPoints ( VARIANT * points, VARIANT * indexes );
__declspec(implementation_key(3443)) VARIANT_BOOL ksTessellation::GetFacetNormals ( VARIANT * normals );
__declspec(implementation_key(3444)) VARIANT_BOOL ksTessellation::GetFacetParams ( VARIANT * params );
__declspec(implementation_key(3445)) VARIANT_BOOL ksTessellation::SetFacetSag ( double sag );
__declspec(implementation_key(3446)) double ksTessellation::GetFacetSag ( );
__declspec(implementation_key(3447)) VARIANT_BOOL ksTessellation::SetFacetAngle ( double angle );
__declspec(implementation_key(3448)) double ksTessellation::GetFacetAngle ( );
__declspec(implementation_key(3449)) VARIANT_BOOL ksTessellation::SetNeedParams ( VARIANT_BOOL need );
__declspec(implementation_key(3450)) VARIANT_BOOL ksTessellation::GetNeedParams ( );
__declspec(implementation_key(3451)) int ksFacet::GetPointsCount ( );
__declspec(implementation_key(3452)) VARIANT_BOOL ksFacet::GetPoint ( int index, float * x, float * y, float * z );
__declspec(implementation_key(3453)) VARIANT_BOOL ksFacet::GetNormal ( int index, float * x, float * y, float * z );
__declspec(implementation_key(3454)) int ksFacet::GetTessellationIndex ( int index );
__declspec(implementation_key(3455)) VARIANT_BOOL ksMeasurer::SetObject1 ( IDispatch * obj );
__declspec(implementation_key(3456)) VARIANT_BOOL ksMeasurer::SetObject2 ( IDispatch * obj );
__declspec(implementation_key(3457)) IDispatchPtr ksMeasurer::GetObject1 ( );
__declspec(implementation_key(3458)) IDispatchPtr ksMeasurer::GetObject2 ( );
__declspec(implementation_key(3459)) VARIANT_BOOL ksMeasurer::Calc ( );
__declspec(implementation_key(3460)) VARIANT_BOOL ksMeasurer::IsAngleValid ( );
__declspec(implementation_key(3461)) double ksMeasurer::Getangle ( );
__declspec(implementation_key(3462)) double ksMeasurer::Getdistance ( );
__declspec(implementation_key(3463)) VARIANT_BOOL ksMeasurer::GetPoint1 ( double * x, double * y, double * z );
__declspec(implementation_key(3464)) VARIANT_BOOL ksMeasurer::GetPoint2 ( double * x, double * y, double * z );
__declspec(implementation_key(3465)) double ksMeasurer::GetMaxDistance ( );
__declspec(implementation_key(3466)) double ksMeasurer::GetNormalDistance ( );
__declspec(implementation_key(3467)) VARIANT_BOOL ksMeasurer::GetMaxPoint1 ( double * x, double * y, double * z );
__declspec(implementation_key(3468)) VARIANT_BOOL ksMeasurer::GetMaxPoint2 ( double * x, double * y, double * z );
__declspec(implementation_key(3469)) VARIANT_BOOL ksMeasurer::GetNormalPoint1 ( double * x, double * y, double * z );
__declspec(implementation_key(3470)) VARIANT_BOOL ksMeasurer::GetNormalPoint2 ( double * x, double * y, double * z );
__declspec(implementation_key(3471)) long ksMeasurer::GetMeasureResult ( );
__declspec(implementation_key(3472)) double ksMeasurer::GetMinDistance ( );
__declspec(implementation_key(3473)) VARIANT_BOOL ksMeasurer::GetMinPoint1 ( double * x, double * y, double * z );
__declspec(implementation_key(3474)) VARIANT_BOOL ksMeasurer::GetMinPoint2 ( double * x, double * y, double * z );
__declspec(implementation_key(3475)) unsigned long ksMeasurer::Getunit ( );
__declspec(implementation_key(3476)) void ksMeasurer::Putunit ( unsigned long _val );
__declspec(implementation_key(3477)) VARIANT_BOOL ksMeasurer::GetextendObject1 ( );
__declspec(implementation_key(3478)) void ksMeasurer::PutextendObject1 ( VARIANT_BOOL _val );
__declspec(implementation_key(3479)) VARIANT_BOOL ksMeasurer::GetextendObject2 ( );
__declspec(implementation_key(3480)) void ksMeasurer::PutextendObject2 ( VARIANT_BOOL _val );
__declspec(implementation_key(3481)) VARIANT_BOOL ksBodyCollection::refresh ( );
__declspec(implementation_key(3482)) long ksBodyCollection::GetCount ( );
__declspec(implementation_key(3483)) IDispatchPtr ksBodyCollection::First ( );
__declspec(implementation_key(3484)) IDispatchPtr ksBodyCollection::Last ( );
__declspec(implementation_key(3485)) IDispatchPtr ksBodyCollection::Next ( );
__declspec(implementation_key(3486)) IDispatchPtr ksBodyCollection::Prev ( );
__declspec(implementation_key(3487)) IDispatchPtr ksBodyCollection::GetByIndex ( long index );
__declspec(implementation_key(3488)) long ksBodyCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3489)) VARIANT_BOOL ksBodyCollection::Clear ( );
__declspec(implementation_key(3490)) VARIANT_BOOL ksBodyCollection::Add ( IDispatch * body );
__declspec(implementation_key(3491)) VARIANT_BOOL ksBodyCollection::AddAt ( IDispatch * body, long index );
__declspec(implementation_key(3492)) VARIANT_BOOL ksBodyCollection::AddBefore ( IDispatch * body, IDispatch * base );
__declspec(implementation_key(3493)) VARIANT_BOOL ksBodyCollection::DetachByIndex ( long index );
__declspec(implementation_key(3494)) VARIANT_BOOL ksBodyCollection::DetachByBody ( IDispatch * body );
__declspec(implementation_key(3495)) VARIANT_BOOL ksBodyCollection::SetByIndex ( IDispatch * body, long index );
__declspec(implementation_key(3496)) VARIANT_BOOL ksBody::GetGabarit ( double * x1, double * y1, double * z1, double * x2, double * y2, double * z2 );
__declspec(implementation_key(3497)) IDispatchPtr ksBody::FaceCollection ( );
__declspec(implementation_key(3498)) VARIANT_BOOL ksBody::IsSolid ( );
__declspec(implementation_key(3499)) IDispatchPtr ksBody::CalcMassInertiaProperties ( unsigned long bitVector );
__declspec(implementation_key(3500)) VARIANT_BOOL ksBody::CurveIntersection ( IDispatch * curve, IDispatch * fases, IDispatch * points );
__declspec(implementation_key(3501)) IDispatchPtr ksBody::CheckIntersectionWithBody ( IDispatch * otherBody, VARIANT_BOOL checkTangent );
__declspec(implementation_key(3502)) VARIANT_BOOL ksBody::GetMultiBodyParts ( );
__declspec(implementation_key(3503)) IDispatchPtr ksBody::GetFeature ( );
__declspec(implementation_key(3504)) long ksBody::GetIntersectionFacesWithBody ( IDispatch * otherBody, VARIANT * intersectionFaces1, VARIANT * intersectionFaces2, VARIANT * connectedFaces1, VARIANT * connectedFaces2 );
__declspec(implementation_key(3505)) VARIANT_BOOL ksSurface::GetGabarit ( double * x1, double * y1, double * z1, double * x2, double * y2, double * z2 );
__declspec(implementation_key(3506)) VARIANT_BOOL ksSurface::GetPoint ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3507)) VARIANT_BOOL ksSurface::GetNormal ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3508)) VARIANT_BOOL ksSurface::GetTangentVectorU ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3509)) VARIANT_BOOL ksSurface::GetTangentVectorV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3510)) VARIANT_BOOL ksSurface::GetDerivativeU ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3511)) VARIANT_BOOL ksSurface::GetDerivativeV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3512)) VARIANT_BOOL ksSurface::GetDerivativeUU ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3513)) VARIANT_BOOL ksSurface::GetDerivativeVV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3514)) VARIANT_BOOL ksSurface::GetDerivativeUV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3515)) VARIANT_BOOL ksSurface::GetDerivativeUUU ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3516)) VARIANT_BOOL ksSurface::GetDerivativeVVV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3517)) VARIANT_BOOL ksSurface::GetDerivativeUVV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3518)) VARIANT_BOOL ksSurface::GetDerivativeUUV ( double paramU, double paramV, double * x, double * y, double * z );
__declspec(implementation_key(3519)) double ksSurface::GetParamUMin ( );
__declspec(implementation_key(3520)) double ksSurface::GetParamUMax ( );
__declspec(implementation_key(3521)) double ksSurface::GetParamVMin ( );
__declspec(implementation_key(3522)) double ksSurface::GetParamVMax ( );
__declspec(implementation_key(3523)) VARIANT_BOOL ksSurface::IsClosedU ( );
__declspec(implementation_key(3524)) VARIANT_BOOL ksSurface::IsClosedV ( );
__declspec(implementation_key(3525)) VARIANT_BOOL ksSurface::IsPlane ( );
__declspec(implementation_key(3526)) VARIANT_BOOL ksSurface::IsCone ( );
__declspec(implementation_key(3527)) VARIANT_BOOL ksSurface::IsCylinder ( );
__declspec(implementation_key(3528)) VARIANT_BOOL ksSurface::IsTorus ( );
__declspec(implementation_key(3529)) VARIANT_BOOL ksSurface::IsSphere ( );
__declspec(implementation_key(3530)) VARIANT_BOOL ksSurface::IsNurbsSurface ( );
__declspec(implementation_key(3531)) VARIANT_BOOL ksSurface::IsRevolved ( );
__declspec(implementation_key(3532)) VARIANT_BOOL ksSurface::IsSwept ( );
__declspec(implementation_key(3533)) IDispatchPtr ksSurface::GetSurfaceParam ( );
__declspec(implementation_key(3534)) double ksSurface::GetArea ( unsigned long bitVector );
__declspec(implementation_key(3535)) VARIANT_BOOL ksSurface::NearPointProjection ( double x, double y, double z, double * u, double * v, VARIANT_BOOL ext );
__declspec(implementation_key(3536)) VARIANT_BOOL ksSurface::CurveIntersection ( IDispatch * curve, IDispatch * points, VARIANT_BOOL extSurf, VARIANT_BOOL extCurve );
__declspec(implementation_key(3537)) IDispatchPtr ksSurface::GetNurbsSurfaceParam ( );
__declspec(implementation_key(3538)) VARIANT_BOOL ksSurface::GetBoundaryUVNurbs ( VARIANT_BOOL uv, VARIANT_BOOL closed, long loopIndex, long edgeIndex, long * degree, VARIANT * points, VARIANT * weights, VARIANT * knots, double * tMin, double * tMax );
__declspec(implementation_key(3539)) long ksSurface::GetBoundaryCount ( );
__declspec(implementation_key(3540)) long ksSurface::GetEdgesCount ( long loopIndex );
__declspec(implementation_key(3541)) double ksSurface::GetAreaEx ( unsigned long bitVector, double angleTolerance );
__declspec(implementation_key(3542)) VARIANT_BOOL ksEdgeCollection::refresh ( );
__declspec(implementation_key(3543)) long ksEdgeCollection::GetCount ( );
__declspec(implementation_key(3544)) IDispatchPtr ksEdgeCollection::First ( );
__declspec(implementation_key(3545)) IDispatchPtr ksEdgeCollection::Last ( );
__declspec(implementation_key(3546)) IDispatchPtr ksEdgeCollection::Next ( );
__declspec(implementation_key(3547)) IDispatchPtr ksEdgeCollection::Prev ( );
__declspec(implementation_key(3548)) IDispatchPtr ksEdgeCollection::GetByIndex ( long index );
__declspec(implementation_key(3549)) long ksEdgeCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3550)) IDispatchPtr ksOrientedEdge::GetEdge ( );
__declspec(implementation_key(3551)) VARIANT_BOOL ksOrientedEdge::GetOrientation ( );
__declspec(implementation_key(3552)) IDispatchPtr ksOrientedEdge::GetOwnerEntity ( );
__declspec(implementation_key(3553)) IDispatchPtr ksOrientedEdge::GetNext ( );
__declspec(implementation_key(3554)) VARIANT_BOOL ksOrientedEdge::GetSameSense ( );
__declspec(implementation_key(3555)) IDispatchPtr ksOrientedEdge::GetAdjacentFace ( long facePlus );
__declspec(implementation_key(3556)) long ksOrientedEdge::IsStraight ( );
__declspec(implementation_key(3557)) long ksOrientedEdge::IsSeam ( );
__declspec(implementation_key(3558)) long ksOrientedEdge::IsPole ( );
__declspec(implementation_key(3559)) IDispatchPtr ksOrientedEdge::GetCurve3D ( );
__declspec(implementation_key(3560)) VARIANT_BOOL ksOrientedEdgeCollection::refresh ( );
__declspec(implementation_key(3561)) long ksOrientedEdgeCollection::GetCount ( );
__declspec(implementation_key(3562)) IDispatchPtr ksOrientedEdgeCollection::First ( );
__declspec(implementation_key(3563)) IDispatchPtr ksOrientedEdgeCollection::Last ( );
__declspec(implementation_key(3564)) IDispatchPtr ksOrientedEdgeCollection::Next ( );
__declspec(implementation_key(3565)) IDispatchPtr ksOrientedEdgeCollection::Prev ( );
__declspec(implementation_key(3566)) IDispatchPtr ksOrientedEdgeCollection::GetByIndex ( long index );
__declspec(implementation_key(3567)) long ksOrientedEdgeCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3568)) IDispatchPtr ksLoop::OrientedEdgeCollection ( IDispatch * edge );
__declspec(implementation_key(3569)) IDispatchPtr ksLoop::EdgeCollection ( );
__declspec(implementation_key(3570)) VARIANT_BOOL ksLoop::IsOuter ( );
__declspec(implementation_key(3571)) double ksLoop::GetLength ( unsigned long bitVector );
__declspec(implementation_key(3572)) VARIANT_BOOL ksLoopCollection::refresh ( );
__declspec(implementation_key(3573)) long ksLoopCollection::GetCount ( );
__declspec(implementation_key(3574)) IDispatchPtr ksLoopCollection::First ( );
__declspec(implementation_key(3575)) IDispatchPtr ksLoopCollection::Last ( );
__declspec(implementation_key(3576)) IDispatchPtr ksLoopCollection::Next ( );
__declspec(implementation_key(3577)) IDispatchPtr ksLoopCollection::Prev ( );
__declspec(implementation_key(3578)) IDispatchPtr ksLoopCollection::GetByIndex ( long index );
__declspec(implementation_key(3579)) VARIANT_BOOL ksCurve3D::GetPoint ( double paramT, double * x, double * y, double * z );
__declspec(implementation_key(3580)) VARIANT_BOOL ksCurve3D::GetTangentVector ( double paramT, double * x, double * y, double * z );
__declspec(implementation_key(3581)) VARIANT_BOOL ksCurve3D::GetNormal ( double paramT, double * x, double * y, double * z );
__declspec(implementation_key(3582)) VARIANT_BOOL ksCurve3D::GetDerivativeT ( double paramT, double * x, double * y, double * z );
__declspec(implementation_key(3583)) VARIANT_BOOL ksCurve3D::GetDerivativeTT ( double paramT, double * x, double * y, double * z );
__declspec(implementation_key(3584)) VARIANT_BOOL ksCurve3D::GetDerivativeTTT ( double paramT, double * x, double * y, double * z );
__declspec(implementation_key(3585)) double ksCurve3D::GetParamMin ( );
__declspec(implementation_key(3586)) double ksCurve3D::GetParamMax ( );
__declspec(implementation_key(3587)) VARIANT_BOOL ksCurve3D::IsClosed ( );
__declspec(implementation_key(3588)) VARIANT_BOOL ksCurve3D::IsPeriodic ( );
__declspec(implementation_key(3589)) double ksCurve3D::GetMetricLength ( double startParam, double endParam );
__declspec(implementation_key(3590)) VARIANT_BOOL ksCurve3D::GetGabarit ( double * x1, double * y1, double * z1, double * x2, double * y2, double * z2 );
__declspec(implementation_key(3591)) VARIANT_BOOL ksCurve3D::IsDegenerate ( );
__declspec(implementation_key(3592)) VARIANT_BOOL ksCurve3D::IsPlanar ( );
__declspec(implementation_key(3593)) VARIANT_BOOL ksCurve3D::IsLineSeg ( );
__declspec(implementation_key(3594)) VARIANT_BOOL ksCurve3D::IsArc ( );
__declspec(implementation_key(3595)) VARIANT_BOOL ksCurve3D::IsCircle ( );
__declspec(implementation_key(3596)) VARIANT_BOOL ksCurve3D::IsEllipse ( );
__declspec(implementation_key(3597)) VARIANT_BOOL ksCurve3D::IsNurbs ( );
__declspec(implementation_key(3598)) IDispatchPtr ksCurve3D::GetCurveParam ( );
__declspec(implementation_key(3599)) double ksCurve3D::GetLength ( unsigned long bitVector );
__declspec(implementation_key(3600)) VARIANT_BOOL ksCurve3D::NearPointProjection ( double x, double y, double z, double * t, VARIANT_BOOL ext );
__declspec(implementation_key(3601)) IDispatchPtr ksCurve3D::GetNurbs3dParam ( );
__declspec(implementation_key(3602)) _variant_t ksCurve3D::CalculatePolygon ( double step );
__declspec(implementation_key(3603)) VARIANT_BOOL ksCurve3D::IsEllipseArc ( );
__declspec(implementation_key(3604)) VARIANT_BOOL ksCurve3D::IsStraight ( );
__declspec(implementation_key(3605)) VARIANT_BOOL ksLineSeg3dParam::GetPointFirst ( double * x, double * y, double * z );
__declspec(implementation_key(3606)) VARIANT_BOOL ksLineSeg3dParam::GetPointLast ( double * x, double * y, double * z );
__declspec(implementation_key(3607)) double ksCircle3dParam::Getradius ( );
__declspec(implementation_key(3608)) IDispatchPtr ksCircle3dParam::GetPlacement ( );
__declspec(implementation_key(3609)) double ksEllipse3dParam::GetmajorRadius ( );
__declspec(implementation_key(3610)) double ksEllipse3dParam::GetminorRadius ( );
__declspec(implementation_key(3611)) IDispatchPtr ksEllipse3dParam::GetPlacement ( );
__declspec(implementation_key(3612)) IDispatchPtr ksPlaneParam::GetPlacement ( );
__declspec(implementation_key(3613)) double ksConeParam::Getradius ( );
__declspec(implementation_key(3614)) double ksConeParam::Getheight ( );
__declspec(implementation_key(3615)) double ksConeParam::Getangle ( );
__declspec(implementation_key(3616)) IDispatchPtr ksConeParam::GetPlacement ( );
__declspec(implementation_key(3617)) double ksCylinderParam::Getradius ( );
__declspec(implementation_key(3618)) double ksCylinderParam::Getheight ( );
__declspec(implementation_key(3619)) IDispatchPtr ksCylinderParam::GetPlacement ( );
__declspec(implementation_key(3620)) double ksSphereParam::Getradius ( );
__declspec(implementation_key(3621)) IDispatchPtr ksSphereParam::GetPlacement ( );
__declspec(implementation_key(3622)) double ksTorusParam::Getradius ( );
__declspec(implementation_key(3623)) double ksTorusParam::GetgeneratrixRadius ( );
__declspec(implementation_key(3624)) IDispatchPtr ksTorusParam::GetPlacement ( );
__declspec(implementation_key(3625)) VARIANT_BOOL ksNurbsPoint3dParam::GetPoint ( double * x, double * y, double * z );
__declspec(implementation_key(3626)) double ksNurbsPoint3dParam::Getweight ( );
__declspec(implementation_key(3627)) short ksNurbsSurfaceParam::GetDegree ( VARIANT_BOOL paramU );
__declspec(implementation_key(3628)) VARIANT_BOOL ksNurbsSurfaceParam::GetClose ( VARIANT_BOOL paramU );
__declspec(implementation_key(3629)) IDispatchPtr ksNurbsSurfaceParam::GetPointCollection ( );
__declspec(implementation_key(3630)) IDispatchPtr ksNurbsSurfaceParam::GetKnotCollection ( VARIANT_BOOL paramU );
__declspec(implementation_key(3631)) VARIANT_BOOL ksNurbsSurfaceParam::GetPeriodic ( VARIANT_BOOL paramU );
__declspec(implementation_key(3632)) VARIANT_BOOL ksNurbsSurfaceParam::GetNurbsParams ( VARIANT_BOOL closedV, VARIANT_BOOL closedU, long * degreeV, long * degreeU, long * nPV, long * nPU, VARIANT * points, VARIANT * weights, VARIANT * knotsV, VARIANT * knotsU );
__declspec(implementation_key(3633)) VARIANT_BOOL ksNurbsSurfaceParam::GetBoundaryUVNurbs ( VARIANT_BOOL uv, VARIANT_BOOL closed, long loopIndex, long edgeIndex, long * degree, VARIANT * points, VARIANT * weights, VARIANT * knots, double * tMin, double * tMax );
__declspec(implementation_key(3634)) long ksNurbsSurfaceParam::GetBoundaryCount ( );
__declspec(implementation_key(3635)) long ksNurbsSurfaceParam::GetEdgesCount ( long loopIndex );
__declspec(implementation_key(3636)) VARIANT_BOOL ksNurbsSurfaceParam::GetMinMaxParameters ( VARIANT_BOOL closedV, VARIANT_BOOL closedU, double * uMin, double * uMax, double * vMin, double * vMax );
__declspec(implementation_key(3637)) short ksNurbs3dParam::Getdegree ( );
__declspec(implementation_key(3638)) VARIANT_BOOL ksNurbs3dParam::Getclose ( );
__declspec(implementation_key(3639)) IDispatchPtr ksNurbs3dParam::GetPointCollection ( );
__declspec(implementation_key(3640)) IDispatchPtr ksNurbs3dParam::GetKnotCollection ( );
__declspec(implementation_key(3641)) VARIANT_BOOL ksNurbs3dParam::Getperiodic ( );
__declspec(implementation_key(3642)) VARIANT_BOOL ksNurbs3dParam::GetNurbsPoints3DParams ( VARIANT_BOOL closed, VARIANT * points, VARIANT * weights, VARIANT * knots );
__declspec(implementation_key(3643)) VARIANT_BOOL ksNurbs3dParam::GetMinMaxParameters ( VARIANT_BOOL closed, double * tMin, double * tMax );
__declspec(implementation_key(3644)) VARIANT_BOOL ksNurbsKnotCollection::refresh ( );
__declspec(implementation_key(3645)) long ksNurbsKnotCollection::GetCount ( );
__declspec(implementation_key(3646)) double ksNurbsKnotCollection::First ( );
__declspec(implementation_key(3647)) double ksNurbsKnotCollection::Last ( );
__declspec(implementation_key(3648)) double ksNurbsKnotCollection::Next ( );
__declspec(implementation_key(3649)) double ksNurbsKnotCollection::Prev ( );
__declspec(implementation_key(3650)) double ksNurbsKnotCollection::GetByIndex ( long index );
__declspec(implementation_key(3651)) VARIANT_BOOL ksNurbsKnotCollection::Clear ( );
__declspec(implementation_key(3652)) VARIANT_BOOL ksNurbsKnotCollection::Add ( double entity );
__declspec(implementation_key(3653)) VARIANT_BOOL ksNurbsKnotCollection::AddAt ( double entity, long index );
__declspec(implementation_key(3654)) VARIANT_BOOL ksNurbsKnotCollection::AddBefore ( double entity, double base );
__declspec(implementation_key(3655)) VARIANT_BOOL ksNurbsKnotCollection::DetachByIndex ( long index );
__declspec(implementation_key(3656)) VARIANT_BOOL ksNurbsKnotCollection::DetachByBody ( double entity );
__declspec(implementation_key(3657)) VARIANT_BOOL ksNurbsKnotCollection::SetByIndex ( double entity, long index );
__declspec(implementation_key(3658)) VARIANT_BOOL ksNurbsPoint3dCollCollection::refresh ( );
__declspec(implementation_key(3659)) long ksNurbsPoint3dCollCollection::GetCount ( );
__declspec(implementation_key(3660)) IDispatchPtr ksNurbsPoint3dCollCollection::First ( );
__declspec(implementation_key(3661)) IDispatchPtr ksNurbsPoint3dCollCollection::Last ( );
__declspec(implementation_key(3662)) IDispatchPtr ksNurbsPoint3dCollCollection::Next ( );
__declspec(implementation_key(3663)) IDispatchPtr ksNurbsPoint3dCollCollection::Prev ( );
__declspec(implementation_key(3664)) IDispatchPtr ksNurbsPoint3dCollCollection::GetByIndex ( long index );
__declspec(implementation_key(3665)) VARIANT_BOOL ksNurbsPoint3dCollCollection::Clear ( );
__declspec(implementation_key(3666)) VARIANT_BOOL ksNurbsPoint3dCollCollection::Add ( IDispatch * entity );
__declspec(implementation_key(3667)) VARIANT_BOOL ksNurbsPoint3dCollCollection::AddAt ( IDispatch * entity, long index );
__declspec(implementation_key(3668)) VARIANT_BOOL ksNurbsPoint3dCollCollection::AddBefore ( IDispatch * entity, IDispatch * base );
__declspec(implementation_key(3669)) VARIANT_BOOL ksNurbsPoint3dCollCollection::DetachByIndex ( long index );
__declspec(implementation_key(3670)) VARIANT_BOOL ksNurbsPoint3dCollCollection::DetachByBody ( IDispatch * entity );
__declspec(implementation_key(3671)) VARIANT_BOOL ksNurbsPoint3dCollCollection::SetByIndex ( IDispatch * entity, long index );
__declspec(implementation_key(3672)) long ksNurbsPoint3dCollCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3673)) VARIANT_BOOL ksNurbsPoint3dCollection::refresh ( );
__declspec(implementation_key(3674)) long ksNurbsPoint3dCollection::GetCount ( );
__declspec(implementation_key(3675)) IDispatchPtr ksNurbsPoint3dCollection::First ( );
__declspec(implementation_key(3676)) IDispatchPtr ksNurbsPoint3dCollection::Last ( );
__declspec(implementation_key(3677)) IDispatchPtr ksNurbsPoint3dCollection::Next ( );
__declspec(implementation_key(3678)) IDispatchPtr ksNurbsPoint3dCollection::Prev ( );
__declspec(implementation_key(3679)) IDispatchPtr ksNurbsPoint3dCollection::GetByIndex ( long index );
__declspec(implementation_key(3680)) VARIANT_BOOL ksNurbsPoint3dCollection::Clear ( );
__declspec(implementation_key(3681)) VARIANT_BOOL ksNurbsPoint3dCollection::Add ( IDispatch * entity );
__declspec(implementation_key(3682)) VARIANT_BOOL ksNurbsPoint3dCollection::AddAt ( IDispatch * entity, long index );
__declspec(implementation_key(3683)) VARIANT_BOOL ksNurbsPoint3dCollection::AddBefore ( IDispatch * entity, IDispatch * base );
__declspec(implementation_key(3684)) VARIANT_BOOL ksNurbsPoint3dCollection::DetachByIndex ( long index );
__declspec(implementation_key(3685)) VARIANT_BOOL ksNurbsPoint3dCollection::DetachByBody ( IDispatch * entity );
__declspec(implementation_key(3686)) VARIANT_BOOL ksNurbsPoint3dCollection::SetByIndex ( IDispatch * entity, long index );
__declspec(implementation_key(3687)) long ksNurbsPoint3dCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3688)) VARIANT_BOOL ksViewProjection::IsCurrent ( );
__declspec(implementation_key(3689)) VARIANT_BOOL ksViewProjection::SetCurrent ( );
__declspec(implementation_key(3690)) IDispatchPtr ksViewProjection::GetPlacement ( );
__declspec(implementation_key(3691)) VARIANT_BOOL ksViewProjection::SetPlacement ( IDispatch * place );
__declspec(implementation_key(3692)) long ksViewProjection::GetuserProjectionIndex ( );
__declspec(implementation_key(3693)) VARIANT_BOOL ksViewProjection::SetMatrix3D ( const _variant_t & Matrix3D );
__declspec(implementation_key(3694)) long ksViewProjection::GetViewProjectonType ( );
__declspec(implementation_key(3695)) _bstr_t ksViewProjection::Getname ( );
__declspec(implementation_key(3696)) void ksViewProjection::Putname ( _bstr_t _val );
__declspec(implementation_key(3697)) double ksViewProjection::Getscale ( );
__declspec(implementation_key(3698)) void ksViewProjection::Putscale ( double _val );
__declspec(implementation_key(3699)) VARIANT_BOOL ksViewProjectionCollection::refresh ( );
__declspec(implementation_key(3700)) long ksViewProjectionCollection::GetCount ( );
__declspec(implementation_key(3701)) IDispatchPtr ksViewProjectionCollection::First ( );
__declspec(implementation_key(3702)) IDispatchPtr ksViewProjectionCollection::Last ( );
__declspec(implementation_key(3703)) IDispatchPtr ksViewProjectionCollection::Next ( );
__declspec(implementation_key(3704)) IDispatchPtr ksViewProjectionCollection::Prev ( );
__declspec(implementation_key(3705)) IDispatchPtr ksViewProjectionCollection::GetByIndex ( long index );
__declspec(implementation_key(3706)) IDispatchPtr ksViewProjectionCollection::GetByName ( _bstr_t name, VARIANT_BOOL testFullName, VARIANT_BOOL testIgnoreCase );
__declspec(implementation_key(3707)) long ksViewProjectionCollection::FindIt ( IDispatch * entity );
__declspec(implementation_key(3708)) VARIANT_BOOL ksViewProjectionCollection::Add ( IDispatch * entity );
__declspec(implementation_key(3709)) VARIANT_BOOL ksViewProjectionCollection::DetachByIndex ( long index );
__declspec(implementation_key(3710)) VARIANT_BOOL ksViewProjectionCollection::DetachByBody ( IDispatch * entity );
__declspec(implementation_key(3711)) VARIANT_BOOL ksViewProjectionCollection::DetachByName ( _bstr_t name );
__declspec(implementation_key(3712)) IDispatchPtr ksViewProjectionCollection::NewViewProjection ( );
__declspec(implementation_key(3713)) VARIANT_BOOL ksViewProjectionCollection::SetBaseUserOrientation ( const _variant_t & place );
__declspec(implementation_key(3714)) _variant_t ksViewProjectionCollection::GetBaseUserOrientation ( );
__declspec(implementation_key(3715)) IDispatchPtr ksViewProjectionCollection::AddUnfoldProjection ( const _variant_t & place );
__declspec(implementation_key(3716)) long ksViewProjectionCollection::GetviewProjectionScheme ( );
__declspec(implementation_key(3717)) void ksViewProjectionCollection::PutviewProjectionScheme ( long _val );
__declspec(implementation_key(3718)) VARIANT_BOOL ksSelectionMng::Select ( IDispatch * obj );
__declspec(implementation_key(3719)) VARIANT_BOOL ksSelectionMng::Unselect ( IDispatch * obj );
__declspec(implementation_key(3720)) VARIANT_BOOL ksSelectionMng::UnselectAll ( );
__declspec(implementation_key(3721)) VARIANT_BOOL ksSelectionMng::IsSelected ( IDispatch * obj );
__declspec(implementation_key(3722)) long ksSelectionMng::GetCount ( );
__declspec(implementation_key(3723)) IDispatchPtr ksSelectionMng::First ( );
__declspec(implementation_key(3724)) IDispatchPtr ksSelectionMng::Last ( );
__declspec(implementation_key(3725)) IDispatchPtr ksSelectionMng::Next ( );
__declspec(implementation_key(3726)) IDispatchPtr ksSelectionMng::Prev ( );
__declspec(implementation_key(3727)) IDispatchPtr ksSelectionMng::GetObjectByIndex ( long index );
__declspec(implementation_key(3728)) long ksSelectionMng::GetObjectType ( long index );
__declspec(implementation_key(3729)) VARIANT_BOOL ksChooseMng::Choose ( IDispatch * obj );
__declspec(implementation_key(3730)) VARIANT_BOOL ksChooseMng::UnChoose ( IDispatch * obj );
__declspec(implementation_key(3731)) VARIANT_BOOL ksChooseMng::UnChooseAll ( );
__declspec(implementation_key(3732)) VARIANT_BOOL ksChooseMng::IsChoosen ( IDispatch * obj );
__declspec(implementation_key(3733)) long ksChooseMng::GetCount ( );
__declspec(implementation_key(3734)) IDispatchPtr ksChooseMng::First ( );
__declspec(implementation_key(3735)) IDispatchPtr ksChooseMng::Last ( );
__declspec(implementation_key(3736)) IDispatchPtr ksChooseMng::Next ( );
__declspec(implementation_key(3737)) IDispatchPtr ksChooseMng::Prev ( );
__declspec(implementation_key(3738)) IDispatchPtr ksChooseMng::GetObjectByIndex ( long index );
__declspec(implementation_key(3739)) long ksChooseMng::GetObjectType ( long index );
__declspec(implementation_key(3740)) long ksChooseMng::GetManagerIndex ( IDispatch * obj );
__declspec(implementation_key(3741)) long ksChooseMng::GetcurrentManagerType ( );
__declspec(implementation_key(3742)) void ksChooseMng::PutcurrentManagerType ( long _val );
__declspec(implementation_key(3743)) IDispatchPtr ksArc3dParam::GetPlacement ( );
__declspec(implementation_key(3744)) double ksArc3dParam::Getradius ( );
__declspec(implementation_key(3745)) double ksArc3dParam::Getangle ( );
__declspec(implementation_key(3746)) VARIANT_BOOL ksTreeNodeParam::Init ( );
__declspec(implementation_key(3747)) long ksTreeNodeParam::Gettype ( );
__declspec(implementation_key(3748)) _bstr_t ksTreeNodeParam::Getname ( );
__declspec(implementation_key(3749)) IDispatchPtr ksTreeNodeParam::GetComment ( );
__declspec(implementation_key(3750)) IDispatchPtr ksTreeNodeParam::GetNodes ( );
__declspec(implementation_key(3751)) VARIANT_BOOL ksAssociationViewParam::Init ( );
__declspec(implementation_key(3752)) IDispatchPtr ksAssociationViewParam::GetViewParam ( );
__declspec(implementation_key(3753)) short ksAssociationViewParam::GetviewType ( );
__declspec(implementation_key(3754)) IDispatchPtr ksAssociationViewParam::GetHatchParam ( );
__declspec(implementation_key(3755)) VARIANT_BOOL ksAssociationViewParam::SetDimensionLayoutScaling ( VARIANT_BOOL scaling );
__declspec(implementation_key(3756)) _bstr_t ksAssociationViewParam::GetfileName ( );
__declspec(implementation_key(3757)) void ksAssociationViewParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(3758)) _bstr_t ksAssociationViewParam::GetprojectionName ( );
__declspec(implementation_key(3759)) void ksAssociationViewParam::PutprojectionName ( _bstr_t _val );
__declspec(implementation_key(3760)) VARIANT_BOOL ksAssociationViewParam::GetprojectionLink ( );
__declspec(implementation_key(3761)) void ksAssociationViewParam::PutprojectionLink ( VARIANT_BOOL _val );
__declspec(implementation_key(3762)) VARIANT_BOOL ksAssociationViewParam::Getdisassembly ( );
__declspec(implementation_key(3763)) void ksAssociationViewParam::Putdisassembly ( VARIANT_BOOL _val );
__declspec(implementation_key(3764)) long ksAssociationViewParam::GetvisibleLinesStyle ( );
__declspec(implementation_key(3765)) void ksAssociationViewParam::PutvisibleLinesStyle ( long _val );
__declspec(implementation_key(3766)) long ksAssociationViewParam::GethiddenLinesStyle ( );
__declspec(implementation_key(3767)) void ksAssociationViewParam::PuthiddenLinesStyle ( long _val );
__declspec(implementation_key(3768)) long ksAssociationViewParam::GettangentEdgesStyle ( );
__declspec(implementation_key(3769)) void ksAssociationViewParam::PuttangentEdgesStyle ( long _val );
__declspec(implementation_key(3770)) VARIANT_BOOL ksAssociationViewParam::GethiddenLinesShow ( );
__declspec(implementation_key(3771)) void ksAssociationViewParam::PuthiddenLinesShow ( VARIANT_BOOL _val );
__declspec(implementation_key(3772)) VARIANT_BOOL ksAssociationViewParam::GettangentEdgesShow ( );
__declspec(implementation_key(3773)) void ksAssociationViewParam::PuttangentEdgesShow ( VARIANT_BOOL _val );
__declspec(implementation_key(3774)) VARIANT_BOOL ksAssociationViewParam::GetprojBodies ( );
__declspec(implementation_key(3775)) void ksAssociationViewParam::PutprojBodies ( VARIANT_BOOL _val );
__declspec(implementation_key(3776)) VARIANT_BOOL ksAssociationViewParam::GetprojSurfaces ( );
__declspec(implementation_key(3777)) void ksAssociationViewParam::PutprojSurfaces ( VARIANT_BOOL _val );
__declspec(implementation_key(3778)) VARIANT_BOOL ksAssociationViewParam::GetprojThreads ( );
__declspec(implementation_key(3779)) void ksAssociationViewParam::PutprojThreads ( VARIANT_BOOL _val );
__declspec(implementation_key(3780)) VARIANT_BOOL ksAssociationViewParam::Getsection ( );
__declspec(implementation_key(3781)) void ksAssociationViewParam::Putsection ( VARIANT_BOOL _val );
__declspec(implementation_key(3782)) VARIANT_BOOL ksAssociationViewParam::GetsameHatch ( );
__declspec(implementation_key(3783)) void ksAssociationViewParam::PutsameHatch ( VARIANT_BOOL _val );
__declspec(implementation_key(3784)) VARIANT_BOOL ksViewColorParam::Init ( );
__declspec(implementation_key(3785)) long ksViewColorParam::Getcolor ( );
__declspec(implementation_key(3786)) void ksViewColorParam::Putcolor ( long _val );
__declspec(implementation_key(3787)) VARIANT_BOOL ksViewColorParam::GetuseGradient ( );
__declspec(implementation_key(3788)) void ksViewColorParam::PutuseGradient ( VARIANT_BOOL _val );
__declspec(implementation_key(3789)) long ksViewColorParam::GettopColor ( );
__declspec(implementation_key(3790)) void ksViewColorParam::PuttopColor ( long _val );
__declspec(implementation_key(3791)) long ksViewColorParam::GetbottomColor ( );
__declspec(implementation_key(3792)) void ksViewColorParam::PutbottomColor ( long _val );
__declspec(implementation_key(3793)) VARIANT_BOOL ksAxisLineParam::Init ( );
__declspec(implementation_key(3794)) IDispatchPtr ksAxisLineParam::GetBegPoint ( );
__declspec(implementation_key(3795)) IDispatchPtr ksAxisLineParam::GetEndPoint ( );
__declspec(implementation_key(3796)) VARIANT_BOOL ksTextDocumentParam::Init ( );
__declspec(implementation_key(3797)) IDispatchPtr ksTextDocumentParam::GetFirstSheet ( );
__declspec(implementation_key(3798)) IDispatchPtr ksTextDocumentParam::GetEvenSheet ( );
__declspec(implementation_key(3799)) IDispatchPtr ksTextDocumentParam::GetOddSheet ( );
__declspec(implementation_key(3800)) IDispatchPtr ksTextDocumentParam::GetArrTitleSheet ( );
__declspec(implementation_key(3801)) IDispatchPtr ksTextDocumentParam::GetArrTailSheet ( );
__declspec(implementation_key(3802)) IDispatchPtr ksTextDocumentParam::GetSheetParam ( );
__declspec(implementation_key(3803)) _bstr_t ksTextDocumentParam::GetfileName ( );
__declspec(implementation_key(3804)) void ksTextDocumentParam::PutfileName ( _bstr_t _val );
__declspec(implementation_key(3805)) _bstr_t ksTextDocumentParam::Getcomment ( );
__declspec(implementation_key(3806)) void ksTextDocumentParam::Putcomment ( _bstr_t _val );
__declspec(implementation_key(3807)) _bstr_t ksTextDocumentParam::Getauthor ( );
__declspec(implementation_key(3808)) void ksTextDocumentParam::Putauthor ( _bstr_t _val );
__declspec(implementation_key(3809)) short ksTextDocumentParam::Gettype ( );
__declspec(implementation_key(3810)) void ksTextDocumentParam::Puttype ( short _val );
__declspec(implementation_key(3811)) short ksTextDocumentParam::Getregime ( );
__declspec(implementation_key(3812)) void ksTextDocumentParam::Putregime ( short _val );
__declspec(implementation_key(3813)) VARIANT_BOOL ksRemoteElementParam::Init ( long style );
__declspec(implementation_key(3814)) IDispatchPtr ksRemoteElementParam::GetpText ( );
__declspec(implementation_key(3815)) VARIANT_BOOL ksRemoteElementParam::SetpText ( IDispatch * pText );
__declspec(implementation_key(3816)) long ksRemoteElementParam::Getstyle ( );
__declspec(implementation_key(3817)) void ksRemoteElementParam::Putstyle ( long _val );
__declspec(implementation_key(3818)) long ksRemoteElementParam::GetsignType ( );
__declspec(implementation_key(3819)) void ksRemoteElementParam::PutsignType ( long _val );
__declspec(implementation_key(3820)) double ksRemoteElementParam::Getx ( );
__declspec(implementation_key(3821)) void ksRemoteElementParam::Putx ( double _val );
__declspec(implementation_key(3822)) double ksRemoteElementParam::Gety ( );
__declspec(implementation_key(3823)) void ksRemoteElementParam::Puty ( double _val );
__declspec(implementation_key(3824)) double ksRemoteElementParam::Getwidth ( );
__declspec(implementation_key(3825)) void ksRemoteElementParam::Putwidth ( double _val );
__declspec(implementation_key(3826)) double ksRemoteElementParam::Getheight ( );
__declspec(implementation_key(3827)) void ksRemoteElementParam::Putheight ( double _val );
__declspec(implementation_key(3828)) double ksRemoteElementParam::Getradius ( );
__declspec(implementation_key(3829)) void ksRemoteElementParam::Putradius ( double _val );
__declspec(implementation_key(3830)) double ksRemoteElementParam::Getsmooth ( );
__declspec(implementation_key(3831)) void ksRemoteElementParam::Putsmooth ( double _val );
__declspec(implementation_key(3832)) double ksRemoteElementParam::GetshelfX ( );
__declspec(implementation_key(3833)) void ksRemoteElementParam::PutshelfX ( double _val );
__declspec(implementation_key(3834)) double ksRemoteElementParam::GetshelfY ( );
__declspec(implementation_key(3835)) void ksRemoteElementParam::PutshelfY ( double _val );
__declspec(implementation_key(3836)) short ksRemoteElementParam::GetshelfDir ( );
__declspec(implementation_key(3837)) void ksRemoteElementParam::PutshelfDir ( short _val );
__declspec(implementation_key(3838)) VARIANT_BOOL ksDeletedCopyCollection::refresh ( );
__declspec(implementation_key(3839)) long ksDeletedCopyCollection::GetCount ( );
__declspec(implementation_key(3840)) VARIANT_BOOL ksDeletedCopyCollection::First ( long * index1, long * index2 );
__declspec(implementation_key(3841)) VARIANT_BOOL ksDeletedCopyCollection::Last ( long * index1, long * index2 );
__declspec(implementation_key(3842)) VARIANT_BOOL ksDeletedCopyCollection::Next ( long * index1, long * index2 );
__declspec(implementation_key(3843)) VARIANT_BOOL ksDeletedCopyCollection::Prev ( long * index1, long * index2 );
__declspec(implementation_key(3844)) VARIANT_BOOL ksDeletedCopyCollection::GetByIndex ( long index, long * index1, long * index2 );
__declspec(implementation_key(3845)) VARIANT_BOOL ksDeletedCopyCollection::Clear ( );
__declspec(implementation_key(3846)) VARIANT_BOOL ksDeletedCopyCollection::Add ( long index1, long index2 );
__declspec(implementation_key(3847)) VARIANT_BOOL ksDeletedCopyCollection::AddAt ( long index1, long index2, long index );
__declspec(implementation_key(3848)) VARIANT_BOOL ksDeletedCopyCollection::DetachByIndex ( long index );
__declspec(implementation_key(3849)) VARIANT_BOOL ksDeletedCopyCollection::DetachByBody ( long index1, long index2 );
__declspec(implementation_key(3850)) VARIANT_BOOL ksDeletedCopyCollection::SetByIndex ( long index1, long index2, long index );
__declspec(implementation_key(3851)) long ksDeletedCopyCollection::FindIt ( long index1, long index2 );
__declspec(implementation_key(3852)) VARIANT_BOOL ksCopyObjectParam::Init ( );
__declspec(implementation_key(3853)) long ksCopyObjectParam::GetobjRef ( );
__declspec(implementation_key(3854)) void ksCopyObjectParam::PutobjRef ( long _val );
__declspec(implementation_key(3855)) double ksCopyObjectParam::GetxOld ( );
__declspec(implementation_key(3856)) void ksCopyObjectParam::PutxOld ( double _val );
__declspec(implementation_key(3857)) double ksCopyObjectParam::GetyOld ( );
__declspec(implementation_key(3858)) void ksCopyObjectParam::PutyOld ( double _val );
__declspec(implementation_key(3859)) double ksCopyObjectParam::GetxNew ( );
__declspec(implementation_key(3860)) void ksCopyObjectParam::PutxNew ( double _val );
__declspec(implementation_key(3861)) double ksCopyObjectParam::GetyNew ( );
__declspec(implementation_key(3862)) void ksCopyObjectParam::PutyNew ( double _val );
__declspec(implementation_key(3863)) double ksCopyObjectParam::Getscale ( );
__declspec(implementation_key(3864)) void ksCopyObjectParam::Putscale ( double _val );
__declspec(implementation_key(3865)) double ksCopyObjectParam::Getangle ( );
__declspec(implementation_key(3866)) void ksCopyObjectParam::Putangle ( double _val );
__declspec(implementation_key(3867)) VARIANT_BOOL ksCopyObjectParam::GetattrCopy ( );
__declspec(implementation_key(3868)) void ksCopyObjectParam::PutattrCopy ( VARIANT_BOOL _val );
__declspec(implementation_key(3869)) VARIANT_BOOL ksCopyObjectParam::GetdimLineScale ( );
__declspec(implementation_key(3870)) void ksCopyObjectParam::PutdimLineScale ( VARIANT_BOOL _val );
__declspec(implementation_key(3871)) VARIANT_BOOL ksCopyObjectParam::GetspcObjCopy ( );
__declspec(implementation_key(3872)) void ksCopyObjectParam::PutspcObjCopy ( VARIANT_BOOL _val );
__declspec(implementation_key(3873)) VARIANT_BOOL ksCopyObjectParam::GetstoragesCopy ( );
__declspec(implementation_key(3874)) void ksCopyObjectParam::PutstoragesCopy ( VARIANT_BOOL _val );
__declspec(implementation_key(3875)) VARIANT_BOOL ksCopyObjectParam::GethyperLinksCopy ( );
__declspec(implementation_key(3876)) void ksCopyObjectParam::PuthyperLinksCopy ( VARIANT_BOOL _val );
__declspec(implementation_key(3877)) VARIANT_BOOL ksThreadDefinition::Getoutside ( );
__declspec(implementation_key(3878)) IDispatchPtr ksThreadDefinition::GetBaseObject ( );
__declspec(implementation_key(3879)) VARIANT_BOOL ksThreadDefinition::SetBaseObject ( IDispatch * obj );
__declspec(implementation_key(3880)) IDispatchPtr ksThreadDefinition::GetFaceBegin ( );
__declspec(implementation_key(3881)) VARIANT_BOOL ksThreadDefinition::SetFaceBegin ( IDispatch * face );
__declspec(implementation_key(3882)) IDispatchPtr ksThreadDefinition::GetFaceEnd ( );
__declspec(implementation_key(3883)) VARIANT_BOOL ksThreadDefinition::SetFaceEnd ( IDispatch * face );
__declspec(implementation_key(3884)) double ksThreadDefinition::Getdr ( );
__declspec(implementation_key(3885)) void ksThreadDefinition::Putdr ( double _val );
__declspec(implementation_key(3886)) double ksThreadDefinition::Getlength ( );
__declspec(implementation_key(3887)) void ksThreadDefinition::Putlength ( double _val );
__declspec(implementation_key(3888)) double ksThreadDefinition::Getp ( );
__declspec(implementation_key(3889)) void ksThreadDefinition::Putp ( double _val );
__declspec(implementation_key(3890)) VARIANT_BOOL ksThreadDefinition::GetautoDefinDr ( );
__declspec(implementation_key(3891)) void ksThreadDefinition::PutautoDefinDr ( VARIANT_BOOL _val );
__declspec(implementation_key(3892)) VARIANT_BOOL ksThreadDefinition::GetallLength ( );
__declspec(implementation_key(3893)) void ksThreadDefinition::PutallLength ( VARIANT_BOOL _val );
__declspec(implementation_key(3894)) VARIANT_BOOL ksThreadDefinition::GetfaceValue ( );
__declspec(implementation_key(3895)) void ksThreadDefinition::PutfaceValue ( VARIANT_BOOL _val );
__declspec(implementation_key(3896)) VARIANT_BOOL ksOverlapObjectOptions::Init ( );
__declspec(implementation_key(3897)) VARIANT_BOOL ksOverlapObjectOptions::Getoverlap ( );
__declspec(implementation_key(3898)) void ksOverlapObjectOptions::Putoverlap ( VARIANT_BOOL _val );
__declspec(implementation_key(3899)) double ksOverlapObjectOptions::Getgap ( );
__declspec(implementation_key(3900)) void ksOverlapObjectOptions::Putgap ( double _val );
__declspec(implementation_key(3901)) VARIANT_BOOL ksObjectsFilter3D::GetfilterAll ( );
__declspec(implementation_key(3902)) void ksObjectsFilter3D::PutfilterAll ( VARIANT_BOOL _val );
__declspec(implementation_key(3903)) VARIANT_BOOL ksObjectsFilter3D::GetfilterFaces ( );
__declspec(implementation_key(3904)) void ksObjectsFilter3D::PutfilterFaces ( VARIANT_BOOL _val );
__declspec(implementation_key(3905)) VARIANT_BOOL ksObjectsFilter3D::GetfilterEdges ( );
__declspec(implementation_key(3906)) void ksObjectsFilter3D::PutfilterEdges ( VARIANT_BOOL _val );
__declspec(implementation_key(3907)) VARIANT_BOOL ksObjectsFilter3D::GetfilterVertexs ( );
__declspec(implementation_key(3908)) void ksObjectsFilter3D::PutfilterVertexs ( VARIANT_BOOL _val );
__declspec(implementation_key(3909)) VARIANT_BOOL ksObjectsFilter3D::GetfilterCPlanes ( );
__declspec(implementation_key(3910)) void ksObjectsFilter3D::PutfilterCPlanes ( VARIANT_BOOL _val );
__declspec(implementation_key(3911)) VARIANT_BOOL ksObjectsFilter3D::GetfilterCAxis ( );
__declspec(implementation_key(3912)) void ksObjectsFilter3D::PutfilterCAxis ( VARIANT_BOOL _val );
__declspec(implementation_key(3913)) VARIANT_BOOL ksParametrizationParam::Init ( );
__declspec(implementation_key(3914)) VARIANT_BOOL ksParametrizationParam::GetnearestPoints ( );
__declspec(implementation_key(3915)) void ksParametrizationParam::PutnearestPoints ( VARIANT_BOOL _val );
__declspec(implementation_key(3916)) double ksParametrizationParam::GetpointsLimit ( );
__declspec(implementation_key(3917)) void ksParametrizationParam::PutpointsLimit ( double _val );
__declspec(implementation_key(3918)) VARIANT_BOOL ksParametrizationParam::Gethorizontal ( );
__declspec(implementation_key(3919)) void ksParametrizationParam::Puthorizontal ( VARIANT_BOOL _val );
__declspec(implementation_key(3920)) VARIANT_BOOL ksParametrizationParam::Getvertical ( );
__declspec(implementation_key(3921)) void ksParametrizationParam::Putvertical ( VARIANT_BOOL _val );
__declspec(implementation_key(3922)) VARIANT_BOOL ksParametrizationParam::Getparallel ( );
__declspec(implementation_key(3923)) void ksParametrizationParam::Putparallel ( VARIANT_BOOL _val );
__declspec(implementation_key(3924)) VARIANT_BOOL ksParametrizationParam::Getperpendicular ( );
__declspec(implementation_key(3925)) void ksParametrizationParam::Putperpendicular ( VARIANT_BOOL _val );
__declspec(implementation_key(3926)) double ksParametrizationParam::GetangleLimit ( );
__declspec(implementation_key(3927)) void ksParametrizationParam::PutangleLimit ( double _val );
__declspec(implementation_key(3928)) ksFeatureCollectionPtr ksMacro3DDefinition::FeatureCollection ( );
__declspec(implementation_key(3929)) VARIANT_BOOL ksMacro3DDefinition::Destroy ( );
__declspec(implementation_key(3930)) VARIANT_BOOL ksMacro3DDefinition::Add ( IDispatch * obj );
__declspec(implementation_key(3931)) VARIANT_BOOL ksMacro3DDefinition::SetUserParam ( IDispatch * userPars );
__declspec(implementation_key(3932)) long ksMacro3DDefinition::GetUserParamSize ( );
__declspec(implementation_key(3933)) VARIANT_BOOL ksMacro3DDefinition::GetUserParam ( IDispatch * userPars );
__declspec(implementation_key(3934)) VARIANT_BOOL ksMacro3DDefinition::SetObject ( long index, IDispatch * obj );
__declspec(implementation_key(3935)) IDispatchPtr ksMacro3DDefinition::GetObject ( long index );
__declspec(implementation_key(3936)) long ksMacro3DDefinition::GetCountObj ( );
__declspec(implementation_key(3937)) VARIANT_BOOL ksMacro3DDefinition::ClearAllObj ( );
__declspec(implementation_key(3938)) VARIANT_BOOL ksMacro3DDefinition::GetStaffVisible ( );
__declspec(implementation_key(3939)) void ksMacro3DDefinition::PutStaffVisible ( VARIANT_BOOL _val );
__declspec(implementation_key(3940)) VARIANT_BOOL ksMacro3DDefinition::GetDoubleClickEditOff ( );
__declspec(implementation_key(3941)) void ksMacro3DDefinition::PutDoubleClickEditOff ( VARIANT_BOOL _val );
__declspec(implementation_key(3942)) VARIANT_BOOL ksMacro3DDefinition::GetPropertyObjectEditable ( );
__declspec(implementation_key(3943)) void ksMacro3DDefinition::PutPropertyObjectEditable ( VARIANT_BOOL _val );
__declspec(implementation_key(3944)) VARIANT_BOOL ksAxisConefaceDefinition::SetFace ( IDispatch * face );
__declspec(implementation_key(3945)) IDispatchPtr ksAxisConefaceDefinition::GetFace ( );
__declspec(implementation_key(3946)) IDispatchPtr ksAxisConefaceDefinition::GetCurve3D ( );
__declspec(implementation_key(3947)) IDispatchPtr ksUnionComponentsDefinition::PartArray ( );
__declspec(implementation_key(3948)) IDispatchPtr ksMoldCavityDefinition::PartArray ( );
__declspec(implementation_key(3949)) IDispatchPtr ksMoldCavityDefinition::GetScaleCentre ( );
__declspec(implementation_key(3950)) VARIANT_BOOL ksMoldCavityDefinition::SetScaleCentre ( IDispatch * vert );
__declspec(implementation_key(3951)) double ksMoldCavityDefinition::Getscale ( );
__declspec(implementation_key(3952)) void ksMoldCavityDefinition::Putscale ( double _val );
__declspec(implementation_key(3953)) long ksCoordinate3dCollection::GetCount ( );
__declspec(implementation_key(3954)) VARIANT_BOOL ksCoordinate3dCollection::GetByIndex ( long index, double * x, double * y, double * z );
__declspec(implementation_key(3955)) VARIANT_BOOL ksCoordinate3dCollection::GetSafeArray ( VARIANT * array );
__declspec(implementation_key(3956)) long ksIntersectionResult::GetCount ( );
__declspec(implementation_key(3957)) long ksIntersectionResult::GetIntersectionType ( long index );
__declspec(implementation_key(3958)) VARIANT_BOOL ksPlaneMiddleDefinition::SetObject ( long number, IDispatch * val );
__declspec(implementation_key(3959)) IDispatchPtr ksPlaneMiddleDefinition::GetObject ( long number );
__declspec(implementation_key(3960)) IDispatchPtr ksPlaneMiddleDefinition::GetSurface ( );
__declspec(implementation_key(3961)) VARIANT_BOOL ksPlaneMiddleDefinition::Getposition ( );
__declspec(implementation_key(3962)) void ksPlaneMiddleDefinition::Putposition ( VARIANT_BOOL _val );
__declspec(implementation_key(3963)) VARIANT_BOOL ksControlPointDefinition::SetVertex ( IDispatch * val );
__declspec(implementation_key(3964)) IDispatchPtr ksControlPointDefinition::GetVertex ( );
__declspec(implementation_key(3965)) VARIANT_BOOL ksControlPointDefinition::GetPoint ( double * x, double * y, double * z );
__declspec(implementation_key(3966)) VARIANT_BOOL ksConjunctivePointDefinition::SetVertex ( IDispatch * val );
__declspec(implementation_key(3967)) IDispatchPtr ksConjunctivePointDefinition::GetVertex ( );
__declspec(implementation_key(3968)) VARIANT_BOOL ksConjunctivePointDefinition::SetEdge ( IDispatch * val );
__declspec(implementation_key(3969)) IDispatchPtr ksConjunctivePointDefinition::GetEdge ( );
__declspec(implementation_key(3970)) VARIANT_BOOL ksConjunctivePointDefinition::GetPoint ( double * x, double * y, double * z );
__declspec(implementation_key(3971)) VARIANT_BOOL ksConjunctivePointDefinition::Getdirection ( );
__declspec(implementation_key(3972)) void ksConjunctivePointDefinition::Putdirection ( VARIANT_BOOL _val );
__declspec(implementation_key(3973)) IDispatchPtr ksChooseBodies::BodyCollection ( );
__declspec(implementation_key(3974)) long ksChooseBodies::GetChooseBodiesType ( );
__declspec(implementation_key(3975)) void ksChooseBodies::PutChooseBodiesType ( long _val );
__declspec(implementation_key(3976)) IDispatchPtr ksAggregateDefinition::BodyCollection ( );
__declspec(implementation_key(3977)) long ksAggregateDefinition::GetBooleanType ( );
__declspec(implementation_key(3978)) void ksAggregateDefinition::PutBooleanType ( long _val );
__declspec(implementation_key(3979)) IDispatchPtr ksChangeLeaderParam::GetpTextline ( );
__declspec(implementation_key(3980)) VARIANT_BOOL ksChangeLeaderParam::SetpTextline ( IDispatch * pTextLine );
__declspec(implementation_key(3981)) IDispatchPtr ksChangeLeaderParam::GetpPolyline ( );
__declspec(implementation_key(3982)) VARIANT_BOOL ksChangeLeaderParam::SetpPolyline ( IDispatch * pPolyline );
__declspec(implementation_key(3983)) VARIANT_BOOL ksChangeLeaderParam::Init ( );
__declspec(implementation_key(3984)) double ksChangeLeaderParam::Getx ( );
__declspec(implementation_key(3985)) void ksChangeLeaderParam::Putx ( double _val );
__declspec(implementation_key(3986)) double ksChangeLeaderParam::Gety ( );
__declspec(implementation_key(3987)) void ksChangeLeaderParam::Puty ( double _val );
__declspec(implementation_key(3988)) short ksChangeLeaderParam::GetsignType ( );
__declspec(implementation_key(3989)) void ksChangeLeaderParam::PutsignType ( short _val );
__declspec(implementation_key(3990)) double ksChangeLeaderParam::GetsignHeight ( );
__declspec(implementation_key(3991)) void ksChangeLeaderParam::PutsignHeight ( double _val );
__declspec(implementation_key(3992)) double ksChangeLeaderParam::GetleaderLength ( );
__declspec(implementation_key(3993)) void ksChangeLeaderParam::PutleaderLength ( double _val );
__declspec(implementation_key(3994)) long ksChangeLeaderParam::Getstyle ( );
__declspec(implementation_key(3995)) void ksChangeLeaderParam::Putstyle ( long _val );
__declspec(implementation_key(3996)) IDispatchPtr ksChooseParts::PartCollection ( );
__declspec(implementation_key(3997)) long ksChooseParts::GetChoosePartsType ( );
__declspec(implementation_key(3998)) void ksChooseParts::PutChoosePartsType ( long _val );
__declspec(implementation_key(3999)) VARIANT_BOOL ksBodyParts::UserBodyPartsChoice ( );
__declspec(implementation_key(4000)) long ksBodyParts::Getcount ( );
__declspec(implementation_key(4001)) VARIANT_BOOL ksBodyParts::SetPartSelected ( long index, VARIANT_BOOL Select );
__declspec(implementation_key(4002)) VARIANT_BOOL ksBodyParts::GetPartSelected ( long index );
__declspec(implementation_key(4003)) VARIANT_BOOL ksBodyParts::SetGreatPartsSelected ( );
__declspec(implementation_key(4004)) VARIANT_BOOL ksBodyParts::GetAllSelected ( );
__declspec(implementation_key(4005)) void ksBodyParts::PutAllSelected ( VARIANT_BOOL _val );
__declspec(implementation_key(4006)) long ksSnapInfo::GetSnapType1 ( );
__declspec(implementation_key(4007)) long ksSnapInfo::GetObject1 ( );
__declspec(implementation_key(4008)) long ksSnapInfo::GetSnapType2 ( );
__declspec(implementation_key(4009)) long ksSnapInfo::GetObject2 ( );
__declspec(implementation_key(4010)) VARIANT_BOOL ksSnapInfo::GetPoint ( double * x, double * y );
__declspec(implementation_key(4011)) VARIANT_BOOL ksSaveToPreviusParam::AddWarning ( _bstr_t uniqueID, _bstr_t optionName, _bstr_t text );
__declspec(implementation_key(4012)) VARIANT_BOOL ksSaveToPreviusParam::AddOption ( _bstr_t uniqueID, _bstr_t optionName, const _variant_t & options, _bstr_t defaultValue );
__declspec(implementation_key(4013)) _bstr_t ksSaveToPreviusParam::GetCurrentOptionValue ( _bstr_t uniqueID );
#pragma stop_map_region

} // namespace Kompas6API5

#pragma pack(pop)
